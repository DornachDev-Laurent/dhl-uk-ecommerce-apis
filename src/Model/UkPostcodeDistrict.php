<?php
/**
 * UkPostcodeDistrict
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  DHLUK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL eCommerce UK API
 *
 * The DHL eCommerce UK API allows customers and partners to:  - Get available products based on delivery address and parcel size.  - Find servicepoints in the UK or worldwide.  - Create new shipments and optionally return labels.  - Get shipment customs documents.  - Request shipment cancellation.  - Request shipment amendment.  - Regenerate labels ready for reprinting.  - Get details of customer trading locations.  - Request a driver pickup from a customer trading location.  - Get information about driver pickups already requested.  - Track shipments.  - Get DHL eCommerce UK reference data to help you provide valid shipment data from your applications.  - Add a What 3 Words to a domestic shipment.  - Find a DHL Parcels Depot.   **`API Authentications:`** All API operations require an access token to be passed in the Authorization Header for each request. The token type is an OAuth 2.0 Bearer token. To get the token you have to call the Authentication operation of this API and provide **client_id** and **client_secret**. The Access Token is valid for defined amount of time so it is not necessary to request the token for each request. Developers should implement the client application in a way that the token will be requested again only after it expires.  **`Access Token Lifecycle:`** When you receive an Access Token, it is valid for 60 minutes. During this time, you don't have to request new token per each request, but you can simply reuse the same token to access API resources, until the token expires. The invalid token or token expiration will be indicated by HTTP Status Code 401 Unauthorized, then your application has to request new Access Token.    **Recommended sequence for creating a shipment with the Shipping Label API is as follows:**        1.  Use client_id and client_secret to authenticate and obtain an access token using /auth/v1/accesstoken (see details below). A client_id and client_secret can be obtained by registering on the DHL developer portal and then registering an app in the user dashboard.   2.  Prepare valid JSON request as per Shipping Label API POST request schema (see examples below). Use data above depending on your use-case.   3.  Send an API request the correct API endpoint for test/UAT or live/production:          test: https://api-uat.dhl.com/parceluk/shipping/v1/label              live: https://api.dhl.com/parceluk/shipping/v1/label          If the shipment request is valid and accepted then a new shipmentId and optionally labels will be returned in the response.  **Sample Pickup Accounts And Product codes:**    To test using the Shipping Label API, you may use the following accounts and additional settings.        UK Domestic Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F020579  | DHL eCommerce UK domestic labels   orderedProduct            | 220      | Signature At Address Only - Next Day    International Road Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F820579  | DHL eCommerce UK Parcel Connect labels   orderedProduct             | 206      | Parcel Connect               International Air Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F520579 | DHL eCommerce UK International Labels   orderedProduct             | 101     | Worldwide Air
 *
 * The version of the OpenAPI document: 1.3.8
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DHLUK\Model;

use \ArrayAccess;
use \DHLUK\ObjectSerializer;

/**
 * UkPostcodeDistrict Class Doc Comment
 *
 * @category Class
 * @package  DHLUK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class UkPostcodeDistrict implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ukPostcodeDistrict';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'postcodeDistrict' => 'string',
        'district' => 'string',
        'town' => 'string',
        'county' => 'string',
        'sortationCode' => 'string',
        'latestNotification' => 'string',
        'latestCollection' => 'string',
        'nineAm' => 'bool',
        'tenThirtyAm' => 'bool',
        'am' => 'bool',
        'nextday' => 'bool',
        'fortyEightHr' => 'bool',
        'saturday' => 'bool',
        'saturday9am' => 'bool',
        'saturday1030am' => 'bool',
        'thirdPartyCollection' => 'bool',
        'returns' => 'bool',
        'customsLevel' => 'string',
        'ukHolidayRegion' => 'string',
        'secondarySort' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'postcodeDistrict' => null,
        'district' => null,
        'town' => null,
        'county' => null,
        'sortationCode' => null,
        'latestNotification' => null,
        'latestCollection' => null,
        'nineAm' => null,
        'tenThirtyAm' => null,
        'am' => null,
        'nextday' => null,
        'fortyEightHr' => null,
        'saturday' => null,
        'saturday9am' => null,
        'saturday1030am' => null,
        'thirdPartyCollection' => null,
        'returns' => null,
        'customsLevel' => null,
        'ukHolidayRegion' => null,
        'secondarySort' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'postcodeDistrict' => 'postcodeDistrict',
        'district' => 'district',
        'town' => 'town',
        'county' => 'county',
        'sortationCode' => 'sortationCode',
        'latestNotification' => 'latestNotification',
        'latestCollection' => 'latestCollection',
        'nineAm' => 'nineAm',
        'tenThirtyAm' => 'tenThirtyAm',
        'am' => 'am',
        'nextday' => 'nextday',
        'fortyEightHr' => 'fortyEightHr',
        'saturday' => 'saturday',
        'saturday9am' => 'saturday9am',
        'saturday1030am' => 'saturday1030am',
        'thirdPartyCollection' => 'thirdPartyCollection',
        'returns' => 'returns',
        'customsLevel' => 'customsLevel',
        'ukHolidayRegion' => 'ukHolidayRegion',
        'secondarySort' => 'secondarySort'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'postcodeDistrict' => 'setPostcodeDistrict',
        'district' => 'setDistrict',
        'town' => 'setTown',
        'county' => 'setCounty',
        'sortationCode' => 'setSortationCode',
        'latestNotification' => 'setLatestNotification',
        'latestCollection' => 'setLatestCollection',
        'nineAm' => 'setNineAm',
        'tenThirtyAm' => 'setTenThirtyAm',
        'am' => 'setAm',
        'nextday' => 'setNextday',
        'fortyEightHr' => 'setFortyEightHr',
        'saturday' => 'setSaturday',
        'saturday9am' => 'setSaturday9am',
        'saturday1030am' => 'setSaturday1030am',
        'thirdPartyCollection' => 'setThirdPartyCollection',
        'returns' => 'setReturns',
        'customsLevel' => 'setCustomsLevel',
        'ukHolidayRegion' => 'setUkHolidayRegion',
        'secondarySort' => 'setSecondarySort'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'postcodeDistrict' => 'getPostcodeDistrict',
        'district' => 'getDistrict',
        'town' => 'getTown',
        'county' => 'getCounty',
        'sortationCode' => 'getSortationCode',
        'latestNotification' => 'getLatestNotification',
        'latestCollection' => 'getLatestCollection',
        'nineAm' => 'getNineAm',
        'tenThirtyAm' => 'getTenThirtyAm',
        'am' => 'getAm',
        'nextday' => 'getNextday',
        'fortyEightHr' => 'getFortyEightHr',
        'saturday' => 'getSaturday',
        'saturday9am' => 'getSaturday9am',
        'saturday1030am' => 'getSaturday1030am',
        'thirdPartyCollection' => 'getThirdPartyCollection',
        'returns' => 'getReturns',
        'customsLevel' => 'getCustomsLevel',
        'ukHolidayRegion' => 'getUkHolidayRegion',
        'secondarySort' => 'getSecondarySort'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CUSTOMS_LEVEL_NONE = 'none';
    const CUSTOMS_LEVEL_BASIC = 'basic';
    const CUSTOMS_LEVEL_FULL = 'full';
    const UK_HOLIDAY_REGION_ENGLAND_AND_WALES = 'england-and-wales';
    const UK_HOLIDAY_REGION_SCOTLAND = 'scotland';
    const UK_HOLIDAY_REGION_NORTHERN_IRELAND = 'northern-ireland';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCustomsLevelAllowableValues()
    {
        return [
            self::CUSTOMS_LEVEL_NONE,
            self::CUSTOMS_LEVEL_BASIC,
            self::CUSTOMS_LEVEL_FULL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUkHolidayRegionAllowableValues()
    {
        return [
            self::UK_HOLIDAY_REGION_ENGLAND_AND_WALES,
            self::UK_HOLIDAY_REGION_SCOTLAND,
            self::UK_HOLIDAY_REGION_NORTHERN_IRELAND,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['postcodeDistrict'] = $data['postcodeDistrict'] ?? null;
        $this->container['district'] = $data['district'] ?? null;
        $this->container['town'] = $data['town'] ?? null;
        $this->container['county'] = $data['county'] ?? null;
        $this->container['sortationCode'] = $data['sortationCode'] ?? null;
        $this->container['latestNotification'] = $data['latestNotification'] ?? null;
        $this->container['latestCollection'] = $data['latestCollection'] ?? null;
        $this->container['nineAm'] = $data['nineAm'] ?? null;
        $this->container['tenThirtyAm'] = $data['tenThirtyAm'] ?? null;
        $this->container['am'] = $data['am'] ?? null;
        $this->container['nextday'] = $data['nextday'] ?? null;
        $this->container['fortyEightHr'] = $data['fortyEightHr'] ?? null;
        $this->container['saturday'] = $data['saturday'] ?? null;
        $this->container['saturday9am'] = $data['saturday9am'] ?? null;
        $this->container['saturday1030am'] = $data['saturday1030am'] ?? null;
        $this->container['thirdPartyCollection'] = $data['thirdPartyCollection'] ?? null;
        $this->container['returns'] = $data['returns'] ?? null;
        $this->container['customsLevel'] = $data['customsLevel'] ?? null;
        $this->container['ukHolidayRegion'] = $data['ukHolidayRegion'] ?? null;
        $this->container['secondarySort'] = $data['secondarySort'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCustomsLevelAllowableValues();
        if (!is_null($this->container['customsLevel']) && !in_array($this->container['customsLevel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'customsLevel', must be one of '%s'",
                $this->container['customsLevel'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUkHolidayRegionAllowableValues();
        if (!is_null($this->container['ukHolidayRegion']) && !in_array($this->container['ukHolidayRegion'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ukHolidayRegion', must be one of '%s'",
                $this->container['ukHolidayRegion'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets postcodeDistrict
     *
     * @return string|null
     */
    public function getPostcodeDistrict()
    {
        return $this->container['postcodeDistrict'];
    }

    /**
     * Sets postcodeDistrict
     *
     * @param string|null $postcodeDistrict UK Postcode district e.g. CV8 3
     *
     * @return self
     */
    public function setPostcodeDistrict($postcodeDistrict)
    {
        $this->container['postcodeDistrict'] = $postcodeDistrict;

        return $this;
    }

    /**
     * Gets district
     *
     * @return string|null
     */
    public function getDistrict()
    {
        return $this->container['district'];
    }

    /**
     * Sets district
     *
     * @param string|null $district District or area
     *
     * @return self
     */
    public function setDistrict($district)
    {
        $this->container['district'] = $district;

        return $this;
    }

    /**
     * Gets town
     *
     * @return string|null
     */
    public function getTown()
    {
        return $this->container['town'];
    }

    /**
     * Sets town
     *
     * @param string|null $town Town or city
     *
     * @return self
     */
    public function setTown($town)
    {
        $this->container['town'] = $town;

        return $this;
    }

    /**
     * Gets county
     *
     * @return string|null
     */
    public function getCounty()
    {
        return $this->container['county'];
    }

    /**
     * Sets county
     *
     * @param string|null $county County
     *
     * @return self
     */
    public function setCounty($county)
    {
        $this->container['county'] = $county;

        return $this;
    }

    /**
     * Gets sortationCode
     *
     * @return string|null
     */
    public function getSortationCode()
    {
        return $this->container['sortationCode'];
    }

    /**
     * Sets sortationCode
     *
     * @param string|null $sortationCode Sortation code to print on labels for this UK postcode district
     *
     * @return self
     */
    public function setSortationCode($sortationCode)
    {
        $this->container['sortationCode'] = $sortationCode;

        return $this;
    }

    /**
     * Gets latestNotification
     *
     * @return string|null
     */
    public function getLatestNotification()
    {
        return $this->container['latestNotification'];
    }

    /**
     * Sets latestNotification
     *
     * @param string|null $latestNotification Latest time a collection can be booked in this UK postcode district in ISO8601 format
     *
     * @return self
     */
    public function setLatestNotification($latestNotification)
    {
        $this->container['latestNotification'] = $latestNotification;

        return $this;
    }

    /**
     * Gets latestCollection
     *
     * @return string|null
     */
    public function getLatestCollection()
    {
        return $this->container['latestCollection'];
    }

    /**
     * Sets latestCollection
     *
     * @param string|null $latestCollection Latest time a collection can be collected in this UK postcode district in ISO8601 format
     *
     * @return self
     */
    public function setLatestCollection($latestCollection)
    {
        $this->container['latestCollection'] = $latestCollection;

        return $this;
    }

    /**
     * Gets nineAm
     *
     * @return bool|null
     */
    public function getNineAm()
    {
        return $this->container['nineAm'];
    }

    /**
     * Sets nineAm
     *
     * @param bool|null $nineAm Are deliveries before 9am available at this UK postcode district?
     *
     * @return self
     */
    public function setNineAm($nineAm)
    {
        $this->container['nineAm'] = $nineAm;

        return $this;
    }

    /**
     * Gets tenThirtyAm
     *
     * @return bool|null
     */
    public function getTenThirtyAm()
    {
        return $this->container['tenThirtyAm'];
    }

    /**
     * Sets tenThirtyAm
     *
     * @param bool|null $tenThirtyAm Are deliveries before 10:30am available at this UK postcode district?
     *
     * @return self
     */
    public function setTenThirtyAm($tenThirtyAm)
    {
        $this->container['tenThirtyAm'] = $tenThirtyAm;

        return $this;
    }

    /**
     * Gets am
     *
     * @return bool|null
     */
    public function getAm()
    {
        return $this->container['am'];
    }

    /**
     * Sets am
     *
     * @param bool|null $am Are deliveries before 12pm available at this UK postcode district?
     *
     * @return self
     */
    public function setAm($am)
    {
        $this->container['am'] = $am;

        return $this;
    }

    /**
     * Gets nextday
     *
     * @return bool|null
     */
    public function getNextday()
    {
        return $this->container['nextday'];
    }

    /**
     * Sets nextday
     *
     * @param bool|null $nextday Are deliveries in one business day available at this UK postcode district?
     *
     * @return self
     */
    public function setNextday($nextday)
    {
        $this->container['nextday'] = $nextday;

        return $this;
    }

    /**
     * Gets fortyEightHr
     *
     * @return bool|null
     */
    public function getFortyEightHr()
    {
        return $this->container['fortyEightHr'];
    }

    /**
     * Sets fortyEightHr
     *
     * @param bool|null $fortyEightHr Are deliveries in two business day's available at this UK postcode district?
     *
     * @return self
     */
    public function setFortyEightHr($fortyEightHr)
    {
        $this->container['fortyEightHr'] = $fortyEightHr;

        return $this;
    }

    /**
     * Gets saturday
     *
     * @return bool|null
     */
    public function getSaturday()
    {
        return $this->container['saturday'];
    }

    /**
     * Sets saturday
     *
     * @param bool|null $saturday Are deliveries on a Saturday available at this UK postcode district?
     *
     * @return self
     */
    public function setSaturday($saturday)
    {
        $this->container['saturday'] = $saturday;

        return $this;
    }

    /**
     * Gets saturday9am
     *
     * @return bool|null
     */
    public function getSaturday9am()
    {
        return $this->container['saturday9am'];
    }

    /**
     * Sets saturday9am
     *
     * @param bool|null $saturday9am Are deliveries on a Saturday before 9am available at this UK postcode district?
     *
     * @return self
     */
    public function setSaturday9am($saturday9am)
    {
        $this->container['saturday9am'] = $saturday9am;

        return $this;
    }

    /**
     * Gets saturday1030am
     *
     * @return bool|null
     */
    public function getSaturday1030am()
    {
        return $this->container['saturday1030am'];
    }

    /**
     * Sets saturday1030am
     *
     * @param bool|null $saturday1030am Are deliveries on a Saturday before 10:30am available at this UK postcode district?
     *
     * @return self
     */
    public function setSaturday1030am($saturday1030am)
    {
        $this->container['saturday1030am'] = $saturday1030am;

        return $this;
    }

    /**
     * Gets thirdPartyCollection
     *
     * @return bool|null
     */
    public function getThirdPartyCollection()
    {
        return $this->container['thirdPartyCollection'];
    }

    /**
     * Sets thirdPartyCollection
     *
     * @param bool|null $thirdPartyCollection Are adhoc third party collections available from this UK postcode district?
     *
     * @return self
     */
    public function setThirdPartyCollection($thirdPartyCollection)
    {
        $this->container['thirdPartyCollection'] = $thirdPartyCollection;

        return $this;
    }

    /**
     * Gets returns
     *
     * @return bool|null
     */
    public function getReturns()
    {
        return $this->container['returns'];
    }

    /**
     * Sets returns
     *
     * @param bool|null $returns Are returns including inbox returns available at this UK postcode district?
     *
     * @return self
     */
    public function setReturns($returns)
    {
        $this->container['returns'] = $returns;

        return $this;
    }

    /**
     * Gets customsLevel
     *
     * @return string|null
     */
    public function getCustomsLevel()
    {
        return $this->container['customsLevel'];
    }

    /**
     * Sets customsLevel
     *
     * @param string|null $customsLevel What level of customs information is needed at this UK postcode district. For example in Jersey and Guernsey a basic (cn22) level of customs information is required
     *
     * @return self
     */
    public function setCustomsLevel($customsLevel)
    {
        $allowedValues = $this->getCustomsLevelAllowableValues();
        if (!is_null($customsLevel) && !in_array($customsLevel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'customsLevel', must be one of '%s'",
                    $customsLevel,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['customsLevel'] = $customsLevel;

        return $this;
    }

    /**
     * Gets ukHolidayRegion
     *
     * @return string|null
     */
    public function getUkHolidayRegion()
    {
        return $this->container['ukHolidayRegion'];
    }

    /**
     * Sets ukHolidayRegion
     *
     * @param string|null $ukHolidayRegion UK bank holiday region this postcode district is situated in. This region can be used with the related UK Bank Holiday's API to determine whether a given date is a bank/public holiday at a particular UK Postcode District.
     *
     * @return self
     */
    public function setUkHolidayRegion($ukHolidayRegion)
    {
        $allowedValues = $this->getUkHolidayRegionAllowableValues();
        if (!is_null($ukHolidayRegion) && !in_array($ukHolidayRegion, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ukHolidayRegion', must be one of '%s'",
                    $ukHolidayRegion,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ukHolidayRegion'] = $ukHolidayRegion;

        return $this;
    }

    /**
     * Gets secondarySort
     *
     * @return string|null
     */
    public function getSecondarySort()
    {
        return $this->container['secondarySort'];
    }

    /**
     * Sets secondarySort
     *
     * @param string|null $secondarySort Secondary sortation name to print on labels for this UK postcode district
     *
     * @return self
     */
    public function setSecondarySort($secondarySort)
    {
        $this->container['secondarySort'] = $secondarySort;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


