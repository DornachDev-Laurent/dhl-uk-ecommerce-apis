<?php
/**
 * ProductCountryFeatureData
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  DHLUK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL eCommerce UK API
 *
 * The DHL eCommerce UK API allows customers and partners to:  - Get available products based on delivery address and parcel size.  - Find servicepoints in the UK or worldwide.  - Create new shipments and optionally return labels.  - Get shipment customs documents.  - Request shipment cancellation.  - Request shipment amendment.  - Regenerate labels ready for reprinting.  - Get details of customer trading locations.  - Request a driver pickup from a customer trading location.  - Get information about driver pickups already requested.  - Track shipments.  - Get DHL eCommerce UK reference data to help you provide valid shipment data from your applications.  - Add a What 3 Words to a domestic shipment.  - Find a DHL Parcels Depot.   **`API Authentications:`** All API operations require an access token to be passed in the Authorization Header for each request. The token type is an OAuth 2.0 Bearer token. To get the token you have to call the Authentication operation of this API and provide **client_id** and **client_secret**. The Access Token is valid for defined amount of time so it is not necessary to request the token for each request. Developers should implement the client application in a way that the token will be requested again only after it expires.  **`Access Token Lifecycle:`** When you receive an Access Token, it is valid for 60 minutes. During this time, you don't have to request new token per each request, but you can simply reuse the same token to access API resources, until the token expires. The invalid token or token expiration will be indicated by HTTP Status Code 401 Unauthorized, then your application has to request new Access Token.    **Recommended sequence for creating a shipment with the Shipping Label API is as follows:**        1.  Use client_id and client_secret to authenticate and obtain an access token using /auth/v1/accesstoken (see details below). A client_id and client_secret can be obtained by registering on the DHL developer portal and then registering an app in the user dashboard.   2.  Prepare valid JSON request as per Shipping Label API POST request schema (see examples below). Use data above depending on your use-case.   3.  Send an API request the correct API endpoint for test/UAT or live/production:          test: https://api-uat.dhl.com/parceluk/shipping/v1/label              live: https://api.dhl.com/parceluk/shipping/v1/label          If the shipment request is valid and accepted then a new shipmentId and optionally labels will be returned in the response.  **Sample Pickup Accounts And Product codes:**    To test using the Shipping Label API, you may use the following accounts and additional settings.        UK Domestic Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F020579  | DHL eCommerce UK domestic labels   orderedProduct            | 220      | Signature At Address Only - Next Day    International Road Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F820579  | DHL eCommerce UK Parcel Connect labels   orderedProduct             | 206      | Parcel Connect               International Air Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F520579 | DHL eCommerce UK International Labels   orderedProduct             | 101     | Worldwide Air
 *
 * The version of the OpenAPI document: 1.3.8
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DHLUK\Model;

use \ArrayAccess;
use \DHLUK\ObjectSerializer;

/**
 * ProductCountryFeatureData Class Doc Comment
 *
 * @category Class
 * @package  DHLUK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ProductCountryFeatureData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'productCountryFeatureData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'productCode' => 'string',
        'countryCode' => 'string',
        'effectiveFrom' => 'string',
        'effectiveTo' => 'string',
        'recipientType' => 'string',
        'addressType' => 'string',
        'locationType' => 'string',
        'transitTimeDescription' => 'string',
        'minTransitTime' => 'float',
        'maxTransitTime' => 'float',
        'customsLevel' => 'string',
        'standardParcels' => 'bool',
        'bulkyParcels' => 'bool',
        'standardDims' => 'bool',
        'maximumParcels' => 'float',
        'maximumLength' => 'float',
        'maximumWidth' => 'float',
        'maximumHeight' => 'float',
        'maximumGirth' => 'float',
        'maximumWeight' => 'float',
        'maximumDiameter' => 'float',
        'maximumLengthGirth' => 'float',
        'minimumLength' => 'float',
        'minimumWidth' => 'float',
        'minimumHeight' => 'float',
        'minimumWeight' => 'float',
        'bulkyLength' => 'float',
        'bulkyWidth' => 'float',
        'bulkyHeight' => 'float',
        'bulkyGirth' => 'float',
        'bulkyWeight' => 'float',
        'bulkyDiameter' => 'float',
        'postnummerRequired' => 'bool',
        'labelPersonalData' => 'bool',
        'returns' => 'bool',
        'dutiesPaid' => 'string',
        'exportExcludePostcodesBeginWith' => 'string[]',
        'importExcludePostcodesBeginWith' => 'string[]',
        'deliveryGateway' => 'string[]',
        'barcodeRoutingDateCode' => 'string',
        'customsLevelOverrides' => '\DHLUK\Model\CustomsLevelOverride[]',
        'iossApplies' => 'bool',
        'iossValueLimits' => '\DHLUK\Model\IossValueLimit[]',
        'productAllowedIfIossLimitExceeded' => 'bool',
        'iossDutiesPaid' => 'string',
        'nonIossAllowed' => 'bool',
        'maximumWeightPerParcel' => 'float',
        'maximumPallets' => 'float',
        'dutiesPaidList' => 'string[]',
        'limitedReasonForExportList' => '\DHLUK\Model\ReasonForExport[]',
        'fullReasonForExportList' => '\DHLUK\Model\ReasonForExport[]',
        'serviceProviderCodes' => 'string[]',
        'serviceProviderProductCode' => 'string',
        'transitGateways' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'productCode' => null,
        'countryCode' => null,
        'effectiveFrom' => null,
        'effectiveTo' => null,
        'recipientType' => null,
        'addressType' => null,
        'locationType' => null,
        'transitTimeDescription' => null,
        'minTransitTime' => null,
        'maxTransitTime' => null,
        'customsLevel' => null,
        'standardParcels' => null,
        'bulkyParcels' => null,
        'standardDims' => null,
        'maximumParcels' => null,
        'maximumLength' => null,
        'maximumWidth' => null,
        'maximumHeight' => null,
        'maximumGirth' => null,
        'maximumWeight' => null,
        'maximumDiameter' => null,
        'maximumLengthGirth' => null,
        'minimumLength' => null,
        'minimumWidth' => null,
        'minimumHeight' => null,
        'minimumWeight' => null,
        'bulkyLength' => null,
        'bulkyWidth' => null,
        'bulkyHeight' => null,
        'bulkyGirth' => null,
        'bulkyWeight' => null,
        'bulkyDiameter' => null,
        'postnummerRequired' => null,
        'labelPersonalData' => null,
        'returns' => null,
        'dutiesPaid' => null,
        'exportExcludePostcodesBeginWith' => null,
        'importExcludePostcodesBeginWith' => null,
        'deliveryGateway' => null,
        'barcodeRoutingDateCode' => null,
        'customsLevelOverrides' => null,
        'iossApplies' => null,
        'iossValueLimits' => null,
        'productAllowedIfIossLimitExceeded' => null,
        'iossDutiesPaid' => null,
        'nonIossAllowed' => null,
        'maximumWeightPerParcel' => null,
        'maximumPallets' => null,
        'dutiesPaidList' => null,
        'limitedReasonForExportList' => null,
        'fullReasonForExportList' => null,
        'serviceProviderCodes' => null,
        'serviceProviderProductCode' => null,
        'transitGateways' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'productCode' => 'productCode',
        'countryCode' => 'countryCode',
        'effectiveFrom' => 'effectiveFrom',
        'effectiveTo' => 'effectiveTo',
        'recipientType' => 'recipientType',
        'addressType' => 'addressType',
        'locationType' => 'locationType',
        'transitTimeDescription' => 'transitTimeDescription',
        'minTransitTime' => 'minTransitTime',
        'maxTransitTime' => 'maxTransitTime',
        'customsLevel' => 'customsLevel',
        'standardParcels' => 'standardParcels',
        'bulkyParcels' => 'bulkyParcels',
        'standardDims' => 'standardDims',
        'maximumParcels' => 'maximumParcels',
        'maximumLength' => 'maximumLength',
        'maximumWidth' => 'maximumWidth',
        'maximumHeight' => 'maximumHeight',
        'maximumGirth' => 'maximumGirth',
        'maximumWeight' => 'maximumWeight',
        'maximumDiameter' => 'maximumDiameter',
        'maximumLengthGirth' => 'maximumLengthGirth',
        'minimumLength' => 'minimumLength',
        'minimumWidth' => 'minimumWidth',
        'minimumHeight' => 'minimumHeight',
        'minimumWeight' => 'minimumWeight',
        'bulkyLength' => 'bulkyLength',
        'bulkyWidth' => 'bulkyWidth',
        'bulkyHeight' => 'bulkyHeight',
        'bulkyGirth' => 'bulkyGirth',
        'bulkyWeight' => 'bulkyWeight',
        'bulkyDiameter' => 'bulkyDiameter',
        'postnummerRequired' => 'postnummerRequired',
        'labelPersonalData' => 'labelPersonalData',
        'returns' => 'returns',
        'dutiesPaid' => 'dutiesPaid',
        'exportExcludePostcodesBeginWith' => 'exportExcludePostcodesBeginWith',
        'importExcludePostcodesBeginWith' => 'importExcludePostcodesBeginWith',
        'deliveryGateway' => 'deliveryGateway',
        'barcodeRoutingDateCode' => 'barcodeRoutingDateCode',
        'customsLevelOverrides' => 'customsLevelOverrides',
        'iossApplies' => 'iossApplies',
        'iossValueLimits' => 'iossValueLimits',
        'productAllowedIfIossLimitExceeded' => 'productAllowedIfIossLimitExceeded',
        'iossDutiesPaid' => 'iossDutiesPaid',
        'nonIossAllowed' => 'nonIossAllowed',
        'maximumWeightPerParcel' => 'maximumWeightPerParcel',
        'maximumPallets' => 'maximumPallets',
        'dutiesPaidList' => 'dutiesPaidList',
        'limitedReasonForExportList' => 'limitedReasonForExportList',
        'fullReasonForExportList' => 'fullReasonForExportList',
        'serviceProviderCodes' => 'serviceProviderCodes',
        'serviceProviderProductCode' => 'serviceProviderProductCode',
        'transitGateways' => 'transitGateways'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'productCode' => 'setProductCode',
        'countryCode' => 'setCountryCode',
        'effectiveFrom' => 'setEffectiveFrom',
        'effectiveTo' => 'setEffectiveTo',
        'recipientType' => 'setRecipientType',
        'addressType' => 'setAddressType',
        'locationType' => 'setLocationType',
        'transitTimeDescription' => 'setTransitTimeDescription',
        'minTransitTime' => 'setMinTransitTime',
        'maxTransitTime' => 'setMaxTransitTime',
        'customsLevel' => 'setCustomsLevel',
        'standardParcels' => 'setStandardParcels',
        'bulkyParcels' => 'setBulkyParcels',
        'standardDims' => 'setStandardDims',
        'maximumParcels' => 'setMaximumParcels',
        'maximumLength' => 'setMaximumLength',
        'maximumWidth' => 'setMaximumWidth',
        'maximumHeight' => 'setMaximumHeight',
        'maximumGirth' => 'setMaximumGirth',
        'maximumWeight' => 'setMaximumWeight',
        'maximumDiameter' => 'setMaximumDiameter',
        'maximumLengthGirth' => 'setMaximumLengthGirth',
        'minimumLength' => 'setMinimumLength',
        'minimumWidth' => 'setMinimumWidth',
        'minimumHeight' => 'setMinimumHeight',
        'minimumWeight' => 'setMinimumWeight',
        'bulkyLength' => 'setBulkyLength',
        'bulkyWidth' => 'setBulkyWidth',
        'bulkyHeight' => 'setBulkyHeight',
        'bulkyGirth' => 'setBulkyGirth',
        'bulkyWeight' => 'setBulkyWeight',
        'bulkyDiameter' => 'setBulkyDiameter',
        'postnummerRequired' => 'setPostnummerRequired',
        'labelPersonalData' => 'setLabelPersonalData',
        'returns' => 'setReturns',
        'dutiesPaid' => 'setDutiesPaid',
        'exportExcludePostcodesBeginWith' => 'setExportExcludePostcodesBeginWith',
        'importExcludePostcodesBeginWith' => 'setImportExcludePostcodesBeginWith',
        'deliveryGateway' => 'setDeliveryGateway',
        'barcodeRoutingDateCode' => 'setBarcodeRoutingDateCode',
        'customsLevelOverrides' => 'setCustomsLevelOverrides',
        'iossApplies' => 'setIossApplies',
        'iossValueLimits' => 'setIossValueLimits',
        'productAllowedIfIossLimitExceeded' => 'setProductAllowedIfIossLimitExceeded',
        'iossDutiesPaid' => 'setIossDutiesPaid',
        'nonIossAllowed' => 'setNonIossAllowed',
        'maximumWeightPerParcel' => 'setMaximumWeightPerParcel',
        'maximumPallets' => 'setMaximumPallets',
        'dutiesPaidList' => 'setDutiesPaidList',
        'limitedReasonForExportList' => 'setLimitedReasonForExportList',
        'fullReasonForExportList' => 'setFullReasonForExportList',
        'serviceProviderCodes' => 'setServiceProviderCodes',
        'serviceProviderProductCode' => 'setServiceProviderProductCode',
        'transitGateways' => 'setTransitGateways'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'productCode' => 'getProductCode',
        'countryCode' => 'getCountryCode',
        'effectiveFrom' => 'getEffectiveFrom',
        'effectiveTo' => 'getEffectiveTo',
        'recipientType' => 'getRecipientType',
        'addressType' => 'getAddressType',
        'locationType' => 'getLocationType',
        'transitTimeDescription' => 'getTransitTimeDescription',
        'minTransitTime' => 'getMinTransitTime',
        'maxTransitTime' => 'getMaxTransitTime',
        'customsLevel' => 'getCustomsLevel',
        'standardParcels' => 'getStandardParcels',
        'bulkyParcels' => 'getBulkyParcels',
        'standardDims' => 'getStandardDims',
        'maximumParcels' => 'getMaximumParcels',
        'maximumLength' => 'getMaximumLength',
        'maximumWidth' => 'getMaximumWidth',
        'maximumHeight' => 'getMaximumHeight',
        'maximumGirth' => 'getMaximumGirth',
        'maximumWeight' => 'getMaximumWeight',
        'maximumDiameter' => 'getMaximumDiameter',
        'maximumLengthGirth' => 'getMaximumLengthGirth',
        'minimumLength' => 'getMinimumLength',
        'minimumWidth' => 'getMinimumWidth',
        'minimumHeight' => 'getMinimumHeight',
        'minimumWeight' => 'getMinimumWeight',
        'bulkyLength' => 'getBulkyLength',
        'bulkyWidth' => 'getBulkyWidth',
        'bulkyHeight' => 'getBulkyHeight',
        'bulkyGirth' => 'getBulkyGirth',
        'bulkyWeight' => 'getBulkyWeight',
        'bulkyDiameter' => 'getBulkyDiameter',
        'postnummerRequired' => 'getPostnummerRequired',
        'labelPersonalData' => 'getLabelPersonalData',
        'returns' => 'getReturns',
        'dutiesPaid' => 'getDutiesPaid',
        'exportExcludePostcodesBeginWith' => 'getExportExcludePostcodesBeginWith',
        'importExcludePostcodesBeginWith' => 'getImportExcludePostcodesBeginWith',
        'deliveryGateway' => 'getDeliveryGateway',
        'barcodeRoutingDateCode' => 'getBarcodeRoutingDateCode',
        'customsLevelOverrides' => 'getCustomsLevelOverrides',
        'iossApplies' => 'getIossApplies',
        'iossValueLimits' => 'getIossValueLimits',
        'productAllowedIfIossLimitExceeded' => 'getProductAllowedIfIossLimitExceeded',
        'iossDutiesPaid' => 'getIossDutiesPaid',
        'nonIossAllowed' => 'getNonIossAllowed',
        'maximumWeightPerParcel' => 'getMaximumWeightPerParcel',
        'maximumPallets' => 'getMaximumPallets',
        'dutiesPaidList' => 'getDutiesPaidList',
        'limitedReasonForExportList' => 'getLimitedReasonForExportList',
        'fullReasonForExportList' => 'getFullReasonForExportList',
        'serviceProviderCodes' => 'getServiceProviderCodes',
        'serviceProviderProductCode' => 'getServiceProviderProductCode',
        'transitGateways' => 'getTransitGateways'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const RECIPIENT_TYPE_BUSINESS = 'business';
    const RECIPIENT_TYPE_RESIDENTIAL = 'residential';
    const ADDRESS_TYPE_DOORSTEP = 'doorstep';
    const ADDRESS_TYPE_SERVICE_POINT = 'servicePoint';
    const LOCATION_TYPE_PARCEL_SHOP = 'ParcelShop';
    const CUSTOMS_LEVEL_NONE = 'none';
    const CUSTOMS_LEVEL_POSTCODE = 'postcode';
    const CUSTOMS_LEVEL_BASIC = 'basic';
    const CUSTOMS_LEVEL_FULL = 'full';
    const DUTIES_PAID_DDP = 'DDP';
    const DUTIES_PAID_DAP = 'DAP';
    const IOSS_DUTIES_PAID_DDP = 'DDP';
    const IOSS_DUTIES_PAID_DAP = 'DAP';
    const DUTIES_PAID_LIST_DDP = 'DDP';
    const DUTIES_PAID_LIST_DAP = 'DAP';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRecipientTypeAllowableValues()
    {
        return [
            self::RECIPIENT_TYPE_BUSINESS,
            self::RECIPIENT_TYPE_RESIDENTIAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAddressTypeAllowableValues()
    {
        return [
            self::ADDRESS_TYPE_DOORSTEP,
            self::ADDRESS_TYPE_SERVICE_POINT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocationTypeAllowableValues()
    {
        return [
            self::LOCATION_TYPE_PARCEL_SHOP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCustomsLevelAllowableValues()
    {
        return [
            self::CUSTOMS_LEVEL_NONE,
            self::CUSTOMS_LEVEL_POSTCODE,
            self::CUSTOMS_LEVEL_BASIC,
            self::CUSTOMS_LEVEL_FULL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDutiesPaidAllowableValues()
    {
        return [
            self::DUTIES_PAID_DDP,
            self::DUTIES_PAID_DAP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIossDutiesPaidAllowableValues()
    {
        return [
            self::IOSS_DUTIES_PAID_DDP,
            self::IOSS_DUTIES_PAID_DAP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDutiesPaidListAllowableValues()
    {
        return [
            self::DUTIES_PAID_LIST_DDP,
            self::DUTIES_PAID_LIST_DAP,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['productCode'] = $data['productCode'] ?? null;
        $this->container['countryCode'] = $data['countryCode'] ?? null;
        $this->container['effectiveFrom'] = $data['effectiveFrom'] ?? null;
        $this->container['effectiveTo'] = $data['effectiveTo'] ?? null;
        $this->container['recipientType'] = $data['recipientType'] ?? null;
        $this->container['addressType'] = $data['addressType'] ?? null;
        $this->container['locationType'] = $data['locationType'] ?? null;
        $this->container['transitTimeDescription'] = $data['transitTimeDescription'] ?? null;
        $this->container['minTransitTime'] = $data['minTransitTime'] ?? null;
        $this->container['maxTransitTime'] = $data['maxTransitTime'] ?? null;
        $this->container['customsLevel'] = $data['customsLevel'] ?? null;
        $this->container['standardParcels'] = $data['standardParcels'] ?? null;
        $this->container['bulkyParcels'] = $data['bulkyParcels'] ?? null;
        $this->container['standardDims'] = $data['standardDims'] ?? null;
        $this->container['maximumParcels'] = $data['maximumParcels'] ?? null;
        $this->container['maximumLength'] = $data['maximumLength'] ?? null;
        $this->container['maximumWidth'] = $data['maximumWidth'] ?? null;
        $this->container['maximumHeight'] = $data['maximumHeight'] ?? null;
        $this->container['maximumGirth'] = $data['maximumGirth'] ?? null;
        $this->container['maximumWeight'] = $data['maximumWeight'] ?? null;
        $this->container['maximumDiameter'] = $data['maximumDiameter'] ?? null;
        $this->container['maximumLengthGirth'] = $data['maximumLengthGirth'] ?? null;
        $this->container['minimumLength'] = $data['minimumLength'] ?? null;
        $this->container['minimumWidth'] = $data['minimumWidth'] ?? null;
        $this->container['minimumHeight'] = $data['minimumHeight'] ?? null;
        $this->container['minimumWeight'] = $data['minimumWeight'] ?? null;
        $this->container['bulkyLength'] = $data['bulkyLength'] ?? null;
        $this->container['bulkyWidth'] = $data['bulkyWidth'] ?? null;
        $this->container['bulkyHeight'] = $data['bulkyHeight'] ?? null;
        $this->container['bulkyGirth'] = $data['bulkyGirth'] ?? null;
        $this->container['bulkyWeight'] = $data['bulkyWeight'] ?? null;
        $this->container['bulkyDiameter'] = $data['bulkyDiameter'] ?? null;
        $this->container['postnummerRequired'] = $data['postnummerRequired'] ?? null;
        $this->container['labelPersonalData'] = $data['labelPersonalData'] ?? null;
        $this->container['returns'] = $data['returns'] ?? null;
        $this->container['dutiesPaid'] = $data['dutiesPaid'] ?? null;
        $this->container['exportExcludePostcodesBeginWith'] = $data['exportExcludePostcodesBeginWith'] ?? null;
        $this->container['importExcludePostcodesBeginWith'] = $data['importExcludePostcodesBeginWith'] ?? null;
        $this->container['deliveryGateway'] = $data['deliveryGateway'] ?? null;
        $this->container['barcodeRoutingDateCode'] = $data['barcodeRoutingDateCode'] ?? null;
        $this->container['customsLevelOverrides'] = $data['customsLevelOverrides'] ?? null;
        $this->container['iossApplies'] = $data['iossApplies'] ?? null;
        $this->container['iossValueLimits'] = $data['iossValueLimits'] ?? null;
        $this->container['productAllowedIfIossLimitExceeded'] = $data['productAllowedIfIossLimitExceeded'] ?? null;
        $this->container['iossDutiesPaid'] = $data['iossDutiesPaid'] ?? null;
        $this->container['nonIossAllowed'] = $data['nonIossAllowed'] ?? null;
        $this->container['maximumWeightPerParcel'] = $data['maximumWeightPerParcel'] ?? null;
        $this->container['maximumPallets'] = $data['maximumPallets'] ?? null;
        $this->container['dutiesPaidList'] = $data['dutiesPaidList'] ?? null;
        $this->container['limitedReasonForExportList'] = $data['limitedReasonForExportList'] ?? null;
        $this->container['fullReasonForExportList'] = $data['fullReasonForExportList'] ?? null;
        $this->container['serviceProviderCodes'] = $data['serviceProviderCodes'] ?? null;
        $this->container['serviceProviderProductCode'] = $data['serviceProviderProductCode'] ?? null;
        $this->container['transitGateways'] = $data['transitGateways'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['productCode'] === null) {
            $invalidProperties[] = "'productCode' can't be null";
        }
        if ($this->container['countryCode'] === null) {
            $invalidProperties[] = "'countryCode' can't be null";
        }
        if ($this->container['recipientType'] === null) {
            $invalidProperties[] = "'recipientType' can't be null";
        }
        $allowedValues = $this->getRecipientTypeAllowableValues();
        if (!is_null($this->container['recipientType']) && !in_array($this->container['recipientType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'recipientType', must be one of '%s'",
                $this->container['recipientType'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['addressType'] === null) {
            $invalidProperties[] = "'addressType' can't be null";
        }
        $allowedValues = $this->getAddressTypeAllowableValues();
        if (!is_null($this->container['addressType']) && !in_array($this->container['addressType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'addressType', must be one of '%s'",
                $this->container['addressType'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLocationTypeAllowableValues();
        if (!is_null($this->container['locationType']) && !in_array($this->container['locationType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'locationType', must be one of '%s'",
                $this->container['locationType'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCustomsLevelAllowableValues();
        if (!is_null($this->container['customsLevel']) && !in_array($this->container['customsLevel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'customsLevel', must be one of '%s'",
                $this->container['customsLevel'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDutiesPaidAllowableValues();
        if (!is_null($this->container['dutiesPaid']) && !in_array($this->container['dutiesPaid'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dutiesPaid', must be one of '%s'",
                $this->container['dutiesPaid'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIossDutiesPaidAllowableValues();
        if (!is_null($this->container['iossDutiesPaid']) && !in_array($this->container['iossDutiesPaid'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'iossDutiesPaid', must be one of '%s'",
                $this->container['iossDutiesPaid'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets productCode
     *
     * @return string
     */
    public function getProductCode()
    {
        return $this->container['productCode'];
    }

    /**
     * Sets productCode
     *
     * @param string $productCode Product code.
     *
     * @return self
     */
    public function setProductCode($productCode)
    {
        $this->container['productCode'] = $productCode;

        return $this;
    }

    /**
     * Gets countryCode
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['countryCode'];
    }

    /**
     * Sets countryCode
     *
     * @param string $countryCode ISO 2 character country code.
     *
     * @return self
     */
    public function setCountryCode($countryCode)
    {
        $this->container['countryCode'] = $countryCode;

        return $this;
    }

    /**
     * Gets effectiveFrom
     *
     * @return string|null
     */
    public function getEffectiveFrom()
    {
        return $this->container['effectiveFrom'];
    }

    /**
     * Sets effectiveFrom
     *
     * @param string|null $effectiveFrom Date and time this product country feature rule should apply from.
     *
     * @return self
     */
    public function setEffectiveFrom($effectiveFrom)
    {
        $this->container['effectiveFrom'] = $effectiveFrom;

        return $this;
    }

    /**
     * Gets effectiveTo
     *
     * @return string|null
     */
    public function getEffectiveTo()
    {
        return $this->container['effectiveTo'];
    }

    /**
     * Sets effectiveTo
     *
     * @param string|null $effectiveTo Date and time this product country feature rule should apply to.
     *
     * @return self
     */
    public function setEffectiveTo($effectiveTo)
    {
        $this->container['effectiveTo'] = $effectiveTo;

        return $this;
    }

    /**
     * Gets recipientType
     *
     * @return string
     */
    public function getRecipientType()
    {
        return $this->container['recipientType'];
    }

    /**
     * Sets recipientType
     *
     * @param string $recipientType Type of recipient being delivered to.
     *
     * @return self
     */
    public function setRecipientType($recipientType)
    {
        $allowedValues = $this->getRecipientTypeAllowableValues();
        if (!in_array($recipientType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'recipientType', must be one of '%s'",
                    $recipientType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['recipientType'] = $recipientType;

        return $this;
    }

    /**
     * Gets addressType
     *
     * @return string
     */
    public function getAddressType()
    {
        return $this->container['addressType'];
    }

    /**
     * Sets addressType
     *
     * @param string $addressType Type of address being delivered to.
     *
     * @return self
     */
    public function setAddressType($addressType)
    {
        $allowedValues = $this->getAddressTypeAllowableValues();
        if (!in_array($addressType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'addressType', must be one of '%s'",
                    $addressType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['addressType'] = $addressType;

        return $this;
    }

    /**
     * Gets locationType
     *
     * @return string|null
     */
    public function getLocationType()
    {
        return $this->container['locationType'];
    }

    /**
     * Sets locationType
     *
     * @param string|null $locationType If addressType is servicePoint then the type of service point this rule should apply to.
     *
     * @return self
     */
    public function setLocationType($locationType)
    {
        $allowedValues = $this->getLocationTypeAllowableValues();
        if (!is_null($locationType) && !in_array($locationType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'locationType', must be one of '%s'",
                    $locationType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['locationType'] = $locationType;

        return $this;
    }

    /**
     * Gets transitTimeDescription
     *
     * @return string|null
     */
    public function getTransitTimeDescription()
    {
        return $this->container['transitTimeDescription'];
    }

    /**
     * Sets transitTimeDescription
     *
     * @param string|null $transitTimeDescription Description of the estimated transit time when this product, country, recipientType, addressType and locationType are selected.
     *
     * @return self
     */
    public function setTransitTimeDescription($transitTimeDescription)
    {
        $this->container['transitTimeDescription'] = $transitTimeDescription;

        return $this;
    }

    /**
     * Gets minTransitTime
     *
     * @return float|null
     */
    public function getMinTransitTime()
    {
        return $this->container['minTransitTime'];
    }

    /**
     * Sets minTransitTime
     *
     * @param float|null $minTransitTime Estimated minimum number of days transit time when this product, country, recipientType, addressType and locationType are selected.
     *
     * @return self
     */
    public function setMinTransitTime($minTransitTime)
    {
        $this->container['minTransitTime'] = $minTransitTime;

        return $this;
    }

    /**
     * Gets maxTransitTime
     *
     * @return float|null
     */
    public function getMaxTransitTime()
    {
        return $this->container['maxTransitTime'];
    }

    /**
     * Sets maxTransitTime
     *
     * @param float|null $maxTransitTime Estimated maximum number of days transit time when this product, country, recipientType, addressType and locationType are selected.
     *
     * @return self
     */
    public function setMaxTransitTime($maxTransitTime)
    {
        $this->container['maxTransitTime'] = $maxTransitTime;

        return $this;
    }

    /**
     * Gets customsLevel
     *
     * @return string|null
     */
    public function getCustomsLevel()
    {
        return $this->container['customsLevel'];
    }

    /**
     * Sets customsLevel
     *
     * @param string|null $customsLevel What level of customs information is needed when this product , country, recipientType, addressType and locationType are selected.
     *
     * @return self
     */
    public function setCustomsLevel($customsLevel)
    {
        $allowedValues = $this->getCustomsLevelAllowableValues();
        if (!is_null($customsLevel) && !in_array($customsLevel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'customsLevel', must be one of '%s'",
                    $customsLevel,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['customsLevel'] = $customsLevel;

        return $this;
    }

    /**
     * Gets standardParcels
     *
     * @return bool|null
     */
    public function getStandardParcels()
    {
        return $this->container['standardParcels'];
    }

    /**
     * Sets standardParcels
     *
     * @param bool|null $standardParcels Are standard non bulky parcels accepted for this product country feature rule?
     *
     * @return self
     */
    public function setStandardParcels($standardParcels)
    {
        $this->container['standardParcels'] = $standardParcels;

        return $this;
    }

    /**
     * Gets bulkyParcels
     *
     * @return bool|null
     */
    public function getBulkyParcels()
    {
        return $this->container['bulkyParcels'];
    }

    /**
     * Sets bulkyParcels
     *
     * @param bool|null $bulkyParcels Are bulky parcels accepted for this product country feature rule?
     *
     * @return self
     */
    public function setBulkyParcels($bulkyParcels)
    {
        $this->container['bulkyParcels'] = $bulkyParcels;

        return $this;
    }

    /**
     * Gets standardDims
     *
     * @return bool|null
     */
    public function getStandardDims()
    {
        return $this->container['standardDims'];
    }

    /**
     * Sets standardDims
     *
     * @param bool|null $standardDims Are standard product dimensions used for this product country feature rule?
     *
     * @return self
     */
    public function setStandardDims($standardDims)
    {
        $this->container['standardDims'] = $standardDims;

        return $this;
    }

    /**
     * Gets maximumParcels
     *
     * @return float|null
     */
    public function getMaximumParcels()
    {
        return $this->container['maximumParcels'];
    }

    /**
     * Sets maximumParcels
     *
     * @param float|null $maximumParcels Maximum number of parcels per shipment when using this product country feature rule.
     *
     * @return self
     */
    public function setMaximumParcels($maximumParcels)
    {
        $this->container['maximumParcels'] = $maximumParcels;

        return $this;
    }

    /**
     * Gets maximumLength
     *
     * @return float|null
     */
    public function getMaximumLength()
    {
        return $this->container['maximumLength'];
    }

    /**
     * Sets maximumLength
     *
     * @param float|null $maximumLength Maximum parcel length when using this product country feature rule. If null then no limit applies.
     *
     * @return self
     */
    public function setMaximumLength($maximumLength)
    {
        $this->container['maximumLength'] = $maximumLength;

        return $this;
    }

    /**
     * Gets maximumWidth
     *
     * @return float|null
     */
    public function getMaximumWidth()
    {
        return $this->container['maximumWidth'];
    }

    /**
     * Sets maximumWidth
     *
     * @param float|null $maximumWidth Maximum parcel width when using this product country feature rule. If null then no limit applies.
     *
     * @return self
     */
    public function setMaximumWidth($maximumWidth)
    {
        $this->container['maximumWidth'] = $maximumWidth;

        return $this;
    }

    /**
     * Gets maximumHeight
     *
     * @return float|null
     */
    public function getMaximumHeight()
    {
        return $this->container['maximumHeight'];
    }

    /**
     * Sets maximumHeight
     *
     * @param float|null $maximumHeight Maximum parcel height when using this product country feature rule. If null then no limit applies.
     *
     * @return self
     */
    public function setMaximumHeight($maximumHeight)
    {
        $this->container['maximumHeight'] = $maximumHeight;

        return $this;
    }

    /**
     * Gets maximumGirth
     *
     * @return float|null
     */
    public function getMaximumGirth()
    {
        return $this->container['maximumGirth'];
    }

    /**
     * Sets maximumGirth
     *
     * @param float|null $maximumGirth Maximum parcel girth when using this product country feature rule. If null then no limit applies.
     *
     * @return self
     */
    public function setMaximumGirth($maximumGirth)
    {
        $this->container['maximumGirth'] = $maximumGirth;

        return $this;
    }

    /**
     * Gets maximumWeight
     *
     * @return float|null
     */
    public function getMaximumWeight()
    {
        return $this->container['maximumWeight'];
    }

    /**
     * Sets maximumWeight
     *
     * @param float|null $maximumWeight Maximum weight per shipment when using this product country feature rule.
     *
     * @return self
     */
    public function setMaximumWeight($maximumWeight)
    {
        $this->container['maximumWeight'] = $maximumWeight;

        return $this;
    }

    /**
     * Gets maximumDiameter
     *
     * @return float|null
     */
    public function getMaximumDiameter()
    {
        return $this->container['maximumDiameter'];
    }

    /**
     * Sets maximumDiameter
     *
     * @param float|null $maximumDiameter Maximum parcel diameter when using this product country feature rule. If null then no limit applies.
     *
     * @return self
     */
    public function setMaximumDiameter($maximumDiameter)
    {
        $this->container['maximumDiameter'] = $maximumDiameter;

        return $this;
    }

    /**
     * Gets maximumLengthGirth
     *
     * @return float|null
     */
    public function getMaximumLengthGirth()
    {
        return $this->container['maximumLengthGirth'];
    }

    /**
     * Sets maximumLengthGirth
     *
     * @param float|null $maximumLengthGirth Maximum parcel length girth when using this product country feature rule. If null then no limit applies.
     *
     * @return self
     */
    public function setMaximumLengthGirth($maximumLengthGirth)
    {
        $this->container['maximumLengthGirth'] = $maximumLengthGirth;

        return $this;
    }

    /**
     * Gets minimumLength
     *
     * @return float|null
     */
    public function getMinimumLength()
    {
        return $this->container['minimumLength'];
    }

    /**
     * Sets minimumLength
     *
     * @param float|null $minimumLength Minimum parcel length when using this product country feature rule. If null then no limit applies.
     *
     * @return self
     */
    public function setMinimumLength($minimumLength)
    {
        $this->container['minimumLength'] = $minimumLength;

        return $this;
    }

    /**
     * Gets minimumWidth
     *
     * @return float|null
     */
    public function getMinimumWidth()
    {
        return $this->container['minimumWidth'];
    }

    /**
     * Sets minimumWidth
     *
     * @param float|null $minimumWidth Minimum parcel width when using this product country feature rule. If null then no limit applies.
     *
     * @return self
     */
    public function setMinimumWidth($minimumWidth)
    {
        $this->container['minimumWidth'] = $minimumWidth;

        return $this;
    }

    /**
     * Gets minimumHeight
     *
     * @return float|null
     */
    public function getMinimumHeight()
    {
        return $this->container['minimumHeight'];
    }

    /**
     * Sets minimumHeight
     *
     * @param float|null $minimumHeight Minimum parcel height when using this product country feature rule. If null then no limit applies.
     *
     * @return self
     */
    public function setMinimumHeight($minimumHeight)
    {
        $this->container['minimumHeight'] = $minimumHeight;

        return $this;
    }

    /**
     * Gets minimumWeight
     *
     * @return float|null
     */
    public function getMinimumWeight()
    {
        return $this->container['minimumWeight'];
    }

    /**
     * Sets minimumWeight
     *
     * @param float|null $minimumWeight Minimum weight per shipment when using this product country feature rule.
     *
     * @return self
     */
    public function setMinimumWeight($minimumWeight)
    {
        $this->container['minimumWeight'] = $minimumWeight;

        return $this;
    }

    /**
     * Gets bulkyLength
     *
     * @return float|null
     */
    public function getBulkyLength()
    {
        return $this->container['bulkyLength'];
    }

    /**
     * Sets bulkyLength
     *
     * @param float|null $bulkyLength When length of any parcel in shipment is greater than or equal to this value then shipment will be classified as bulky. If null then no bulky limit applies when using this product country feature rule.
     *
     * @return self
     */
    public function setBulkyLength($bulkyLength)
    {
        $this->container['bulkyLength'] = $bulkyLength;

        return $this;
    }

    /**
     * Gets bulkyWidth
     *
     * @return float|null
     */
    public function getBulkyWidth()
    {
        return $this->container['bulkyWidth'];
    }

    /**
     * Sets bulkyWidth
     *
     * @param float|null $bulkyWidth When width of any parcel in shipment is greater than or equal to this value then shipment will be classified as bulky. If null then no bulky limit applies when using this product country feature rule.
     *
     * @return self
     */
    public function setBulkyWidth($bulkyWidth)
    {
        $this->container['bulkyWidth'] = $bulkyWidth;

        return $this;
    }

    /**
     * Gets bulkyHeight
     *
     * @return float|null
     */
    public function getBulkyHeight()
    {
        return $this->container['bulkyHeight'];
    }

    /**
     * Sets bulkyHeight
     *
     * @param float|null $bulkyHeight When height of any parcel in shipment is greater than or equal to this value then shipment will be classified as bulky. If null then no bulky limit applies when using this product country feature rule.
     *
     * @return self
     */
    public function setBulkyHeight($bulkyHeight)
    {
        $this->container['bulkyHeight'] = $bulkyHeight;

        return $this;
    }

    /**
     * Gets bulkyGirth
     *
     * @return float|null
     */
    public function getBulkyGirth()
    {
        return $this->container['bulkyGirth'];
    }

    /**
     * Sets bulkyGirth
     *
     * @param float|null $bulkyGirth When girth of any parcel in shipment is greater than or equal to this value then shipment will be classified as bulky. If null then no bulky limit applies when using this product country feature rule.
     *
     * @return self
     */
    public function setBulkyGirth($bulkyGirth)
    {
        $this->container['bulkyGirth'] = $bulkyGirth;

        return $this;
    }

    /**
     * Gets bulkyWeight
     *
     * @return float|null
     */
    public function getBulkyWeight()
    {
        return $this->container['bulkyWeight'];
    }

    /**
     * Sets bulkyWeight
     *
     * @param float|null $bulkyWeight When weight of any parcel in shipment is greater than or equal to this value then shipment will be classified as bulky. If null then no bulky limit applies when using this product country feature rule.
     *
     * @return self
     */
    public function setBulkyWeight($bulkyWeight)
    {
        $this->container['bulkyWeight'] = $bulkyWeight;

        return $this;
    }

    /**
     * Gets bulkyDiameter
     *
     * @return float|null
     */
    public function getBulkyDiameter()
    {
        return $this->container['bulkyDiameter'];
    }

    /**
     * Sets bulkyDiameter
     *
     * @param float|null $bulkyDiameter When diameter of any parcel in shipment is greater than or equal to this value then shipment will be classified as bulky. If null then no bulky limit applies when using this product country feature rule.
     *
     * @return self
     */
    public function setBulkyDiameter($bulkyDiameter)
    {
        $this->container['bulkyDiameter'] = $bulkyDiameter;

        return $this;
    }

    /**
     * Gets postnummerRequired
     *
     * @return bool|null
     */
    public function getPostnummerRequired()
    {
        return $this->container['postnummerRequired'];
    }

    /**
     * Sets postnummerRequired
     *
     * @param bool|null $postnummerRequired Is a recipient postnummer type idNumber required when using this product country feature rule?
     *
     * @return self
     */
    public function setPostnummerRequired($postnummerRequired)
    {
        $this->container['postnummerRequired'] = $postnummerRequired;

        return $this;
    }

    /**
     * Gets labelPersonalData
     *
     * @return bool|null
     */
    public function getLabelPersonalData()
    {
        return $this->container['labelPersonalData'];
    }

    /**
     * Sets labelPersonalData
     *
     * @param bool|null $labelPersonalData If true then personal data such as phone number and email can be included when the label is generated. If false then no personal data should be included on the label when generated for this product, country, recipientType, addressType and locationType.
     *
     * @return self
     */
    public function setLabelPersonalData($labelPersonalData)
    {
        $this->container['labelPersonalData'] = $labelPersonalData;

        return $this;
    }

    /**
     * Gets returns
     *
     * @return bool|null
     */
    public function getReturns()
    {
        return $this->container['returns'];
    }

    /**
     * Sets returns
     *
     * @param bool|null $returns If true then inbox returns is available for this product, country, recipientType, addressType and locationType combination.
     *
     * @return self
     */
    public function setReturns($returns)
    {
        $this->container['returns'] = $returns;

        return $this;
    }

    /**
     * Gets dutiesPaid
     *
     * @return string|null
     */
    public function getDutiesPaid()
    {
        return $this->container['dutiesPaid'];
    }

    /**
     * Sets dutiesPaid
     *
     * @param string|null $dutiesPaid *** SOON TO BE DEPRECATED, USE dutiesPaidList INSTEAD. *** Optional parameter to indicate which type of dutiesPaid MUST be used with this product for a customs declaration using the Shipping label API. DDP (Delivered Duties Paid), DAP (Delivered at Place).
     *
     * @return self
     */
    public function setDutiesPaid($dutiesPaid)
    {
        $allowedValues = $this->getDutiesPaidAllowableValues();
        if (!is_null($dutiesPaid) && !in_array($dutiesPaid, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dutiesPaid', must be one of '%s'",
                    $dutiesPaid,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dutiesPaid'] = $dutiesPaid;

        return $this;
    }

    /**
     * Gets exportExcludePostcodesBeginWith
     *
     * @return string[]|null
     */
    public function getExportExcludePostcodesBeginWith()
    {
        return $this->container['exportExcludePostcodesBeginWith'];
    }

    /**
     * Sets exportExcludePostcodesBeginWith
     *
     * @param string[]|null $exportExcludePostcodesBeginWith Beginning of postcodes in country where product should be excluded for exports from UK.
     *
     * @return self
     */
    public function setExportExcludePostcodesBeginWith($exportExcludePostcodesBeginWith)
    {
        $this->container['exportExcludePostcodesBeginWith'] = $exportExcludePostcodesBeginWith;

        return $this;
    }

    /**
     * Gets importExcludePostcodesBeginWith
     *
     * @return string[]|null
     */
    public function getImportExcludePostcodesBeginWith()
    {
        return $this->container['importExcludePostcodesBeginWith'];
    }

    /**
     * Sets importExcludePostcodesBeginWith
     *
     * @param string[]|null $importExcludePostcodesBeginWith Beginning of postcodes in UK where product should be excluded for imports.
     *
     * @return self
     */
    public function setImportExcludePostcodesBeginWith($importExcludePostcodesBeginWith)
    {
        $this->container['importExcludePostcodesBeginWith'] = $importExcludePostcodesBeginWith;

        return $this;
    }

    /**
     * Gets deliveryGateway
     *
     * @return string[]|null
     */
    public function getDeliveryGateway()
    {
        return $this->container['deliveryGateway'];
    }

    /**
     * Sets deliveryGateway
     *
     * @param string[]|null $deliveryGateway List of delivery gateway's a shipment may be routed through. This feild is deprecated. Please refer transitGateway to get the list of list of transit gateway's a shipment may be routed through.
     *
     * @return self
     */
    public function setDeliveryGateway($deliveryGateway)
    {
        $this->container['deliveryGateway'] = $deliveryGateway;

        return $this;
    }

    /**
     * Gets barcodeRoutingDateCode
     *
     * @return string|null
     */
    public function getBarcodeRoutingDateCode()
    {
        return $this->container['barcodeRoutingDateCode'];
    }

    /**
     * Sets barcodeRoutingDateCode
     *
     * @param string|null $barcodeRoutingDateCode When this country and address type are used for a label, then when the contents of the routing barcode are generated use this value to encode into the Date field with the MH10 routing barcode.
     *
     * @return self
     */
    public function setBarcodeRoutingDateCode($barcodeRoutingDateCode)
    {
        $this->container['barcodeRoutingDateCode'] = $barcodeRoutingDateCode;

        return $this;
    }

    /**
     * Gets customsLevelOverrides
     *
     * @return \DHLUK\Model\CustomsLevelOverride[]|null
     */
    public function getCustomsLevelOverrides()
    {
        return $this->container['customsLevelOverrides'];
    }

    /**
     * Sets customsLevelOverrides
     *
     * @param \DHLUK\Model\CustomsLevelOverride[]|null $customsLevelOverrides List of optional customs level overrides that should apply dependant on sender and consignee postcode
     *
     * @return self
     */
    public function setCustomsLevelOverrides($customsLevelOverrides)
    {
        $this->container['customsLevelOverrides'] = $customsLevelOverrides;

        return $this;
    }

    /**
     * Gets iossApplies
     *
     * @return bool|null
     */
    public function getIossApplies()
    {
        return $this->container['iossApplies'];
    }

    /**
     * Sets iossApplies
     *
     * @param bool|null $iossApplies Do IOSS VAT rules apply when this product country feature rule applies?
     *
     * @return self
     */
    public function setIossApplies($iossApplies)
    {
        $this->container['iossApplies'] = $iossApplies;

        return $this;
    }

    /**
     * Gets iossValueLimits
     *
     * @return \DHLUK\Model\IossValueLimit[]|null
     */
    public function getIossValueLimits()
    {
        return $this->container['iossValueLimits'];
    }

    /**
     * Sets iossValueLimits
     *
     * @param \DHLUK\Model\IossValueLimit[]|null $iossValueLimits List of optional ioss value limits when iossApplies.
     *
     * @return self
     */
    public function setIossValueLimits($iossValueLimits)
    {
        $this->container['iossValueLimits'] = $iossValueLimits;

        return $this;
    }

    /**
     * Gets productAllowedIfIossLimitExceeded
     *
     * @return bool|null
     */
    public function getProductAllowedIfIossLimitExceeded()
    {
        return $this->container['productAllowedIfIossLimitExceeded'];
    }

    /**
     * Sets productAllowedIfIossLimitExceeded
     *
     * @param bool|null $productAllowedIfIossLimitExceeded Allow this product when total value exceeds the matching ioss value limit? Also if total value is below the ioss value limit then duties paid should override with the value of iossDutiesPaid. If total value is above the ioss value limit then do not override the duties paid.
     *
     * @return self
     */
    public function setProductAllowedIfIossLimitExceeded($productAllowedIfIossLimitExceeded)
    {
        $this->container['productAllowedIfIossLimitExceeded'] = $productAllowedIfIossLimitExceeded;

        return $this;
    }

    /**
     * Gets iossDutiesPaid
     *
     * @return string|null
     */
    public function getIossDutiesPaid()
    {
        return $this->container['iossDutiesPaid'];
    }

    /**
     * Sets iossDutiesPaid
     *
     * @param string|null $iossDutiesPaid Optional parameter to indicate which type of dutiesPaid MUST be used if IOSS applies. DDP (Delivered Duties Paid), DAP (Delivered at Place).
     *
     * @return self
     */
    public function setIossDutiesPaid($iossDutiesPaid)
    {
        $allowedValues = $this->getIossDutiesPaidAllowableValues();
        if (!is_null($iossDutiesPaid) && !in_array($iossDutiesPaid, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'iossDutiesPaid', must be one of '%s'",
                    $iossDutiesPaid,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['iossDutiesPaid'] = $iossDutiesPaid;

        return $this;
    }

    /**
     * Gets nonIossAllowed
     *
     * @return bool|null
     */
    public function getNonIossAllowed()
    {
        return $this->container['nonIossAllowed'];
    }

    /**
     * Sets nonIossAllowed
     *
     * @param bool|null $nonIossAllowed This product country feature can still be used under standard terms without using IOSS and having to supply an IOSS number.
     *
     * @return self
     */
    public function setNonIossAllowed($nonIossAllowed)
    {
        $this->container['nonIossAllowed'] = $nonIossAllowed;

        return $this;
    }

    /**
     * Gets maximumWeightPerParcel
     *
     * @return float|null
     */
    public function getMaximumWeightPerParcel()
    {
        return $this->container['maximumWeightPerParcel'];
    }

    /**
     * Sets maximumWeightPerParcel
     *
     * @param float|null $maximumWeightPerParcel Maximum weight or average wight per parcel when using this product country feature rule.
     *
     * @return self
     */
    public function setMaximumWeightPerParcel($maximumWeightPerParcel)
    {
        $this->container['maximumWeightPerParcel'] = $maximumWeightPerParcel;

        return $this;
    }

    /**
     * Gets maximumPallets
     *
     * @return float|null
     */
    public function getMaximumPallets()
    {
        return $this->container['maximumPallets'];
    }

    /**
     * Sets maximumPallets
     *
     * @param float|null $maximumPallets Maximum number of pallets when using this product country feature rule.
     *
     * @return self
     */
    public function setMaximumPallets($maximumPallets)
    {
        $this->container['maximumPallets'] = $maximumPallets;

        return $this;
    }

    /**
     * Gets dutiesPaidList
     *
     * @return string[]|null
     */
    public function getDutiesPaidList()
    {
        return $this->container['dutiesPaidList'];
    }

    /**
     * Sets dutiesPaidList
     *
     * @param string[]|null $dutiesPaidList Optional list of dutiesPaid values for a customs declaration that are allowed when using this product country feature rule. If defined one of these values MUST be used when creating a new shipment via the Shipping label API. Possible values in the list are DDP (Delivered Duties Paid), DAP (Delivered at Place).
     *
     * @return self
     */
    public function setDutiesPaidList($dutiesPaidList)
    {
        $allowedValues = $this->getDutiesPaidListAllowableValues();
        if (!is_null($dutiesPaidList) && array_diff($dutiesPaidList, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'dutiesPaidList', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dutiesPaidList'] = $dutiesPaidList;

        return $this;
    }

    /**
     * Gets limitedReasonForExportList
     *
     * @return \DHLUK\Model\ReasonForExport[]|null
     */
    public function getLimitedReasonForExportList()
    {
        return $this->container['limitedReasonForExportList'];
    }

    /**
     * Sets limitedReasonForExportList
     *
     * @param \DHLUK\Model\ReasonForExport[]|null $limitedReasonForExportList Limited list of valid reasons for export for this product and country feature.
     *
     * @return self
     */
    public function setLimitedReasonForExportList($limitedReasonForExportList)
    {
        $this->container['limitedReasonForExportList'] = $limitedReasonForExportList;

        return $this;
    }

    /**
     * Gets fullReasonForExportList
     *
     * @return \DHLUK\Model\ReasonForExport[]|null
     */
    public function getFullReasonForExportList()
    {
        return $this->container['fullReasonForExportList'];
    }

    /**
     * Sets fullReasonForExportList
     *
     * @param \DHLUK\Model\ReasonForExport[]|null $fullReasonForExportList Full list of valid reasons for export for this product and country feature.
     *
     * @return self
     */
    public function setFullReasonForExportList($fullReasonForExportList)
    {
        $this->container['fullReasonForExportList'] = $fullReasonForExportList;

        return $this;
    }

    /**
     * Gets serviceProviderCodes
     *
     * @return string[]|null
     */
    public function getServiceProviderCodes()
    {
        return $this->container['serviceProviderCodes'];
    }

    /**
     * Sets serviceProviderCodes
     *
     * @param string[]|null $serviceProviderCodes List of Sevice Providers for DHL eCommerce UK Product.
     *
     * @return self
     */
    public function setServiceProviderCodes($serviceProviderCodes)
    {
        $this->container['serviceProviderCodes'] = $serviceProviderCodes;

        return $this;
    }

    /**
     * Gets serviceProviderProductCode
     *
     * @return string|null
     */
    public function getServiceProviderProductCode()
    {
        return $this->container['serviceProviderProductCode'];
    }

    /**
     * Sets serviceProviderProductCode
     *
     * @param string|null $serviceProviderProductCode Service Provider Product code used for DHL eCommerce UK Product.
     *
     * @return self
     */
    public function setServiceProviderProductCode($serviceProviderProductCode)
    {
        $this->container['serviceProviderProductCode'] = $serviceProviderProductCode;

        return $this;
    }

    /**
     * Gets transitGateways
     *
     * @return string[]|null
     */
    public function getTransitGateways()
    {
        return $this->container['transitGateways'];
    }

    /**
     * Sets transitGateways
     *
     * @param string[]|null $transitGateways List of transit gateway's a shipment may be routed through.
     *
     * @return self
     */
    public function setTransitGateways($transitGateways)
    {
        $this->container['transitGateways'] = $transitGateways;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


