<?php
/**
 * PostRequestFormatPieces
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  DHLUK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL eCommerce UK API
 *
 * The DHL eCommerce UK API allows customers and partners to:  - Get available products based on delivery address and parcel size.  - Find servicepoints in the UK or worldwide.  - Create new shipments and optionally return labels.  - Get shipment customs documents.  - Request shipment cancellation.  - Request shipment amendment.  - Regenerate labels ready for reprinting.  - Get details of customer trading locations.  - Request a driver pickup from a customer trading location.  - Get information about driver pickups already requested.  - Track shipments.  - Get DHL eCommerce UK reference data to help you provide valid shipment data from your applications.  - Add a What 3 Words to a domestic shipment.  - Find a DHL Parcels Depot.   **`API Authentications:`** All API operations require an access token to be passed in the Authorization Header for each request. The token type is an OAuth 2.0 Bearer token. To get the token you have to call the Authentication operation of this API and provide **client_id** and **client_secret**. The Access Token is valid for defined amount of time so it is not necessary to request the token for each request. Developers should implement the client application in a way that the token will be requested again only after it expires.  **`Access Token Lifecycle:`** When you receive an Access Token, it is valid for 60 minutes. During this time, you don't have to request new token per each request, but you can simply reuse the same token to access API resources, until the token expires. The invalid token or token expiration will be indicated by HTTP Status Code 401 Unauthorized, then your application has to request new Access Token.    **Recommended sequence for creating a shipment with the Shipping Label API is as follows:**        1.  Use client_id and client_secret to authenticate and obtain an access token using /auth/v1/accesstoken (see details below). A client_id and client_secret can be obtained by registering on the DHL developer portal and then registering an app in the user dashboard.   2.  Prepare valid JSON request as per Shipping Label API POST request schema (see examples below). Use data above depending on your use-case.   3.  Send an API request the correct API endpoint for test/UAT or live/production:          test: https://api-uat.dhl.com/parceluk/shipping/v1/label              live: https://api.dhl.com/parceluk/shipping/v1/label          If the shipment request is valid and accepted then a new shipmentId and optionally labels will be returned in the response.  **Sample Pickup Accounts And Product codes:**    To test using the Shipping Label API, you may use the following accounts and additional settings.        UK Domestic Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F020579  | DHL eCommerce UK domestic labels   orderedProduct            | 220      | Signature At Address Only - Next Day    International Road Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F820579  | DHL eCommerce UK Parcel Connect labels   orderedProduct             | 206      | Parcel Connect               International Air Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F520579 | DHL eCommerce UK International Labels   orderedProduct             | 101     | Worldwide Air
 *
 * The version of the OpenAPI document: 1.3.8
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DHLUK\Model;

use \ArrayAccess;
use \DHLUK\ObjectSerializer;

/**
 * PostRequestFormatPieces Class Doc Comment
 *
 * @category Class
 * @package  DHLUK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class PostRequestFormatPieces implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PostRequestFormat_pieces';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pieceId' => 'string',
        'pieceRefId' => 'string',
        'declaredValue' => 'float',
        'weight' => 'float',
        'length' => 'float',
        'width' => 'float',
        'height' => 'float',
        'diameter' => 'float',
        'customsDetails' => '\DHLUK\Model\PostRequestFormatCustomsDetails[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pieceId' => null,
        'pieceRefId' => null,
        'declaredValue' => null,
        'weight' => null,
        'length' => null,
        'width' => null,
        'height' => null,
        'diameter' => null,
        'customsDetails' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pieceId' => 'pieceId',
        'pieceRefId' => 'pieceRefId',
        'declaredValue' => 'declaredValue',
        'weight' => 'weight',
        'length' => 'length',
        'width' => 'width',
        'height' => 'height',
        'diameter' => 'diameter',
        'customsDetails' => 'customsDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pieceId' => 'setPieceId',
        'pieceRefId' => 'setPieceRefId',
        'declaredValue' => 'setDeclaredValue',
        'weight' => 'setWeight',
        'length' => 'setLength',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'diameter' => 'setDiameter',
        'customsDetails' => 'setCustomsDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pieceId' => 'getPieceId',
        'pieceRefId' => 'getPieceRefId',
        'declaredValue' => 'getDeclaredValue',
        'weight' => 'getWeight',
        'length' => 'getLength',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'diameter' => 'getDiameter',
        'customsDetails' => 'getCustomsDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['pieceId'] = $data['pieceId'] ?? null;
        $this->container['pieceRefId'] = $data['pieceRefId'] ?? null;
        $this->container['declaredValue'] = $data['declaredValue'] ?? null;
        $this->container['weight'] = $data['weight'] ?? null;
        $this->container['length'] = $data['length'] ?? null;
        $this->container['width'] = $data['width'] ?? null;
        $this->container['height'] = $data['height'] ?? null;
        $this->container['diameter'] = $data['diameter'] ?? null;
        $this->container['customsDetails'] = $data['customsDetails'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['pieceId']) && (mb_strlen($this->container['pieceId']) > 43)) {
            $invalidProperties[] = "invalid value for 'pieceId', the character length must be smaller than or equal to 43.";
        }

        if (!is_null($this->container['pieceId']) && (mb_strlen($this->container['pieceId']) < 1)) {
            $invalidProperties[] = "invalid value for 'pieceId', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['pieceRefId']) && (mb_strlen($this->container['pieceRefId']) > 40)) {
            $invalidProperties[] = "invalid value for 'pieceRefId', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['pieceRefId']) && (mb_strlen($this->container['pieceRefId']) < 1)) {
            $invalidProperties[] = "invalid value for 'pieceRefId', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['declaredValue']) && ($this->container['declaredValue'] >= 999999.99)) {
            $invalidProperties[] = "invalid value for 'declaredValue', must be smaller than 999999.99.";
        }

        if (!is_null($this->container['declaredValue']) && ($this->container['declaredValue'] <= 0)) {
            $invalidProperties[] = "invalid value for 'declaredValue', must be bigger than 0.";
        }

        if (!is_null($this->container['weight']) && ($this->container['weight'] >= 1000000)) {
            $invalidProperties[] = "invalid value for 'weight', must be smaller than 1000000.";
        }

        if (!is_null($this->container['weight']) && ($this->container['weight'] <= 0.01)) {
            $invalidProperties[] = "invalid value for 'weight', must be bigger than 0.01.";
        }

        if (!is_null($this->container['length']) && ($this->container['length'] >= 1000000000)) {
            $invalidProperties[] = "invalid value for 'length', must be smaller than 1000000000.";
        }

        if (!is_null($this->container['length']) && ($this->container['length'] <= 0)) {
            $invalidProperties[] = "invalid value for 'length', must be bigger than 0.";
        }

        if (!is_null($this->container['width']) && ($this->container['width'] >= 1000000000)) {
            $invalidProperties[] = "invalid value for 'width', must be smaller than 1000000000.";
        }

        if (!is_null($this->container['width']) && ($this->container['width'] <= 0)) {
            $invalidProperties[] = "invalid value for 'width', must be bigger than 0.";
        }

        if (!is_null($this->container['height']) && ($this->container['height'] >= 1000000000)) {
            $invalidProperties[] = "invalid value for 'height', must be smaller than 1000000000.";
        }

        if (!is_null($this->container['height']) && ($this->container['height'] <= 0)) {
            $invalidProperties[] = "invalid value for 'height', must be bigger than 0.";
        }

        if (!is_null($this->container['diameter']) && ($this->container['diameter'] >= 1000000000)) {
            $invalidProperties[] = "invalid value for 'diameter', must be smaller than 1000000000.";
        }

        if (!is_null($this->container['diameter']) && ($this->container['diameter'] <= 0)) {
            $invalidProperties[] = "invalid value for 'diameter', must be bigger than 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pieceId
     *
     * @return string|null
     */
    public function getPieceId()
    {
        return $this->container['pieceId'];
    }

    /**
     * Sets pieceId
     *
     * @param string|null $pieceId Follows pattern shipmentId-sequence_number (For example JJD49055313895700000010001  for the first piece/parcel if  shipmentId was JJD49055313895700000010). Used to track that piece aka physical parcel. This is  automatically generated by the API and cannot be overwritten by clients.
     *
     * @return self
     */
    public function setPieceId($pieceId)
    {
        if (!is_null($pieceId) && (mb_strlen($pieceId) > 43)) {
            throw new \InvalidArgumentException('invalid length for $pieceId when calling PostRequestFormatPieces., must be smaller than or equal to 43.');
        }
        if (!is_null($pieceId) && (mb_strlen($pieceId) < 1)) {
            throw new \InvalidArgumentException('invalid length for $pieceId when calling PostRequestFormatPieces., must be bigger than or equal to 1.');
        }

        $this->container['pieceId'] = $pieceId;

        return $this;
    }

    /**
     * Gets pieceRefId
     *
     * @return string|null
     */
    public function getPieceRefId()
    {
        return $this->container['pieceRefId'];
    }

    /**
     * Sets pieceRefId
     *
     * @param string|null $pieceRefId Unique customer reference ID for piece; used for barcodes, by large customers
     *
     * @return self
     */
    public function setPieceRefId($pieceRefId)
    {
        if (!is_null($pieceRefId) && (mb_strlen($pieceRefId) > 40)) {
            throw new \InvalidArgumentException('invalid length for $pieceRefId when calling PostRequestFormatPieces., must be smaller than or equal to 40.');
        }
        if (!is_null($pieceRefId) && (mb_strlen($pieceRefId) < 1)) {
            throw new \InvalidArgumentException('invalid length for $pieceRefId when calling PostRequestFormatPieces., must be bigger than or equal to 1.');
        }

        $this->container['pieceRefId'] = $pieceRefId;

        return $this;
    }

    /**
     * Gets declaredValue
     *
     * @return float|null
     */
    public function getDeclaredValue()
    {
        return $this->container['declaredValue'];
    }

    /**
     * Sets declaredValue
     *
     * @param float|null $declaredValue Declared value for the piece. Mandatory if delivery outside United Kingdom. Don't Use Declared value at Piece level rather use total declared value at shipment level.
     *
     * @return self
     */
    public function setDeclaredValue($declaredValue)
    {

        if (!is_null($declaredValue) && ($declaredValue >= 999999.99)) {
            throw new \InvalidArgumentException('invalid value for $declaredValue when calling PostRequestFormatPieces., must be smaller than 999999.99.');
        }
        if (!is_null($declaredValue) && ($declaredValue <= 0)) {
            throw new \InvalidArgumentException('invalid value for $declaredValue when calling PostRequestFormatPieces., must be bigger than 0.');
        }

        $this->container['declaredValue'] = $declaredValue;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return float|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param float|null $weight Piece weight in kilograms to two decimal places
     *
     * @return self
     */
    public function setWeight($weight)
    {

        if (!is_null($weight) && ($weight >= 1000000)) {
            throw new \InvalidArgumentException('invalid value for $weight when calling PostRequestFormatPieces., must be smaller than 1000000.');
        }
        if (!is_null($weight) && ($weight <= 0.01)) {
            throw new \InvalidArgumentException('invalid value for $weight when calling PostRequestFormatPieces., must be bigger than 0.01.');
        }

        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets length
     *
     * @return float|null
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param float|null $length Longest measurement of package in cm (provide if available). Mandatory if delivery outside United Kingdom.
     *
     * @return self
     */
    public function setLength($length)
    {

        if (!is_null($length) && ($length >= 1000000000)) {
            throw new \InvalidArgumentException('invalid value for $length when calling PostRequestFormatPieces., must be smaller than 1000000000.');
        }
        if (!is_null($length) && ($length <= 0)) {
            throw new \InvalidArgumentException('invalid value for $length when calling PostRequestFormatPieces., must be bigger than 0.');
        }

        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets width
     *
     * @return float|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param float|null $width Width dimension of the package in cm (provide if available). Mandatory if delivery outside United Kingdom.
     *
     * @return self
     */
    public function setWidth($width)
    {

        if (!is_null($width) && ($width >= 1000000000)) {
            throw new \InvalidArgumentException('invalid value for $width when calling PostRequestFormatPieces., must be smaller than 1000000000.');
        }
        if (!is_null($width) && ($width <= 0)) {
            throw new \InvalidArgumentException('invalid value for $width when calling PostRequestFormatPieces., must be bigger than 0.');
        }

        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return float|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param float|null $height Height dimension of the package in cm (provide if available). Mandatory if delivery outside United Kingdom.
     *
     * @return self
     */
    public function setHeight($height)
    {

        if (!is_null($height) && ($height >= 1000000000)) {
            throw new \InvalidArgumentException('invalid value for $height when calling PostRequestFormatPieces., must be smaller than 1000000000.');
        }
        if (!is_null($height) && ($height <= 0)) {
            throw new \InvalidArgumentException('invalid value for $height when calling PostRequestFormatPieces., must be bigger than 0.');
        }

        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets diameter
     *
     * @return float|null
     */
    public function getDiameter()
    {
        return $this->container['diameter'];
    }

    /**
     * Sets diameter
     *
     * @param float|null $diameter Diameter dimension of the package in cm (provide if available).
     *
     * @return self
     */
    public function setDiameter($diameter)
    {

        if (!is_null($diameter) && ($diameter >= 1000000000)) {
            throw new \InvalidArgumentException('invalid value for $diameter when calling PostRequestFormatPieces., must be smaller than 1000000000.');
        }
        if (!is_null($diameter) && ($diameter <= 0)) {
            throw new \InvalidArgumentException('invalid value for $diameter when calling PostRequestFormatPieces., must be bigger than 0.');
        }

        $this->container['diameter'] = $diameter;

        return $this;
    }

    /**
     * Gets customsDetails
     *
     * @return \DHLUK\Model\PostRequestFormatCustomsDetails[]|null
     */
    public function getCustomsDetails()
    {
        return $this->container['customsDetails'];
    }

    /**
     * Sets customsDetails
     *
     * @param \DHLUK\Model\PostRequestFormatCustomsDetails[]|null $customsDetails Customs details for all commodities contained in piece. Only applicable if orderedProduct is an International Product. Don't Use customs at Piece level rather use customs at shipment level.
     *
     * @return self
     */
    public function setCustomsDetails($customsDetails)
    {
        $this->container['customsDetails'] = $customsDetails;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


