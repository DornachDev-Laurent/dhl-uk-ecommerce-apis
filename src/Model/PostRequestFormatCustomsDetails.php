<?php
/**
 * PostRequestFormatCustomsDetails
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  DHLUK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL eCommerce UK API
 *
 * The DHL eCommerce UK API allows customers and partners to:  - Get available products based on delivery address and parcel size.  - Find servicepoints in the UK or worldwide.  - Create new shipments and optionally return labels.  - Get shipment customs documents.  - Request shipment cancellation.  - Request shipment amendment.  - Regenerate labels ready for reprinting.  - Get details of customer trading locations.  - Request a driver pickup from a customer trading location.  - Get information about driver pickups already requested.  - Track shipments.  - Get DHL eCommerce UK reference data to help you provide valid shipment data from your applications.  - Add a What 3 Words to a domestic shipment.  - Find a DHL Parcels Depot.   **`API Authentications:`** All API operations require an access token to be passed in the Authorization Header for each request. The token type is an OAuth 2.0 Bearer token. To get the token you have to call the Authentication operation of this API and provide **client_id** and **client_secret**. The Access Token is valid for defined amount of time so it is not necessary to request the token for each request. Developers should implement the client application in a way that the token will be requested again only after it expires.  **`Access Token Lifecycle:`** When you receive an Access Token, it is valid for 60 minutes. During this time, you don't have to request new token per each request, but you can simply reuse the same token to access API resources, until the token expires. The invalid token or token expiration will be indicated by HTTP Status Code 401 Unauthorized, then your application has to request new Access Token.    **Recommended sequence for creating a shipment with the Shipping Label API is as follows:**        1.  Use client_id and client_secret to authenticate and obtain an access token using /auth/v1/accesstoken (see details below). A client_id and client_secret can be obtained by registering on the DHL developer portal and then registering an app in the user dashboard.   2.  Prepare valid JSON request as per Shipping Label API POST request schema (see examples below). Use data above depending on your use-case.   3.  Send an API request the correct API endpoint for test/UAT or live/production:          test: https://api-uat.dhl.com/parceluk/shipping/v1/label              live: https://api.dhl.com/parceluk/shipping/v1/label          If the shipment request is valid and accepted then a new shipmentId and optionally labels will be returned in the response.  **Sample Pickup Accounts And Product codes:**    To test using the Shipping Label API, you may use the following accounts and additional settings.        UK Domestic Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F020579  | DHL eCommerce UK domestic labels   orderedProduct            | 220      | Signature At Address Only - Next Day    International Road Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F820579  | DHL eCommerce UK Parcel Connect labels   orderedProduct             | 206      | Parcel Connect               International Air Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F520579 | DHL eCommerce UK International Labels   orderedProduct             | 101     | Worldwide Air
 *
 * The version of the OpenAPI document: 1.3.8
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DHLUK\Model;

use \ArrayAccess;
use \DHLUK\ObjectSerializer;

/**
 * PostRequestFormatCustomsDetails Class Doc Comment
 *
 * @category Class
 * @package  DHLUK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class PostRequestFormatCustomsDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PostRequestFormat_customsDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'countryOfOrigin' => 'string',
        'descriptionExport' => 'string',
        'descriptionImport' => 'string',
        'hsCode' => 'string',
        'itemDescription' => 'string',
        'itemValue' => 'float',
        'packagedQuantity' => 'int',
        'skuNumber' => 'string',
        'itemWeight' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'countryOfOrigin' => null,
        'descriptionExport' => null,
        'descriptionImport' => null,
        'hsCode' => null,
        'itemDescription' => null,
        'itemValue' => null,
        'packagedQuantity' => null,
        'skuNumber' => null,
        'itemWeight' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'countryOfOrigin' => 'countryOfOrigin',
        'descriptionExport' => 'descriptionExport',
        'descriptionImport' => 'descriptionImport',
        'hsCode' => 'hsCode',
        'itemDescription' => 'itemDescription',
        'itemValue' => 'itemValue',
        'packagedQuantity' => 'packagedQuantity',
        'skuNumber' => 'skuNumber',
        'itemWeight' => 'itemWeight'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'countryOfOrigin' => 'setCountryOfOrigin',
        'descriptionExport' => 'setDescriptionExport',
        'descriptionImport' => 'setDescriptionImport',
        'hsCode' => 'setHsCode',
        'itemDescription' => 'setItemDescription',
        'itemValue' => 'setItemValue',
        'packagedQuantity' => 'setPackagedQuantity',
        'skuNumber' => 'setSkuNumber',
        'itemWeight' => 'setItemWeight'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'countryOfOrigin' => 'getCountryOfOrigin',
        'descriptionExport' => 'getDescriptionExport',
        'descriptionImport' => 'getDescriptionImport',
        'hsCode' => 'getHsCode',
        'itemDescription' => 'getItemDescription',
        'itemValue' => 'getItemValue',
        'packagedQuantity' => 'getPackagedQuantity',
        'skuNumber' => 'getSkuNumber',
        'itemWeight' => 'getItemWeight'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['countryOfOrigin'] = $data['countryOfOrigin'] ?? null;
        $this->container['descriptionExport'] = $data['descriptionExport'] ?? null;
        $this->container['descriptionImport'] = $data['descriptionImport'] ?? null;
        $this->container['hsCode'] = $data['hsCode'] ?? null;
        $this->container['itemDescription'] = $data['itemDescription'] ?? null;
        $this->container['itemValue'] = $data['itemValue'] ?? null;
        $this->container['packagedQuantity'] = $data['packagedQuantity'] ?? null;
        $this->container['skuNumber'] = $data['skuNumber'] ?? null;
        $this->container['itemWeight'] = $data['itemWeight'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['countryOfOrigin']) && (mb_strlen($this->container['countryOfOrigin']) > 2)) {
            $invalidProperties[] = "invalid value for 'countryOfOrigin', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['countryOfOrigin']) && (mb_strlen($this->container['countryOfOrigin']) < 2)) {
            $invalidProperties[] = "invalid value for 'countryOfOrigin', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['descriptionExport']) && (mb_strlen($this->container['descriptionExport']) > 50)) {
            $invalidProperties[] = "invalid value for 'descriptionExport', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['descriptionExport']) && (mb_strlen($this->container['descriptionExport']) < 1)) {
            $invalidProperties[] = "invalid value for 'descriptionExport', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['descriptionImport']) && (mb_strlen($this->container['descriptionImport']) > 50)) {
            $invalidProperties[] = "invalid value for 'descriptionImport', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['descriptionImport']) && (mb_strlen($this->container['descriptionImport']) < 1)) {
            $invalidProperties[] = "invalid value for 'descriptionImport', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['hsCode']) && (mb_strlen($this->container['hsCode']) > 8)) {
            $invalidProperties[] = "invalid value for 'hsCode', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['hsCode']) && (mb_strlen($this->container['hsCode']) < 8)) {
            $invalidProperties[] = "invalid value for 'hsCode', the character length must be bigger than or equal to 8.";
        }

        if ($this->container['itemDescription'] === null) {
            $invalidProperties[] = "'itemDescription' can't be null";
        }
        if ((mb_strlen($this->container['itemDescription']) > 50)) {
            $invalidProperties[] = "invalid value for 'itemDescription', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['itemDescription']) < 1)) {
            $invalidProperties[] = "invalid value for 'itemDescription', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['itemValue'] === null) {
            $invalidProperties[] = "'itemValue' can't be null";
        }
        if (($this->container['itemValue'] >= 999999.99)) {
            $invalidProperties[] = "invalid value for 'itemValue', must be smaller than 999999.99.";
        }

        if (($this->container['itemValue'] <= 0)) {
            $invalidProperties[] = "invalid value for 'itemValue', must be bigger than 0.";
        }

        if ($this->container['packagedQuantity'] === null) {
            $invalidProperties[] = "'packagedQuantity' can't be null";
        }
        if (($this->container['packagedQuantity'] < 1)) {
            $invalidProperties[] = "invalid value for 'packagedQuantity', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['skuNumber']) && (mb_strlen($this->container['skuNumber']) > 50)) {
            $invalidProperties[] = "invalid value for 'skuNumber', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['skuNumber']) && (mb_strlen($this->container['skuNumber']) < 1)) {
            $invalidProperties[] = "invalid value for 'skuNumber', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['itemWeight'] === null) {
            $invalidProperties[] = "'itemWeight' can't be null";
        }
        if (($this->container['itemWeight'] >= 1000000)) {
            $invalidProperties[] = "invalid value for 'itemWeight', must be smaller than 1000000.";
        }

        if (($this->container['itemWeight'] <= 0.01)) {
            $invalidProperties[] = "invalid value for 'itemWeight', must be bigger than 0.01.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets countryOfOrigin
     *
     * @return string|null
     */
    public function getCountryOfOrigin()
    {
        return $this->container['countryOfOrigin'];
    }

    /**
     * Sets countryOfOrigin
     *
     * @param string|null $countryOfOrigin 2-Character Country Code for Origin Manufacturer Country of the product
     *
     * @return self
     */
    public function setCountryOfOrigin($countryOfOrigin)
    {
        if (!is_null($countryOfOrigin) && (mb_strlen($countryOfOrigin) > 2)) {
            throw new \InvalidArgumentException('invalid length for $countryOfOrigin when calling PostRequestFormatCustomsDetails., must be smaller than or equal to 2.');
        }
        if (!is_null($countryOfOrigin) && (mb_strlen($countryOfOrigin) < 2)) {
            throw new \InvalidArgumentException('invalid length for $countryOfOrigin when calling PostRequestFormatCustomsDetails., must be bigger than or equal to 2.');
        }

        $this->container['countryOfOrigin'] = $countryOfOrigin;

        return $this;
    }

    /**
     * Gets descriptionExport
     *
     * @return string|null
     */
    public function getDescriptionExport()
    {
        return $this->container['descriptionExport'];
    }

    /**
     * Sets descriptionExport
     *
     * @param string|null $descriptionExport Dedicated description for export customs clearance(if required to be different from item description)
     *
     * @return self
     */
    public function setDescriptionExport($descriptionExport)
    {
        if (!is_null($descriptionExport) && (mb_strlen($descriptionExport) > 50)) {
            throw new \InvalidArgumentException('invalid length for $descriptionExport when calling PostRequestFormatCustomsDetails., must be smaller than or equal to 50.');
        }
        if (!is_null($descriptionExport) && (mb_strlen($descriptionExport) < 1)) {
            throw new \InvalidArgumentException('invalid length for $descriptionExport when calling PostRequestFormatCustomsDetails., must be bigger than or equal to 1.');
        }

        $this->container['descriptionExport'] = $descriptionExport;

        return $this;
    }

    /**
     * Gets descriptionImport
     *
     * @return string|null
     */
    public function getDescriptionImport()
    {
        return $this->container['descriptionImport'];
    }

    /**
     * Sets descriptionImport
     *
     * @param string|null $descriptionImport Dedicated description for import customs clearance if required to be different from item description)
     *
     * @return self
     */
    public function setDescriptionImport($descriptionImport)
    {
        if (!is_null($descriptionImport) && (mb_strlen($descriptionImport) > 50)) {
            throw new \InvalidArgumentException('invalid length for $descriptionImport when calling PostRequestFormatCustomsDetails., must be smaller than or equal to 50.');
        }
        if (!is_null($descriptionImport) && (mb_strlen($descriptionImport) < 1)) {
            throw new \InvalidArgumentException('invalid length for $descriptionImport when calling PostRequestFormatCustomsDetails., must be bigger than or equal to 1.');
        }

        $this->container['descriptionImport'] = $descriptionImport;

        return $this;
    }

    /**
     * Gets hsCode
     *
     * @return string|null
     */
    public function getHsCode()
    {
        return $this->container['hsCode'];
    }

    /**
     * Sets hsCode
     *
     * @param string|null $hsCode The Harmonized Tariff Schedule is a number assigned to every possible commodity that can be imported or exported from any country. Please do not include any decimals \".\" in this field. 8 digit HS code required.
     *
     * @return self
     */
    public function setHsCode($hsCode)
    {
        if (!is_null($hsCode) && (mb_strlen($hsCode) > 8)) {
            throw new \InvalidArgumentException('invalid length for $hsCode when calling PostRequestFormatCustomsDetails., must be smaller than or equal to 8.');
        }
        if (!is_null($hsCode) && (mb_strlen($hsCode) < 8)) {
            throw new \InvalidArgumentException('invalid length for $hsCode when calling PostRequestFormatCustomsDetails., must be bigger than or equal to 8.');
        }

        $this->container['hsCode'] = $hsCode;

        return $this;
    }

    /**
     * Gets itemDescription
     *
     * @return string
     */
    public function getItemDescription()
    {
        return $this->container['itemDescription'];
    }

    /**
     * Sets itemDescription
     *
     * @param string $itemDescription Detailed description of the commodity item - Used for customs clearance. Accuracy and Detail are required.
     *
     * @return self
     */
    public function setItemDescription($itemDescription)
    {
        if ((mb_strlen($itemDescription) > 50)) {
            throw new \InvalidArgumentException('invalid length for $itemDescription when calling PostRequestFormatCustomsDetails., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($itemDescription) < 1)) {
            throw new \InvalidArgumentException('invalid length for $itemDescription when calling PostRequestFormatCustomsDetails., must be bigger than or equal to 1.');
        }

        $this->container['itemDescription'] = $itemDescription;

        return $this;
    }

    /**
     * Gets itemValue
     *
     * @return float
     */
    public function getItemValue()
    {
        return $this->container['itemValue'];
    }

    /**
     * Sets itemValue
     *
     * @param float $itemValue The commercial value of the commodity (per each).
     *
     * @return self
     */
    public function setItemValue($itemValue)
    {

        if (($itemValue >= 999999.99)) {
            throw new \InvalidArgumentException('invalid value for $itemValue when calling PostRequestFormatCustomsDetails., must be smaller than 999999.99.');
        }
        if (($itemValue <= 0)) {
            throw new \InvalidArgumentException('invalid value for $itemValue when calling PostRequestFormatCustomsDetails., must be bigger than 0.');
        }

        $this->container['itemValue'] = $itemValue;

        return $this;
    }

    /**
     * Gets packagedQuantity
     *
     * @return int
     */
    public function getPackagedQuantity()
    {
        return $this->container['packagedQuantity'];
    }

    /**
     * Sets packagedQuantity
     *
     * @param int $packagedQuantity Quantity of the same item in the package
     *
     * @return self
     */
    public function setPackagedQuantity($packagedQuantity)
    {

        if (($packagedQuantity < 1)) {
            throw new \InvalidArgumentException('invalid value for $packagedQuantity when calling PostRequestFormatCustomsDetails., must be bigger than or equal to 1.');
        }

        $this->container['packagedQuantity'] = $packagedQuantity;

        return $this;
    }

    /**
     * Gets skuNumber
     *
     * @return string|null
     */
    public function getSkuNumber()
    {
        return $this->container['skuNumber'];
    }

    /**
     * Sets skuNumber
     *
     * @param string|null $skuNumber SKU #, or item code - Used for product verification on clients website during customs clearance process.
     *
     * @return self
     */
    public function setSkuNumber($skuNumber)
    {
        if (!is_null($skuNumber) && (mb_strlen($skuNumber) > 50)) {
            throw new \InvalidArgumentException('invalid length for $skuNumber when calling PostRequestFormatCustomsDetails., must be smaller than or equal to 50.');
        }
        if (!is_null($skuNumber) && (mb_strlen($skuNumber) < 1)) {
            throw new \InvalidArgumentException('invalid length for $skuNumber when calling PostRequestFormatCustomsDetails., must be bigger than or equal to 1.');
        }

        $this->container['skuNumber'] = $skuNumber;

        return $this;
    }

    /**
     * Gets itemWeight
     *
     * @return float
     */
    public function getItemWeight()
    {
        return $this->container['itemWeight'];
    }

    /**
     * Sets itemWeight
     *
     * @param float $itemWeight The weight of the commodity in kilograms (per each)
     *
     * @return self
     */
    public function setItemWeight($itemWeight)
    {

        if (($itemWeight >= 1000000)) {
            throw new \InvalidArgumentException('invalid value for $itemWeight when calling PostRequestFormatCustomsDetails., must be smaller than 1000000.');
        }
        if (($itemWeight <= 0.01)) {
            throw new \InvalidArgumentException('invalid value for $itemWeight when calling PostRequestFormatCustomsDetails., must be bigger than 0.01.');
        }

        $this->container['itemWeight'] = $itemWeight;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


