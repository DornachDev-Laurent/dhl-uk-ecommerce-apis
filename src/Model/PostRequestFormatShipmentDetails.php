<?php
/**
 * PostRequestFormatShipmentDetails
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  DHLUK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL eCommerce UK API
 *
 * The DHL eCommerce UK API allows customers and partners to:  - Get available products based on delivery address and parcel size.  - Find servicepoints in the UK or worldwide.  - Create new shipments and optionally return labels.  - Get shipment customs documents.  - Request shipment cancellation.  - Request shipment amendment.  - Regenerate labels ready for reprinting.  - Get details of customer trading locations.  - Request a driver pickup from a customer trading location.  - Get information about driver pickups already requested.  - Track shipments.  - Get DHL eCommerce UK reference data to help you provide valid shipment data from your applications.  - Add a What 3 Words to a domestic shipment.  - Find a DHL Parcels Depot.   **`API Authentications:`** All API operations require an access token to be passed in the Authorization Header for each request. The token type is an OAuth 2.0 Bearer token. To get the token you have to call the Authentication operation of this API and provide **client_id** and **client_secret**. The Access Token is valid for defined amount of time so it is not necessary to request the token for each request. Developers should implement the client application in a way that the token will be requested again only after it expires.  **`Access Token Lifecycle:`** When you receive an Access Token, it is valid for 60 minutes. During this time, you don't have to request new token per each request, but you can simply reuse the same token to access API resources, until the token expires. The invalid token or token expiration will be indicated by HTTP Status Code 401 Unauthorized, then your application has to request new Access Token.    **Recommended sequence for creating a shipment with the Shipping Label API is as follows:**        1.  Use client_id and client_secret to authenticate and obtain an access token using /auth/v1/accesstoken (see details below). A client_id and client_secret can be obtained by registering on the DHL developer portal and then registering an app in the user dashboard.   2.  Prepare valid JSON request as per Shipping Label API POST request schema (see examples below). Use data above depending on your use-case.   3.  Send an API request the correct API endpoint for test/UAT or live/production:          test: https://api-uat.dhl.com/parceluk/shipping/v1/label              live: https://api.dhl.com/parceluk/shipping/v1/label          If the shipment request is valid and accepted then a new shipmentId and optionally labels will be returned in the response.  **Sample Pickup Accounts And Product codes:**    To test using the Shipping Label API, you may use the following accounts and additional settings.        UK Domestic Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F020579  | DHL eCommerce UK domestic labels   orderedProduct            | 220      | Signature At Address Only - Next Day    International Road Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F820579  | DHL eCommerce UK Parcel Connect labels   orderedProduct             | 206      | Parcel Connect               International Air Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F520579 | DHL eCommerce UK International Labels   orderedProduct             | 101     | Worldwide Air
 *
 * The version of the OpenAPI document: 1.3.8
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DHLUK\Model;

use \ArrayAccess;
use \DHLUK\ObjectSerializer;

/**
 * PostRequestFormatShipmentDetails Class Doc Comment
 *
 * @category Class
 * @description Details relating to whole shipment (can be multiple physical boxes / pieces)
 * @package  DHLUK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class PostRequestFormatShipmentDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PostRequestFormat_shipmentDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'shipmentId' => 'string',
        'customerRef1' => 'string',
        'customerRef2' => 'string',
        'orderedProduct' => 'string',
        'totalPieces' => 'int',
        'totalWeight' => 'float',
        'inBoxReturn' => 'bool',
        'shipmentDesc' => 'string',
        'dutiesPaid' => 'string',
        'freightCharges' => 'float',
        'currency' => 'string',
        'deliveryInstructions' => 'string',
        'secureLocation' => 'string',
        'partnerCode' => 'string',
        'totalPallets' => 'int',
        'exchangeOnDelivery' => 'bool',
        'carriageForward' => 'bool',
        'thirdPartyCollection' => 'bool',
        'iossShipment' => 'bool',
        'totalDeclaredValue' => 'float',
        'deliveryChoice' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'shipmentId' => null,
        'customerRef1' => null,
        'customerRef2' => null,
        'orderedProduct' => null,
        'totalPieces' => null,
        'totalWeight' => 'float',
        'inBoxReturn' => null,
        'shipmentDesc' => null,
        'dutiesPaid' => null,
        'freightCharges' => null,
        'currency' => null,
        'deliveryInstructions' => null,
        'secureLocation' => null,
        'partnerCode' => null,
        'totalPallets' => null,
        'exchangeOnDelivery' => null,
        'carriageForward' => null,
        'thirdPartyCollection' => null,
        'iossShipment' => null,
        'totalDeclaredValue' => null,
        'deliveryChoice' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shipmentId' => 'shipmentId',
        'customerRef1' => 'customerRef1',
        'customerRef2' => 'customerRef2',
        'orderedProduct' => 'orderedProduct',
        'totalPieces' => 'totalPieces',
        'totalWeight' => 'totalWeight',
        'inBoxReturn' => 'inBoxReturn',
        'shipmentDesc' => 'shipmentDesc',
        'dutiesPaid' => 'dutiesPaid',
        'freightCharges' => 'freightCharges',
        'currency' => 'currency',
        'deliveryInstructions' => 'deliveryInstructions',
        'secureLocation' => 'secureLocation',
        'partnerCode' => 'partnerCode',
        'totalPallets' => 'totalPallets',
        'exchangeOnDelivery' => 'exchangeOnDelivery',
        'carriageForward' => 'carriageForward',
        'thirdPartyCollection' => 'thirdPartyCollection',
        'iossShipment' => 'iossShipment',
        'totalDeclaredValue' => 'totalDeclaredValue',
        'deliveryChoice' => 'deliveryChoice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shipmentId' => 'setShipmentId',
        'customerRef1' => 'setCustomerRef1',
        'customerRef2' => 'setCustomerRef2',
        'orderedProduct' => 'setOrderedProduct',
        'totalPieces' => 'setTotalPieces',
        'totalWeight' => 'setTotalWeight',
        'inBoxReturn' => 'setInBoxReturn',
        'shipmentDesc' => 'setShipmentDesc',
        'dutiesPaid' => 'setDutiesPaid',
        'freightCharges' => 'setFreightCharges',
        'currency' => 'setCurrency',
        'deliveryInstructions' => 'setDeliveryInstructions',
        'secureLocation' => 'setSecureLocation',
        'partnerCode' => 'setPartnerCode',
        'totalPallets' => 'setTotalPallets',
        'exchangeOnDelivery' => 'setExchangeOnDelivery',
        'carriageForward' => 'setCarriageForward',
        'thirdPartyCollection' => 'setThirdPartyCollection',
        'iossShipment' => 'setIossShipment',
        'totalDeclaredValue' => 'setTotalDeclaredValue',
        'deliveryChoice' => 'setDeliveryChoice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shipmentId' => 'getShipmentId',
        'customerRef1' => 'getCustomerRef1',
        'customerRef2' => 'getCustomerRef2',
        'orderedProduct' => 'getOrderedProduct',
        'totalPieces' => 'getTotalPieces',
        'totalWeight' => 'getTotalWeight',
        'inBoxReturn' => 'getInBoxReturn',
        'shipmentDesc' => 'getShipmentDesc',
        'dutiesPaid' => 'getDutiesPaid',
        'freightCharges' => 'getFreightCharges',
        'currency' => 'getCurrency',
        'deliveryInstructions' => 'getDeliveryInstructions',
        'secureLocation' => 'getSecureLocation',
        'partnerCode' => 'getPartnerCode',
        'totalPallets' => 'getTotalPallets',
        'exchangeOnDelivery' => 'getExchangeOnDelivery',
        'carriageForward' => 'getCarriageForward',
        'thirdPartyCollection' => 'getThirdPartyCollection',
        'iossShipment' => 'getIossShipment',
        'totalDeclaredValue' => 'getTotalDeclaredValue',
        'deliveryChoice' => 'getDeliveryChoice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const DUTIES_PAID_DDP = 'DDP';
    const DUTIES_PAID_DAP = 'DAP';
    const DELIVERY_CHOICE_AGE = 'AGE';
    const DELIVERY_CHOICE_PIN = 'PIN';
    const DELIVERY_CHOICE_SIG = 'SIG';
    const DELIVERY_CHOICE_POS = 'POS';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDutiesPaidAllowableValues()
    {
        return [
            self::DUTIES_PAID_DDP,
            self::DUTIES_PAID_DAP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryChoiceAllowableValues()
    {
        return [
            self::DELIVERY_CHOICE_AGE,
            self::DELIVERY_CHOICE_PIN,
            self::DELIVERY_CHOICE_SIG,
            self::DELIVERY_CHOICE_POS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shipmentId'] = $data['shipmentId'] ?? null;
        $this->container['customerRef1'] = $data['customerRef1'] ?? null;
        $this->container['customerRef2'] = $data['customerRef2'] ?? null;
        $this->container['orderedProduct'] = $data['orderedProduct'] ?? null;
        $this->container['totalPieces'] = $data['totalPieces'] ?? null;
        $this->container['totalWeight'] = $data['totalWeight'] ?? null;
        $this->container['inBoxReturn'] = $data['inBoxReturn'] ?? null;
        $this->container['shipmentDesc'] = $data['shipmentDesc'] ?? null;
        $this->container['dutiesPaid'] = $data['dutiesPaid'] ?? null;
        $this->container['freightCharges'] = $data['freightCharges'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
        $this->container['deliveryInstructions'] = $data['deliveryInstructions'] ?? null;
        $this->container['secureLocation'] = $data['secureLocation'] ?? null;
        $this->container['partnerCode'] = $data['partnerCode'] ?? null;
        $this->container['totalPallets'] = $data['totalPallets'] ?? null;
        $this->container['exchangeOnDelivery'] = $data['exchangeOnDelivery'] ?? null;
        $this->container['carriageForward'] = $data['carriageForward'] ?? null;
        $this->container['thirdPartyCollection'] = $data['thirdPartyCollection'] ?? null;
        $this->container['iossShipment'] = $data['iossShipment'] ?? null;
        $this->container['totalDeclaredValue'] = $data['totalDeclaredValue'] ?? null;
        $this->container['deliveryChoice'] = $data['deliveryChoice'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['shipmentId']) && (mb_strlen($this->container['shipmentId']) > 40)) {
            $invalidProperties[] = "invalid value for 'shipmentId', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['shipmentId']) && (mb_strlen($this->container['shipmentId']) < 1)) {
            $invalidProperties[] = "invalid value for 'shipmentId', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['customerRef1']) && (mb_strlen($this->container['customerRef1']) > 20)) {
            $invalidProperties[] = "invalid value for 'customerRef1', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['customerRef1']) && (mb_strlen($this->container['customerRef1']) < 1)) {
            $invalidProperties[] = "invalid value for 'customerRef1', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['customerRef2']) && (mb_strlen($this->container['customerRef2']) > 20)) {
            $invalidProperties[] = "invalid value for 'customerRef2', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['customerRef2']) && (mb_strlen($this->container['customerRef2']) < 1)) {
            $invalidProperties[] = "invalid value for 'customerRef2', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['orderedProduct'] === null) {
            $invalidProperties[] = "'orderedProduct' can't be null";
        }
        if ((mb_strlen($this->container['orderedProduct']) > 3)) {
            $invalidProperties[] = "invalid value for 'orderedProduct', the character length must be smaller than or equal to 3.";
        }

        if ((mb_strlen($this->container['orderedProduct']) < 1)) {
            $invalidProperties[] = "invalid value for 'orderedProduct', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['totalPieces'] === null) {
            $invalidProperties[] = "'totalPieces' can't be null";
        }
        if (($this->container['totalPieces'] > 99)) {
            $invalidProperties[] = "invalid value for 'totalPieces', must be smaller than or equal to 99.";
        }

        if (($this->container['totalPieces'] < 1)) {
            $invalidProperties[] = "invalid value for 'totalPieces', must be bigger than or equal to 1.";
        }

        if ($this->container['totalWeight'] === null) {
            $invalidProperties[] = "'totalWeight' can't be null";
        }
        if (($this->container['totalWeight'] > 999.99)) {
            $invalidProperties[] = "invalid value for 'totalWeight', must be smaller than or equal to 999.99.";
        }

        if (($this->container['totalWeight'] < 0.01)) {
            $invalidProperties[] = "invalid value for 'totalWeight', must be bigger than or equal to 0.01.";
        }

        if (!is_null($this->container['shipmentDesc']) && (mb_strlen($this->container['shipmentDesc']) > 90)) {
            $invalidProperties[] = "invalid value for 'shipmentDesc', the character length must be smaller than or equal to 90.";
        }

        if (!is_null($this->container['shipmentDesc']) && (mb_strlen($this->container['shipmentDesc']) < 1)) {
            $invalidProperties[] = "invalid value for 'shipmentDesc', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getDutiesPaidAllowableValues();
        if (!is_null($this->container['dutiesPaid']) && !in_array($this->container['dutiesPaid'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dutiesPaid', must be one of '%s'",
                $this->container['dutiesPaid'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['freightCharges']) && ($this->container['freightCharges'] >= 1000000000)) {
            $invalidProperties[] = "invalid value for 'freightCharges', must be smaller than 1000000000.";
        }

        if (!is_null($this->container['freightCharges']) && ($this->container['freightCharges'] < 0)) {
            $invalidProperties[] = "invalid value for 'freightCharges', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['currency']) && (mb_strlen($this->container['currency']) > 3)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['currency']) && (mb_strlen($this->container['currency']) < 3)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['deliveryInstructions']) && (mb_strlen($this->container['deliveryInstructions']) > 60)) {
            $invalidProperties[] = "invalid value for 'deliveryInstructions', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['secureLocation']) && (mb_strlen($this->container['secureLocation']) > 60)) {
            $invalidProperties[] = "invalid value for 'secureLocation', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['totalDeclaredValue']) && ($this->container['totalDeclaredValue'] >= 999999.99)) {
            $invalidProperties[] = "invalid value for 'totalDeclaredValue', must be smaller than 999999.99.";
        }

        if (!is_null($this->container['totalDeclaredValue']) && ($this->container['totalDeclaredValue'] <= 0)) {
            $invalidProperties[] = "invalid value for 'totalDeclaredValue', must be bigger than 0.";
        }

        $allowedValues = $this->getDeliveryChoiceAllowableValues();
        if (!is_null($this->container['deliveryChoice']) && !in_array($this->container['deliveryChoice'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'deliveryChoice', must be one of '%s'",
                $this->container['deliveryChoice'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shipmentId
     *
     * @return string|null
     */
    public function getShipmentId()
    {
        return $this->container['shipmentId'];
    }

    /**
     * Sets shipmentId
     *
     * @param string|null $shipmentId Unique Shipment Identifier for the shipment. This is by default generated by the API but can be overwritten by clients.
     *
     * @return self
     */
    public function setShipmentId($shipmentId)
    {
        if (!is_null($shipmentId) && (mb_strlen($shipmentId) > 40)) {
            throw new \InvalidArgumentException('invalid length for $shipmentId when calling PostRequestFormatShipmentDetails., must be smaller than or equal to 40.');
        }
        if (!is_null($shipmentId) && (mb_strlen($shipmentId) < 1)) {
            throw new \InvalidArgumentException('invalid length for $shipmentId when calling PostRequestFormatShipmentDetails., must be bigger than or equal to 1.');
        }

        $this->container['shipmentId'] = $shipmentId;

        return $this;
    }

    /**
     * Gets customerRef1
     *
     * @return string|null
     */
    public function getCustomerRef1()
    {
        return $this->container['customerRef1'];
    }

    /**
     * Sets customerRef1
     *
     * @param string|null $customerRef1 Intended to be printed on Label - 1, also pick and pack info
     *
     * @return self
     */
    public function setCustomerRef1($customerRef1)
    {
        if (!is_null($customerRef1) && (mb_strlen($customerRef1) > 20)) {
            throw new \InvalidArgumentException('invalid length for $customerRef1 when calling PostRequestFormatShipmentDetails., must be smaller than or equal to 20.');
        }
        if (!is_null($customerRef1) && (mb_strlen($customerRef1) < 1)) {
            throw new \InvalidArgumentException('invalid length for $customerRef1 when calling PostRequestFormatShipmentDetails., must be bigger than or equal to 1.');
        }

        $this->container['customerRef1'] = $customerRef1;

        return $this;
    }

    /**
     * Gets customerRef2
     *
     * @return string|null
     */
    public function getCustomerRef2()
    {
        return $this->container['customerRef2'];
    }

    /**
     * Sets customerRef2
     *
     * @param string|null $customerRef2 Intended to be printed on Label - 2, also pick and pack info. Add a value and a description of goods when shipping to the Channel Islands for the customer ref2 field.
     *
     * @return self
     */
    public function setCustomerRef2($customerRef2)
    {
        if (!is_null($customerRef2) && (mb_strlen($customerRef2) > 20)) {
            throw new \InvalidArgumentException('invalid length for $customerRef2 when calling PostRequestFormatShipmentDetails., must be smaller than or equal to 20.');
        }
        if (!is_null($customerRef2) && (mb_strlen($customerRef2) < 1)) {
            throw new \InvalidArgumentException('invalid length for $customerRef2 when calling PostRequestFormatShipmentDetails., must be bigger than or equal to 1.');
        }

        $this->container['customerRef2'] = $customerRef2;

        return $this;
    }

    /**
     * Gets orderedProduct
     *
     * @return string
     */
    public function getOrderedProduct()
    {
        return $this->container['orderedProduct'];
    }

    /**
     * Sets orderedProduct
     *
     * @param string $orderedProduct Identifies the DHL eCommerce UK 3 digit service code that is to be applied to the shipment.
     *
     * @return self
     */
    public function setOrderedProduct($orderedProduct)
    {
        if ((mb_strlen($orderedProduct) > 3)) {
            throw new \InvalidArgumentException('invalid length for $orderedProduct when calling PostRequestFormatShipmentDetails., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($orderedProduct) < 1)) {
            throw new \InvalidArgumentException('invalid length for $orderedProduct when calling PostRequestFormatShipmentDetails., must be bigger than or equal to 1.');
        }

        $this->container['orderedProduct'] = $orderedProduct;

        return $this;
    }

    /**
     * Gets totalPieces
     *
     * @return int
     */
    public function getTotalPieces()
    {
        return $this->container['totalPieces'];
    }

    /**
     * Sets totalPieces
     *
     * @param int $totalPieces Total number of pieces/parcels/boxes in shipment. Maximum number of pieces depends on product selected. Please refer the Product API to check max number of pieces for given product
     *
     * @return self
     */
    public function setTotalPieces($totalPieces)
    {

        if (($totalPieces > 99)) {
            throw new \InvalidArgumentException('invalid value for $totalPieces when calling PostRequestFormatShipmentDetails., must be smaller than or equal to 99.');
        }
        if (($totalPieces < 1)) {
            throw new \InvalidArgumentException('invalid value for $totalPieces when calling PostRequestFormatShipmentDetails., must be bigger than or equal to 1.');
        }

        $this->container['totalPieces'] = $totalPieces;

        return $this;
    }

    /**
     * Gets totalWeight
     *
     * @return float
     */
    public function getTotalWeight()
    {
        return $this->container['totalWeight'];
    }

    /**
     * Sets totalWeight
     *
     * @param float $totalWeight Total weight of shipment in kilograms to two decimal places
     *
     * @return self
     */
    public function setTotalWeight($totalWeight)
    {

        if (($totalWeight > 999.99)) {
            throw new \InvalidArgumentException('invalid value for $totalWeight when calling PostRequestFormatShipmentDetails., must be smaller than or equal to 999.99.');
        }
        if (($totalWeight < 0.01)) {
            throw new \InvalidArgumentException('invalid value for $totalWeight when calling PostRequestFormatShipmentDetails., must be bigger than or equal to 0.01.');
        }

        $this->container['totalWeight'] = $totalWeight;

        return $this;
    }

    /**
     * Gets inBoxReturn
     *
     * @return bool|null
     */
    public function getInBoxReturn()
    {
        return $this->container['inBoxReturn'];
    }

    /**
     * Sets inBoxReturn
     *
     * @param bool|null $inBoxReturn Is an inbox return shipment and label required? If true then shipments -> return object should be provided
     *
     * @return self
     */
    public function setInBoxReturn($inBoxReturn)
    {
        $this->container['inBoxReturn'] = $inBoxReturn;

        return $this;
    }

    /**
     * Gets shipmentDesc
     *
     * @return string|null
     */
    public function getShipmentDesc()
    {
        return $this->container['shipmentDesc'];
    }

    /**
     * Sets shipmentDesc
     *
     * @param string|null $shipmentDesc Description of the contents of the shipment (See reference for general categories)
     *
     * @return self
     */
    public function setShipmentDesc($shipmentDesc)
    {
        if (!is_null($shipmentDesc) && (mb_strlen($shipmentDesc) > 90)) {
            throw new \InvalidArgumentException('invalid length for $shipmentDesc when calling PostRequestFormatShipmentDetails., must be smaller than or equal to 90.');
        }
        if (!is_null($shipmentDesc) && (mb_strlen($shipmentDesc) < 1)) {
            throw new \InvalidArgumentException('invalid length for $shipmentDesc when calling PostRequestFormatShipmentDetails., must be bigger than or equal to 1.');
        }

        $this->container['shipmentDesc'] = $shipmentDesc;

        return $this;
    }

    /**
     * Gets dutiesPaid
     *
     * @return string|null
     */
    public function getDutiesPaid()
    {
        return $this->container['dutiesPaid'];
    }

    /**
     * Sets dutiesPaid
     *
     * @param string|null $dutiesPaid Indicates whether duties and taxes for the shipment are paid by the shipper - DDP (Delivered Duties Paid), DAP (Delivered at Place).
     *
     * @return self
     */
    public function setDutiesPaid($dutiesPaid)
    {
        $allowedValues = $this->getDutiesPaidAllowableValues();
        if (!is_null($dutiesPaid) && !in_array($dutiesPaid, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dutiesPaid', must be one of '%s'",
                    $dutiesPaid,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dutiesPaid'] = $dutiesPaid;

        return $this;
    }

    /**
     * Gets freightCharges
     *
     * @return float|null
     */
    public function getFreightCharges()
    {
        return $this->container['freightCharges'];
    }

    /**
     * Sets freightCharges
     *
     * @param float|null $freightCharges Freight costs for  shipment
     *
     * @return self
     */
    public function setFreightCharges($freightCharges)
    {

        if (!is_null($freightCharges) && ($freightCharges >= 1000000000)) {
            throw new \InvalidArgumentException('invalid value for $freightCharges when calling PostRequestFormatShipmentDetails., must be smaller than 1000000000.');
        }
        if (!is_null($freightCharges) && ($freightCharges < 0)) {
            throw new \InvalidArgumentException('invalid value for $freightCharges when calling PostRequestFormatShipmentDetails., must be bigger than or equal to 0.');
        }

        $this->container['freightCharges'] = $freightCharges;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Three-letter ISO Currency code
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (!is_null($currency) && (mb_strlen($currency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling PostRequestFormatShipmentDetails., must be smaller than or equal to 3.');
        }
        if (!is_null($currency) && (mb_strlen($currency) < 3)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling PostRequestFormatShipmentDetails., must be bigger than or equal to 3.');
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets deliveryInstructions
     *
     * @return string|null
     */
    public function getDeliveryInstructions()
    {
        return $this->container['deliveryInstructions'];
    }

    /**
     * Sets deliveryInstructions
     *
     * @param string|null $deliveryInstructions Special instructions for the delivery driver
     *
     * @return self
     */
    public function setDeliveryInstructions($deliveryInstructions)
    {
        if (!is_null($deliveryInstructions) && (mb_strlen($deliveryInstructions) > 60)) {
            throw new \InvalidArgumentException('invalid length for $deliveryInstructions when calling PostRequestFormatShipmentDetails., must be smaller than or equal to 60.');
        }

        $this->container['deliveryInstructions'] = $deliveryInstructions;

        return $this;
    }

    /**
     * Gets secureLocation
     *
     * @return string|null
     */
    public function getSecureLocation()
    {
        return $this->container['secureLocation'];
    }

    /**
     * Sets secureLocation
     *
     * @param string|null $secureLocation Optional description of a location where a parcel may be safely left at delivery
     *
     * @return self
     */
    public function setSecureLocation($secureLocation)
    {
        if (!is_null($secureLocation) && (mb_strlen($secureLocation) > 60)) {
            throw new \InvalidArgumentException('invalid length for $secureLocation when calling PostRequestFormatShipmentDetails., must be smaller than or equal to 60.');
        }

        $this->container['secureLocation'] = $secureLocation;

        return $this;
    }

    /**
     * Gets partnerCode
     *
     * @return string|null
     */
    public function getPartnerCode()
    {
        return $this->container['partnerCode'];
    }

    /**
     * Sets partnerCode
     *
     * @param string|null $partnerCode Optional partner code for DHL eCommerce UK partner
     *
     * @return self
     */
    public function setPartnerCode($partnerCode)
    {
        $this->container['partnerCode'] = $partnerCode;

        return $this;
    }

    /**
     * Gets totalPallets
     *
     * @return int|null
     */
    public function getTotalPallets()
    {
        return $this->container['totalPallets'];
    }

    /**
     * Sets totalPallets
     *
     * @param int|null $totalPallets Total number of pallets in this shipment if a pallets product. Please refer the Product API to check max number of pallets allowed for pallet product.
     *
     * @return self
     */
    public function setTotalPallets($totalPallets)
    {
        $this->container['totalPallets'] = $totalPallets;

        return $this;
    }

    /**
     * Gets exchangeOnDelivery
     *
     * @return bool|null
     */
    public function getExchangeOnDelivery()
    {
        return $this->container['exchangeOnDelivery'];
    }

    /**
     * Sets exchangeOnDelivery
     *
     * @param bool|null $exchangeOnDelivery Is an exchange on delivery required? If true, then a parcel must be collected in return for the parcel delivered. (United Kingdom delivery only)
     *
     * @return self
     */
    public function setExchangeOnDelivery($exchangeOnDelivery)
    {
        $this->container['exchangeOnDelivery'] = $exchangeOnDelivery;

        return $this;
    }

    /**
     * Gets carriageForward
     *
     * @return bool|null
     */
    public function getCarriageForward()
    {
        return $this->container['carriageForward'];
    }

    /**
     * Sets carriageForward
     *
     * @param bool|null $carriageForward This shipment is a carriage forward type shipment
     *
     * @return self
     */
    public function setCarriageForward($carriageForward)
    {
        $this->container['carriageForward'] = $carriageForward;

        return $this;
    }

    /**
     * Gets thirdPartyCollection
     *
     * @return bool|null
     */
    public function getThirdPartyCollection()
    {
        return $this->container['thirdPartyCollection'];
    }

    /**
     * Sets thirdPartyCollection
     *
     * @param bool|null $thirdPartyCollection This shipment is a third party collection type shipment
     *
     * @return self
     */
    public function setThirdPartyCollection($thirdPartyCollection)
    {
        $this->container['thirdPartyCollection'] = $thirdPartyCollection;

        return $this;
    }

    /**
     * Gets iossShipment
     *
     * @return bool|null
     */
    public function getIossShipment()
    {
        return $this->container['iossShipment'];
    }

    /**
     * Sets iossShipment
     *
     * @param bool|null $iossShipment Is IOSS Vat processing required for this shipment? If the product selected from the Product Capabilities API has iossApplies as true and nonIossAllowed as false then this must be set to true.
     *
     * @return self
     */
    public function setIossShipment($iossShipment)
    {
        $this->container['iossShipment'] = $iossShipment;

        return $this;
    }

    /**
     * Gets totalDeclaredValue
     *
     * @return float|null
     */
    public function getTotalDeclaredValue()
    {
        return $this->container['totalDeclaredValue'];
    }

    /**
     * Sets totalDeclaredValue
     *
     * @param float|null $totalDeclaredValue Total declared value for the shipment. Recommend to provide the declared value at shipment level. Mandatory to provide totalDeclaredValue at shipment level or piece level declared value if delivery outside United Kingdom.
     *
     * @return self
     */
    public function setTotalDeclaredValue($totalDeclaredValue)
    {

        if (!is_null($totalDeclaredValue) && ($totalDeclaredValue >= 999999.99)) {
            throw new \InvalidArgumentException('invalid value for $totalDeclaredValue when calling PostRequestFormatShipmentDetails., must be smaller than 999999.99.');
        }
        if (!is_null($totalDeclaredValue) && ($totalDeclaredValue <= 0)) {
            throw new \InvalidArgumentException('invalid value for $totalDeclaredValue when calling PostRequestFormatShipmentDetails., must be bigger than 0.');
        }

        $this->container['totalDeclaredValue'] = $totalDeclaredValue;

        return $this;
    }

    /**
     * Gets deliveryChoice
     *
     * @return string|null
     */
    public function getDeliveryChoice()
    {
        return $this->container['deliveryChoice'];
    }

    /**
     * Sets deliveryChoice
     *
     * @param string|null $deliveryChoice Specify what delivery choice is required for the delivery. Delivery Choices are enabled by account and are mutually exclusive at shipment level. Only one delivery choice can be selected if required. If no delivery choice is selected, the shipment will be delivered according to the service selected.
     *
     * @return self
     */
    public function setDeliveryChoice($deliveryChoice)
    {
        $allowedValues = $this->getDeliveryChoiceAllowableValues();
        if (!is_null($deliveryChoice) && !in_array($deliveryChoice, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'deliveryChoice', must be one of '%s'",
                    $deliveryChoice,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['deliveryChoice'] = $deliveryChoice;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


