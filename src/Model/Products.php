<?php
/**
 * Products
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  DHLUK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL eCommerce UK API
 *
 * The DHL eCommerce UK API allows customers and partners to:  - Get available products based on delivery address and parcel size.  - Find servicepoints in the UK or worldwide.  - Create new shipments and optionally return labels.  - Get shipment customs documents.  - Request shipment cancellation.  - Request shipment amendment.  - Regenerate labels ready for reprinting.  - Get details of customer trading locations.  - Request a driver pickup from a customer trading location.  - Get information about driver pickups already requested.  - Track shipments.  - Get DHL eCommerce UK reference data to help you provide valid shipment data from your applications.  - Add a What 3 Words to a domestic shipment.  - Find a DHL Parcels Depot.   **`API Authentications:`** All API operations require an access token to be passed in the Authorization Header for each request. The token type is an OAuth 2.0 Bearer token. To get the token you have to call the Authentication operation of this API and provide **client_id** and **client_secret**. The Access Token is valid for defined amount of time so it is not necessary to request the token for each request. Developers should implement the client application in a way that the token will be requested again only after it expires.  **`Access Token Lifecycle:`** When you receive an Access Token, it is valid for 60 minutes. During this time, you don't have to request new token per each request, but you can simply reuse the same token to access API resources, until the token expires. The invalid token or token expiration will be indicated by HTTP Status Code 401 Unauthorized, then your application has to request new Access Token.    **Recommended sequence for creating a shipment with the Shipping Label API is as follows:**        1.  Use client_id and client_secret to authenticate and obtain an access token using /auth/v1/accesstoken (see details below). A client_id and client_secret can be obtained by registering on the DHL developer portal and then registering an app in the user dashboard.   2.  Prepare valid JSON request as per Shipping Label API POST request schema (see examples below). Use data above depending on your use-case.   3.  Send an API request the correct API endpoint for test/UAT or live/production:          test: https://api-uat.dhl.com/parceluk/shipping/v1/label              live: https://api.dhl.com/parceluk/shipping/v1/label          If the shipment request is valid and accepted then a new shipmentId and optionally labels will be returned in the response.  **Sample Pickup Accounts And Product codes:**    To test using the Shipping Label API, you may use the following accounts and additional settings.        UK Domestic Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F020579  | DHL eCommerce UK domestic labels   orderedProduct            | 220      | Signature At Address Only - Next Day    International Road Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F820579  | DHL eCommerce UK Parcel Connect labels   orderedProduct             | 206      | Parcel Connect               International Air Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F520579 | DHL eCommerce UK International Labels   orderedProduct             | 101     | Worldwide Air
 *
 * The version of the OpenAPI document: 1.3.8
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DHLUK\Model;

use \ArrayAccess;
use \DHLUK\ObjectSerializer;

/**
 * Products Class Doc Comment
 *
 * @category Class
 * @package  DHLUK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class Products implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'products';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'products' => '\DHLUK\Model\Product[]',
        'dutiesPaidAllProducts' => 'string[]',
        'reasonForExportAllProducts' => '\DHLUK\Model\ReasonForExport[]',
        'iossDutiesPaidAllProducts' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'products' => null,
        'dutiesPaidAllProducts' => null,
        'reasonForExportAllProducts' => null,
        'iossDutiesPaidAllProducts' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'products' => 'products',
        'dutiesPaidAllProducts' => 'dutiesPaidAllProducts',
        'reasonForExportAllProducts' => 'reasonForExportAllProducts',
        'iossDutiesPaidAllProducts' => 'iossDutiesPaidAllProducts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'products' => 'setProducts',
        'dutiesPaidAllProducts' => 'setDutiesPaidAllProducts',
        'reasonForExportAllProducts' => 'setReasonForExportAllProducts',
        'iossDutiesPaidAllProducts' => 'setIossDutiesPaidAllProducts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'products' => 'getProducts',
        'dutiesPaidAllProducts' => 'getDutiesPaidAllProducts',
        'reasonForExportAllProducts' => 'getReasonForExportAllProducts',
        'iossDutiesPaidAllProducts' => 'getIossDutiesPaidAllProducts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const DUTIES_PAID_ALL_PRODUCTS_DDP = 'DDP';
    const DUTIES_PAID_ALL_PRODUCTS_DAP = 'DAP';
    const IOSS_DUTIES_PAID_ALL_PRODUCTS_DDP = 'DDP';
    const IOSS_DUTIES_PAID_ALL_PRODUCTS_DAP = 'DAP';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDutiesPaidAllProductsAllowableValues()
    {
        return [
            self::DUTIES_PAID_ALL_PRODUCTS_DDP,
            self::DUTIES_PAID_ALL_PRODUCTS_DAP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIossDutiesPaidAllProductsAllowableValues()
    {
        return [
            self::IOSS_DUTIES_PAID_ALL_PRODUCTS_DDP,
            self::IOSS_DUTIES_PAID_ALL_PRODUCTS_DAP,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['products'] = $data['products'] ?? null;
        $this->container['dutiesPaidAllProducts'] = $data['dutiesPaidAllProducts'] ?? null;
        $this->container['reasonForExportAllProducts'] = $data['reasonForExportAllProducts'] ?? null;
        $this->container['iossDutiesPaidAllProducts'] = $data['iossDutiesPaidAllProducts'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets products
     *
     * @return \DHLUK\Model\Product[]|null
     */
    public function getProducts()
    {
        return $this->container['products'];
    }

    /**
     * Sets products
     *
     * @param \DHLUK\Model\Product[]|null $products products
     *
     * @return self
     */
    public function setProducts($products)
    {
        $this->container['products'] = $products;

        return $this;
    }

    /**
     * Gets dutiesPaidAllProducts
     *
     * @return string[]|null
     */
    public function getDutiesPaidAllProducts()
    {
        return $this->container['dutiesPaidAllProducts'];
    }

    /**
     * Sets dutiesPaidAllProducts
     *
     * @param string[]|null $dutiesPaidAllProducts Allowed values for dutiesPaid for ALL of the products being returned. Possible values in the list are DDP (Delivered Duties Paid), DAP (Delivered at Place). This will vary based on the destination and selected shipment features.
     *
     * @return self
     */
    public function setDutiesPaidAllProducts($dutiesPaidAllProducts)
    {
        $allowedValues = $this->getDutiesPaidAllProductsAllowableValues();
        if (!is_null($dutiesPaidAllProducts) && array_diff($dutiesPaidAllProducts, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'dutiesPaidAllProducts', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dutiesPaidAllProducts'] = $dutiesPaidAllProducts;

        return $this;
    }

    /**
     * Gets reasonForExportAllProducts
     *
     * @return \DHLUK\Model\ReasonForExport[]|null
     */
    public function getReasonForExportAllProducts()
    {
        return $this->container['reasonForExportAllProducts'];
    }

    /**
     * Sets reasonForExportAllProducts
     *
     * @param \DHLUK\Model\ReasonForExport[]|null $reasonForExportAllProducts List of valid reasons for export for ALL of the products being returned.
     *
     * @return self
     */
    public function setReasonForExportAllProducts($reasonForExportAllProducts)
    {
        $this->container['reasonForExportAllProducts'] = $reasonForExportAllProducts;

        return $this;
    }

    /**
     * Gets iossDutiesPaidAllProducts
     *
     * @return string[]|null
     */
    public function getIossDutiesPaidAllProducts()
    {
        return $this->container['iossDutiesPaidAllProducts'];
    }

    /**
     * Sets iossDutiesPaidAllProducts
     *
     * @param string[]|null $iossDutiesPaidAllProducts Allowed values for dutiesPaid for ALL of the products being returned when using IOSS. Possible values in the list are DDP (Delivered Duties Paid),  DAP (Delivered at Place). This will vary based on the destination and selected shipment features.
     *
     * @return self
     */
    public function setIossDutiesPaidAllProducts($iossDutiesPaidAllProducts)
    {
        $allowedValues = $this->getIossDutiesPaidAllProductsAllowableValues();
        if (!is_null($iossDutiesPaidAllProducts) && array_diff($iossDutiesPaidAllProducts, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'iossDutiesPaidAllProducts', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['iossDutiesPaidAllProducts'] = $iossDutiesPaidAllProducts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


