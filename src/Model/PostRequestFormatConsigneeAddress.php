<?php
/**
 * PostRequestFormatConsigneeAddress
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  DHLUK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL eCommerce UK API
 *
 * The DHL eCommerce UK API allows customers and partners to:  - Get available products based on delivery address and parcel size.  - Find servicepoints in the UK or worldwide.  - Create new shipments and optionally return labels.  - Get shipment customs documents.  - Request shipment cancellation.  - Request shipment amendment.  - Regenerate labels ready for reprinting.  - Get details of customer trading locations.  - Request a driver pickup from a customer trading location.  - Get information about driver pickups already requested.  - Track shipments.  - Get DHL eCommerce UK reference data to help you provide valid shipment data from your applications.  - Add a What 3 Words to a domestic shipment.  - Find a DHL Parcels Depot.   **`API Authentications:`** All API operations require an access token to be passed in the Authorization Header for each request. The token type is an OAuth 2.0 Bearer token. To get the token you have to call the Authentication operation of this API and provide **client_id** and **client_secret**. The Access Token is valid for defined amount of time so it is not necessary to request the token for each request. Developers should implement the client application in a way that the token will be requested again only after it expires.  **`Access Token Lifecycle:`** When you receive an Access Token, it is valid for 60 minutes. During this time, you don't have to request new token per each request, but you can simply reuse the same token to access API resources, until the token expires. The invalid token or token expiration will be indicated by HTTP Status Code 401 Unauthorized, then your application has to request new Access Token.    **Recommended sequence for creating a shipment with the Shipping Label API is as follows:**        1.  Use client_id and client_secret to authenticate and obtain an access token using /auth/v1/accesstoken (see details below). A client_id and client_secret can be obtained by registering on the DHL developer portal and then registering an app in the user dashboard.   2.  Prepare valid JSON request as per Shipping Label API POST request schema (see examples below). Use data above depending on your use-case.   3.  Send an API request the correct API endpoint for test/UAT or live/production:          test: https://api-uat.dhl.com/parceluk/shipping/v1/label              live: https://api.dhl.com/parceluk/shipping/v1/label          If the shipment request is valid and accepted then a new shipmentId and optionally labels will be returned in the response.  **Sample Pickup Accounts And Product codes:**    To test using the Shipping Label API, you may use the following accounts and additional settings.        UK Domestic Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F020579  | DHL eCommerce UK domestic labels   orderedProduct            | 220      | Signature At Address Only - Next Day    International Road Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F820579  | DHL eCommerce UK Parcel Connect labels   orderedProduct             | 206      | Parcel Connect               International Air Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F520579 | DHL eCommerce UK International Labels   orderedProduct             | 101     | Worldwide Air
 *
 * The version of the OpenAPI document: 1.3.8
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DHLUK\Model;

use \ArrayAccess;
use \DHLUK\ObjectSerializer;

/**
 * PostRequestFormatConsigneeAddress Class Doc Comment
 *
 * @category Class
 * @description Address of the consignee (delivery address).
 * @package  DHLUK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class PostRequestFormatConsigneeAddress implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PostRequestFormat_consigneeAddress';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'recipientType' => 'string',
        'addressType' => 'string',
        'companyName' => 'string',
        'address1' => 'string',
        'address2' => 'string',
        'address3' => 'string',
        'city' => 'string',
        'state' => 'string',
        'postalCode' => 'string',
        'country' => 'string',
        'what3words' => '\DHLUK\Model\PostRequestFormatConsigneeAddressWhat3words',
        'name' => 'string',
        'email' => 'string',
        'phone' => 'string',
        'locationId' => 'string',
        'locationType' => 'string',
        'idNumber' => 'string',
        'idType' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'recipientType' => null,
        'addressType' => null,
        'companyName' => null,
        'address1' => null,
        'address2' => null,
        'address3' => null,
        'city' => null,
        'state' => null,
        'postalCode' => null,
        'country' => null,
        'what3words' => null,
        'name' => null,
        'email' => 'email',
        'phone' => null,
        'locationId' => null,
        'locationType' => null,
        'idNumber' => null,
        'idType' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'recipientType' => 'recipientType',
        'addressType' => 'addressType',
        'companyName' => 'companyName',
        'address1' => 'address1',
        'address2' => 'address2',
        'address3' => 'address3',
        'city' => 'city',
        'state' => 'state',
        'postalCode' => 'postalCode',
        'country' => 'country',
        'what3words' => 'what3words',
        'name' => 'name',
        'email' => 'email',
        'phone' => 'phone',
        'locationId' => 'locationId',
        'locationType' => 'locationType',
        'idNumber' => 'idNumber',
        'idType' => 'idType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'recipientType' => 'setRecipientType',
        'addressType' => 'setAddressType',
        'companyName' => 'setCompanyName',
        'address1' => 'setAddress1',
        'address2' => 'setAddress2',
        'address3' => 'setAddress3',
        'city' => 'setCity',
        'state' => 'setState',
        'postalCode' => 'setPostalCode',
        'country' => 'setCountry',
        'what3words' => 'setWhat3words',
        'name' => 'setName',
        'email' => 'setEmail',
        'phone' => 'setPhone',
        'locationId' => 'setLocationId',
        'locationType' => 'setLocationType',
        'idNumber' => 'setIdNumber',
        'idType' => 'setIdType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'recipientType' => 'getRecipientType',
        'addressType' => 'getAddressType',
        'companyName' => 'getCompanyName',
        'address1' => 'getAddress1',
        'address2' => 'getAddress2',
        'address3' => 'getAddress3',
        'city' => 'getCity',
        'state' => 'getState',
        'postalCode' => 'getPostalCode',
        'country' => 'getCountry',
        'what3words' => 'getWhat3words',
        'name' => 'getName',
        'email' => 'getEmail',
        'phone' => 'getPhone',
        'locationId' => 'getLocationId',
        'locationType' => 'getLocationType',
        'idNumber' => 'getIdNumber',
        'idType' => 'getIdType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const RECIPIENT_TYPE_BUSINESS = 'business';
    const RECIPIENT_TYPE_RESIDENTIAL = 'residential';
    const ADDRESS_TYPE_DOORSTEP = 'doorstep';
    const ADDRESS_TYPE_SERVICE_POINT = 'servicePoint';
    const LOCATION_TYPE_PARCEL_SHOP = 'ParcelShop';
    const ID_TYPE_PASSPORT = 'Passport';
    const ID_TYPE_POSTNUMMER = 'Postnummer';
    const ID_TYPE_OTHER = 'Other';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRecipientTypeAllowableValues()
    {
        return [
            self::RECIPIENT_TYPE_BUSINESS,
            self::RECIPIENT_TYPE_RESIDENTIAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAddressTypeAllowableValues()
    {
        return [
            self::ADDRESS_TYPE_DOORSTEP,
            self::ADDRESS_TYPE_SERVICE_POINT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocationTypeAllowableValues()
    {
        return [
            self::LOCATION_TYPE_PARCEL_SHOP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIdTypeAllowableValues()
    {
        return [
            self::ID_TYPE_PASSPORT,
            self::ID_TYPE_POSTNUMMER,
            self::ID_TYPE_OTHER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['recipientType'] = $data['recipientType'] ?? null;
        $this->container['addressType'] = $data['addressType'] ?? null;
        $this->container['companyName'] = $data['companyName'] ?? null;
        $this->container['address1'] = $data['address1'] ?? null;
        $this->container['address2'] = $data['address2'] ?? null;
        $this->container['address3'] = $data['address3'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['postalCode'] = $data['postalCode'] ?? null;
        $this->container['country'] = $data['country'] ?? null;
        $this->container['what3words'] = $data['what3words'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['phone'] = $data['phone'] ?? null;
        $this->container['locationId'] = $data['locationId'] ?? null;
        $this->container['locationType'] = $data['locationType'] ?? null;
        $this->container['idNumber'] = $data['idNumber'] ?? null;
        $this->container['idType'] = $data['idType'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['recipientType'] === null) {
            $invalidProperties[] = "'recipientType' can't be null";
        }
        $allowedValues = $this->getRecipientTypeAllowableValues();
        if (!is_null($this->container['recipientType']) && !in_array($this->container['recipientType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'recipientType', must be one of '%s'",
                $this->container['recipientType'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['addressType'] === null) {
            $invalidProperties[] = "'addressType' can't be null";
        }
        $allowedValues = $this->getAddressTypeAllowableValues();
        if (!is_null($this->container['addressType']) && !in_array($this->container['addressType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'addressType', must be one of '%s'",
                $this->container['addressType'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['companyName']) && (mb_strlen($this->container['companyName']) > 35)) {
            $invalidProperties[] = "invalid value for 'companyName', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['companyName']) && (mb_strlen($this->container['companyName']) < 1)) {
            $invalidProperties[] = "invalid value for 'companyName', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['address1'] === null) {
            $invalidProperties[] = "'address1' can't be null";
        }
        if ((mb_strlen($this->container['address1']) > 35)) {
            $invalidProperties[] = "invalid value for 'address1', the character length must be smaller than or equal to 35.";
        }

        if ((mb_strlen($this->container['address1']) < 1)) {
            $invalidProperties[] = "invalid value for 'address1', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['address2']) && (mb_strlen($this->container['address2']) > 35)) {
            $invalidProperties[] = "invalid value for 'address2', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['address2']) && (mb_strlen($this->container['address2']) < 1)) {
            $invalidProperties[] = "invalid value for 'address2', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['address3']) && (mb_strlen($this->container['address3']) > 35)) {
            $invalidProperties[] = "invalid value for 'address3', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['address3']) && (mb_strlen($this->container['address3']) < 1)) {
            $invalidProperties[] = "invalid value for 'address3', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ((mb_strlen($this->container['city']) > 35)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 35.";
        }

        if ((mb_strlen($this->container['city']) < 1)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['state']) && (mb_strlen($this->container['state']) > 35)) {
            $invalidProperties[] = "invalid value for 'state', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['state']) && (mb_strlen($this->container['state']) < 1)) {
            $invalidProperties[] = "invalid value for 'state', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['postalCode'] === null) {
            $invalidProperties[] = "'postalCode' can't be null";
        }
        if ((mb_strlen($this->container['postalCode']) > 15)) {
            $invalidProperties[] = "invalid value for 'postalCode', the character length must be smaller than or equal to 15.";
        }

        if ((mb_strlen($this->container['postalCode']) < 3)) {
            $invalidProperties[] = "invalid value for 'postalCode', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        if ((mb_strlen($this->container['country']) > 2)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be smaller than or equal to 2.";
        }

        if ((mb_strlen($this->container['country']) < 2)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 70)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 70.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) < 1)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) > 35)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) < 1)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['locationId']) && (mb_strlen($this->container['locationId']) > 20)) {
            $invalidProperties[] = "invalid value for 'locationId', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['locationId']) && (mb_strlen($this->container['locationId']) < 1)) {
            $invalidProperties[] = "invalid value for 'locationId', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getLocationTypeAllowableValues();
        if (!is_null($this->container['locationType']) && !in_array($this->container['locationType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'locationType', must be one of '%s'",
                $this->container['locationType'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['idNumber']) && (mb_strlen($this->container['idNumber']) > 30)) {
            $invalidProperties[] = "invalid value for 'idNumber', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['idNumber']) && (mb_strlen($this->container['idNumber']) < 1)) {
            $invalidProperties[] = "invalid value for 'idNumber', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getIdTypeAllowableValues();
        if (!is_null($this->container['idType']) && !in_array($this->container['idType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'idType', must be one of '%s'",
                $this->container['idType'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets recipientType
     *
     * @return string
     */
    public function getRecipientType()
    {
        return $this->container['recipientType'];
    }

    /**
     * Sets recipientType
     *
     * @param string $recipientType Type of recipient being delivered to
     *
     * @return self
     */
    public function setRecipientType($recipientType)
    {
        $allowedValues = $this->getRecipientTypeAllowableValues();
        if (!in_array($recipientType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'recipientType', must be one of '%s'",
                    $recipientType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['recipientType'] = $recipientType;

        return $this;
    }

    /**
     * Gets addressType
     *
     * @return string
     */
    public function getAddressType()
    {
        return $this->container['addressType'];
    }

    /**
     * Sets addressType
     *
     * @param string $addressType Type of address being delivered to
     *
     * @return self
     */
    public function setAddressType($addressType)
    {
        $allowedValues = $this->getAddressTypeAllowableValues();
        if (!in_array($addressType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'addressType', must be one of '%s'",
                    $addressType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['addressType'] = $addressType;

        return $this;
    }

    /**
     * Gets companyName
     *
     * @return string|null
     */
    public function getCompanyName()
    {
        return $this->container['companyName'];
    }

    /**
     * Sets companyName
     *
     * @param string|null $companyName Optional Name of the organisation receiving the shipment. If addressType is servicePoint, then this is the companyName returned from the Service Point Finder API.
     *
     * @return self
     */
    public function setCompanyName($companyName)
    {
        if (!is_null($companyName) && (mb_strlen($companyName) > 35)) {
            throw new \InvalidArgumentException('invalid length for $companyName when calling PostRequestFormatConsigneeAddress., must be smaller than or equal to 35.');
        }
        if (!is_null($companyName) && (mb_strlen($companyName) < 1)) {
            throw new \InvalidArgumentException('invalid length for $companyName when calling PostRequestFormatConsigneeAddress., must be bigger than or equal to 1.');
        }

        $this->container['companyName'] = $companyName;

        return $this;
    }

    /**
     * Gets address1
     *
     * @return string
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     *
     * @param string $address1 Line 1 of the consignee's street address or delivery location. If addressType is servicePoint, then this is the title returned from the Service Point Finder API.
     *
     * @return self
     */
    public function setAddress1($address1)
    {
        if ((mb_strlen($address1) > 35)) {
            throw new \InvalidArgumentException('invalid length for $address1 when calling PostRequestFormatConsigneeAddress., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($address1) < 1)) {
            throw new \InvalidArgumentException('invalid length for $address1 when calling PostRequestFormatConsigneeAddress., must be bigger than or equal to 1.');
        }

        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string|null
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string|null $address2 Line 2 of the consignee's street address or delivery location. If addressType is servicePoint, then this is the address1 returned from the Service Point Finder API.
     *
     * @return self
     */
    public function setAddress2($address2)
    {
        if (!is_null($address2) && (mb_strlen($address2) > 35)) {
            throw new \InvalidArgumentException('invalid length for $address2 when calling PostRequestFormatConsigneeAddress., must be smaller than or equal to 35.');
        }
        if (!is_null($address2) && (mb_strlen($address2) < 1)) {
            throw new \InvalidArgumentException('invalid length for $address2 when calling PostRequestFormatConsigneeAddress., must be bigger than or equal to 1.');
        }

        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets address3
     *
     * @return string|null
     */
    public function getAddress3()
    {
        return $this->container['address3'];
    }

    /**
     * Sets address3
     *
     * @param string|null $address3 Line 3 of the consignee's street address or delivery location - typically used for addresses to designate province, district, or neighborhood. If addressType is servicePoint, then this is the address2 returned from the Service Point Finder API.
     *
     * @return self
     */
    public function setAddress3($address3)
    {
        if (!is_null($address3) && (mb_strlen($address3) > 35)) {
            throw new \InvalidArgumentException('invalid length for $address3 when calling PostRequestFormatConsigneeAddress., must be smaller than or equal to 35.');
        }
        if (!is_null($address3) && (mb_strlen($address3) < 1)) {
            throw new \InvalidArgumentException('invalid length for $address3 when calling PostRequestFormatConsigneeAddress., must be bigger than or equal to 1.');
        }

        $this->container['address3'] = $address3;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city Consignee's city. If addressType is servicePoint, then this is the city returned from the Service Point Finder API.
     *
     * @return self
     */
    public function setCity($city)
    {
        if ((mb_strlen($city) > 35)) {
            throw new \InvalidArgumentException('invalid length for $city when calling PostRequestFormatConsigneeAddress., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($city) < 1)) {
            throw new \InvalidArgumentException('invalid length for $city when calling PostRequestFormatConsigneeAddress., must be bigger than or equal to 1.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state Consignee's county, state, province or territory. If addressType is servicePoint, then this is the state returned from the Service Point Finder API.
     *
     * @return self
     */
    public function setState($state)
    {
        if (!is_null($state) && (mb_strlen($state) > 35)) {
            throw new \InvalidArgumentException('invalid length for $state when calling PostRequestFormatConsigneeAddress., must be smaller than or equal to 35.');
        }
        if (!is_null($state) && (mb_strlen($state) < 1)) {
            throw new \InvalidArgumentException('invalid length for $state when calling PostRequestFormatConsigneeAddress., must be bigger than or equal to 1.');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets postalCode
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postalCode'];
    }

    /**
     * Sets postalCode
     *
     * @param string $postalCode Consignee's postal code. If addressType is servicePoint, then this is the postalCode returned from the Service Point Finder API.
     *
     * @return self
     */
    public function setPostalCode($postalCode)
    {
        if ((mb_strlen($postalCode) > 15)) {
            throw new \InvalidArgumentException('invalid length for $postalCode when calling PostRequestFormatConsigneeAddress., must be smaller than or equal to 15.');
        }
        if ((mb_strlen($postalCode) < 3)) {
            throw new \InvalidArgumentException('invalid length for $postalCode when calling PostRequestFormatConsigneeAddress., must be bigger than or equal to 3.');
        }

        $this->container['postalCode'] = $postalCode;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country Two-character ISO consignee address country code. If addressType is servicePoint, then this is the country returned from the Service Point Finder API.
     *
     * @return self
     */
    public function setCountry($country)
    {
        if ((mb_strlen($country) > 2)) {
            throw new \InvalidArgumentException('invalid length for $country when calling PostRequestFormatConsigneeAddress., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($country) < 2)) {
            throw new \InvalidArgumentException('invalid length for $country when calling PostRequestFormatConsigneeAddress., must be bigger than or equal to 2.');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets what3words
     *
     * @return \DHLUK\Model\PostRequestFormatConsigneeAddressWhat3words|null
     */
    public function getWhat3words()
    {
        return $this->container['what3words'];
    }

    /**
     * Sets what3words
     *
     * @param \DHLUK\Model\PostRequestFormatConsigneeAddressWhat3words|null $what3words what3words
     *
     * @return self
     */
    public function setWhat3words($what3words)
    {
        $this->container['what3words'] = $what3words;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the person receiving the shipment
     *
     * @return self
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling PostRequestFormatConsigneeAddress., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling PostRequestFormatConsigneeAddress., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Consignee's email address. Please supply to allow pre delivery notifications.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (!is_null($email) && (mb_strlen($email) > 70)) {
            throw new \InvalidArgumentException('invalid length for $email when calling PostRequestFormatConsigneeAddress., must be smaller than or equal to 70.');
        }
        if (!is_null($email) && (mb_strlen($email) < 1)) {
            throw new \InvalidArgumentException('invalid length for $email when calling PostRequestFormatConsigneeAddress., must be bigger than or equal to 1.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone Consignee's phone number
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (!is_null($phone) && (mb_strlen($phone) > 35)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling PostRequestFormatConsigneeAddress., must be smaller than or equal to 35.');
        }
        if (!is_null($phone) && (mb_strlen($phone) < 1)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling PostRequestFormatConsigneeAddress., must be bigger than or equal to 1.');
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets locationId
     *
     * @return string|null
     */
    public function getLocationId()
    {
        return $this->container['locationId'];
    }

    /**
     * Sets locationId
     *
     * @param string|null $locationId If addressType is servicePoint, then this is the servicePointId returned from the Service Point Finder API
     *
     * @return self
     */
    public function setLocationId($locationId)
    {
        if (!is_null($locationId) && (mb_strlen($locationId) > 20)) {
            throw new \InvalidArgumentException('invalid length for $locationId when calling PostRequestFormatConsigneeAddress., must be smaller than or equal to 20.');
        }
        if (!is_null($locationId) && (mb_strlen($locationId) < 1)) {
            throw new \InvalidArgumentException('invalid length for $locationId when calling PostRequestFormatConsigneeAddress., must be bigger than or equal to 1.');
        }

        $this->container['locationId'] = $locationId;

        return $this;
    }

    /**
     * Gets locationType
     *
     * @return string|null
     */
    public function getLocationType()
    {
        return $this->container['locationType'];
    }

    /**
     * Sets locationType
     *
     * @param string|null $locationType If addressType is servicePoint, then address type of service point: Parcel Shop (More types added in future)
     *
     * @return self
     */
    public function setLocationType($locationType)
    {
        $allowedValues = $this->getLocationTypeAllowableValues();
        if (!is_null($locationType) && !in_array($locationType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'locationType', must be one of '%s'",
                    $locationType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['locationType'] = $locationType;

        return $this;
    }

    /**
     * Gets idNumber
     *
     * @return string|null
     */
    public function getIdNumber()
    {
        return $this->container['idNumber'];
    }

    /**
     * Sets idNumber
     *
     * @param string|null $idNumber Consignee's identification number
     *
     * @return self
     */
    public function setIdNumber($idNumber)
    {
        if (!is_null($idNumber) && (mb_strlen($idNumber) > 30)) {
            throw new \InvalidArgumentException('invalid length for $idNumber when calling PostRequestFormatConsigneeAddress., must be smaller than or equal to 30.');
        }
        if (!is_null($idNumber) && (mb_strlen($idNumber) < 1)) {
            throw new \InvalidArgumentException('invalid length for $idNumber when calling PostRequestFormatConsigneeAddress., must be bigger than or equal to 1.');
        }

        $this->container['idNumber'] = $idNumber;

        return $this;
    }

    /**
     * Gets idType
     *
     * @return string|null
     */
    public function getIdType()
    {
        return $this->container['idType'];
    }

    /**
     * Sets idType
     *
     * @param string|null $idType Denotes the type of identification number provided by the consignee for customs clearance and delivery. Note: Provide if available for DHL Parcel International Direct to S. Korea and China
     *
     * @return self
     */
    public function setIdType($idType)
    {
        $allowedValues = $this->getIdTypeAllowableValues();
        if (!is_null($idType) && !in_array($idType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'idType', must be one of '%s'",
                    $idType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['idType'] = $idType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


