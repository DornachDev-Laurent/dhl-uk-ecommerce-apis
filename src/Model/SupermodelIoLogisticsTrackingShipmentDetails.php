<?php
/**
 * SupermodelIoLogisticsTrackingShipmentDetails
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  DHLUK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL eCommerce UK API
 *
 * The DHL eCommerce UK API allows customers and partners to:  - Get available products based on delivery address and parcel size.  - Find servicepoints in the UK or worldwide.  - Create new shipments and optionally return labels.  - Get shipment customs documents.  - Request shipment cancellation.  - Request shipment amendment.  - Regenerate labels ready for reprinting.  - Get details of customer trading locations.  - Request a driver pickup from a customer trading location.  - Get information about driver pickups already requested.  - Track shipments.  - Get DHL eCommerce UK reference data to help you provide valid shipment data from your applications.  - Add a What 3 Words to a domestic shipment.  - Find a DHL Parcels Depot.   **`API Authentications:`** All API operations require an access token to be passed in the Authorization Header for each request. The token type is an OAuth 2.0 Bearer token. To get the token you have to call the Authentication operation of this API and provide **client_id** and **client_secret**. The Access Token is valid for defined amount of time so it is not necessary to request the token for each request. Developers should implement the client application in a way that the token will be requested again only after it expires.  **`Access Token Lifecycle:`** When you receive an Access Token, it is valid for 60 minutes. During this time, you don't have to request new token per each request, but you can simply reuse the same token to access API resources, until the token expires. The invalid token or token expiration will be indicated by HTTP Status Code 401 Unauthorized, then your application has to request new Access Token.    **Recommended sequence for creating a shipment with the Shipping Label API is as follows:**        1.  Use client_id and client_secret to authenticate and obtain an access token using /auth/v1/accesstoken (see details below). A client_id and client_secret can be obtained by registering on the DHL developer portal and then registering an app in the user dashboard.   2.  Prepare valid JSON request as per Shipping Label API POST request schema (see examples below). Use data above depending on your use-case.   3.  Send an API request the correct API endpoint for test/UAT or live/production:          test: https://api-uat.dhl.com/parceluk/shipping/v1/label              live: https://api.dhl.com/parceluk/shipping/v1/label          If the shipment request is valid and accepted then a new shipmentId and optionally labels will be returned in the response.  **Sample Pickup Accounts And Product codes:**    To test using the Shipping Label API, you may use the following accounts and additional settings.        UK Domestic Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F020579  | DHL eCommerce UK domestic labels   orderedProduct            | 220      | Signature At Address Only - Next Day    International Road Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F820579  | DHL eCommerce UK Parcel Connect labels   orderedProduct             | 206      | Parcel Connect               International Air Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F520579 | DHL eCommerce UK International Labels   orderedProduct             | 101     | Worldwide Air
 *
 * The version of the OpenAPI document: 1.3.8
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DHLUK\Model;

use \ArrayAccess;
use \DHLUK\ObjectSerializer;

/**
 * SupermodelIoLogisticsTrackingShipmentDetails Class Doc Comment
 *
 * @category Class
 * @package  DHLUK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SupermodelIoLogisticsTrackingShipmentDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'supermodelIoLogisticsTrackingShipmentDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'carrier' => '\DHLUK\Model\SupermodelIoLogisticsSupportingOrganization',
        'product' => '\DHLUK\Model\SupermodelIoLogisticsSupportingProduct',
        'receiver' => 'SupermodelIoLogisticsSupportingOrganization',
        'sender' => 'SupermodelIoLogisticsSupportingOrganization',
        'proofOfDelivery' => '\DHLUK\Model\SupermodelIoLogisticsTrackingProofOfDelivery',
        'totalNumberOfPieces' => 'float',
        'pieceIds' => 'string[]',
        'weight' => 'object',
        'volume' => 'object',
        'loadingMeters' => 'float',
        'dimensions' => '\DHLUK\Model\SupermodelIoLogisticsTrackingShipmentDetailsDimensions',
        'references' => '\DHLUK\Model\SupermodelIoLogisticsTrackingShipmentDetailsReferences[]',
        'dgfroutes' => '\DHLUK\Model\SupermodelIoLogisticsTrackingDgfRoute[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'carrier' => null,
        'product' => null,
        'receiver' => null,
        'sender' => null,
        'proofOfDelivery' => null,
        'totalNumberOfPieces' => null,
        'pieceIds' => null,
        'weight' => null,
        'volume' => null,
        'loadingMeters' => null,
        'dimensions' => null,
        'references' => null,
        'dgfroutes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'carrier' => 'carrier',
        'product' => 'product',
        'receiver' => 'receiver',
        'sender' => 'sender',
        'proofOfDelivery' => 'proofOfDelivery',
        'totalNumberOfPieces' => 'totalNumberOfPieces',
        'pieceIds' => 'pieceIds',
        'weight' => 'weight',
        'volume' => 'volume',
        'loadingMeters' => 'loadingMeters',
        'dimensions' => 'dimensions',
        'references' => 'references',
        'dgfroutes' => 'dgf:routes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'carrier' => 'setCarrier',
        'product' => 'setProduct',
        'receiver' => 'setReceiver',
        'sender' => 'setSender',
        'proofOfDelivery' => 'setProofOfDelivery',
        'totalNumberOfPieces' => 'setTotalNumberOfPieces',
        'pieceIds' => 'setPieceIds',
        'weight' => 'setWeight',
        'volume' => 'setVolume',
        'loadingMeters' => 'setLoadingMeters',
        'dimensions' => 'setDimensions',
        'references' => 'setReferences',
        'dgfroutes' => 'setDgfroutes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'carrier' => 'getCarrier',
        'product' => 'getProduct',
        'receiver' => 'getReceiver',
        'sender' => 'getSender',
        'proofOfDelivery' => 'getProofOfDelivery',
        'totalNumberOfPieces' => 'getTotalNumberOfPieces',
        'pieceIds' => 'getPieceIds',
        'weight' => 'getWeight',
        'volume' => 'getVolume',
        'loadingMeters' => 'getLoadingMeters',
        'dimensions' => 'getDimensions',
        'references' => 'getReferences',
        'dgfroutes' => 'getDgfroutes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['carrier'] = $data['carrier'] ?? null;
        $this->container['product'] = $data['product'] ?? null;
        $this->container['receiver'] = $data['receiver'] ?? null;
        $this->container['sender'] = $data['sender'] ?? null;
        $this->container['proofOfDelivery'] = $data['proofOfDelivery'] ?? null;
        $this->container['totalNumberOfPieces'] = $data['totalNumberOfPieces'] ?? null;
        $this->container['pieceIds'] = $data['pieceIds'] ?? null;
        $this->container['weight'] = $data['weight'] ?? null;
        $this->container['volume'] = $data['volume'] ?? null;
        $this->container['loadingMeters'] = $data['loadingMeters'] ?? null;
        $this->container['dimensions'] = $data['dimensions'] ?? null;
        $this->container['references'] = $data['references'] ?? null;
        $this->container['dgfroutes'] = $data['dgfroutes'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets carrier
     *
     * @return \DHLUK\Model\SupermodelIoLogisticsSupportingOrganization|null
     */
    public function getCarrier()
    {
        return $this->container['carrier'];
    }

    /**
     * Sets carrier
     *
     * @param \DHLUK\Model\SupermodelIoLogisticsSupportingOrganization|null $carrier carrier
     *
     * @return self
     */
    public function setCarrier($carrier)
    {
        $this->container['carrier'] = $carrier;

        return $this;
    }

    /**
     * Gets product
     *
     * @return \DHLUK\Model\SupermodelIoLogisticsSupportingProduct|null
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param \DHLUK\Model\SupermodelIoLogisticsSupportingProduct|null $product product
     *
     * @return self
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets receiver
     *
     * @return SupermodelIoLogisticsSupportingOrganization|null
     */
    public function getReceiver()
    {
        return $this->container['receiver'];
    }

    /**
     * Sets receiver
     *
     * @param SupermodelIoLogisticsSupportingOrganization|null $receiver receiver
     *
     * @return self
     */
    public function setReceiver($receiver)
    {
        $this->container['receiver'] = $receiver;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return SupermodelIoLogisticsSupportingOrganization|null
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param SupermodelIoLogisticsSupportingOrganization|null $sender sender
     *
     * @return self
     */
    public function setSender($sender)
    {
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets proofOfDelivery
     *
     * @return \DHLUK\Model\SupermodelIoLogisticsTrackingProofOfDelivery|null
     */
    public function getProofOfDelivery()
    {
        return $this->container['proofOfDelivery'];
    }

    /**
     * Sets proofOfDelivery
     *
     * @param \DHLUK\Model\SupermodelIoLogisticsTrackingProofOfDelivery|null $proofOfDelivery proofOfDelivery
     *
     * @return self
     */
    public function setProofOfDelivery($proofOfDelivery)
    {
        $this->container['proofOfDelivery'] = $proofOfDelivery;

        return $this;
    }

    /**
     * Gets totalNumberOfPieces
     *
     * @return float|null
     */
    public function getTotalNumberOfPieces()
    {
        return $this->container['totalNumberOfPieces'];
    }

    /**
     * Sets totalNumberOfPieces
     *
     * @param float|null $totalNumberOfPieces totalNumberOfPieces
     *
     * @return self
     */
    public function setTotalNumberOfPieces($totalNumberOfPieces)
    {
        $this->container['totalNumberOfPieces'] = $totalNumberOfPieces;

        return $this;
    }

    /**
     * Gets pieceIds
     *
     * @return string[]|null
     */
    public function getPieceIds()
    {
        return $this->container['pieceIds'];
    }

    /**
     * Sets pieceIds
     *
     * @param string[]|null $pieceIds pieceIds
     *
     * @return self
     */
    public function setPieceIds($pieceIds)
    {
        $this->container['pieceIds'] = $pieceIds;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return object|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param object|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets volume
     *
     * @return object|null
     */
    public function getVolume()
    {
        return $this->container['volume'];
    }

    /**
     * Sets volume
     *
     * @param object|null $volume volume
     *
     * @return self
     */
    public function setVolume($volume)
    {
        $this->container['volume'] = $volume;

        return $this;
    }

    /**
     * Gets loadingMeters
     *
     * @return float|null
     */
    public function getLoadingMeters()
    {
        return $this->container['loadingMeters'];
    }

    /**
     * Sets loadingMeters
     *
     * @param float|null $loadingMeters loadingMeters
     *
     * @return self
     */
    public function setLoadingMeters($loadingMeters)
    {
        $this->container['loadingMeters'] = $loadingMeters;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return \DHLUK\Model\SupermodelIoLogisticsTrackingShipmentDetailsDimensions|null
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param \DHLUK\Model\SupermodelIoLogisticsTrackingShipmentDetailsDimensions|null $dimensions dimensions
     *
     * @return self
     */
    public function setDimensions($dimensions)
    {
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets references
     *
     * @return \DHLUK\Model\SupermodelIoLogisticsTrackingShipmentDetailsReferences[]|null
     */
    public function getReferences()
    {
        return $this->container['references'];
    }

    /**
     * Sets references
     *
     * @param \DHLUK\Model\SupermodelIoLogisticsTrackingShipmentDetailsReferences[]|null $references references
     *
     * @return self
     */
    public function setReferences($references)
    {
        $this->container['references'] = $references;

        return $this;
    }

    /**
     * Gets dgfroutes
     *
     * @return \DHLUK\Model\SupermodelIoLogisticsTrackingDgfRoute[]|null
     */
    public function getDgfroutes()
    {
        return $this->container['dgfroutes'];
    }

    /**
     * Sets dgfroutes
     *
     * @param \DHLUK\Model\SupermodelIoLogisticsTrackingDgfRoute[]|null $dgfroutes dgfroutes
     *
     * @return self
     */
    public function setDgfroutes($dgfroutes)
    {
        $this->container['dgfroutes'] = $dgfroutes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


