<?php
/**
 * ShippingLabelAPIV1Api
 * PHP version 7.2
 *
 * @category Class
 * @package  DHLUK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL eCommerce UK API
 *
 * The DHL eCommerce UK API allows customers and partners to:  - Get available products based on delivery address and parcel size.  - Find servicepoints in the UK or worldwide.  - Create new shipments and optionally return labels.  - Get shipment customs documents.  - Request shipment cancellation.  - Request shipment amendment.  - Regenerate labels ready for reprinting.  - Get details of customer trading locations.  - Request a driver pickup from a customer trading location.  - Get information about driver pickups already requested.  - Track shipments.  - Get DHL eCommerce UK reference data to help you provide valid shipment data from your applications.  - Add a What 3 Words to a domestic shipment.  - Find a DHL Parcels Depot.   **`API Authentications:`** All API operations require an access token to be passed in the Authorization Header for each request. The token type is an OAuth 2.0 Bearer token. To get the token you have to call the Authentication operation of this API and provide **client_id** and **client_secret**. The Access Token is valid for defined amount of time so it is not necessary to request the token for each request. Developers should implement the client application in a way that the token will be requested again only after it expires.  **`Access Token Lifecycle:`** When you receive an Access Token, it is valid for 60 minutes. During this time, you don't have to request new token per each request, but you can simply reuse the same token to access API resources, until the token expires. The invalid token or token expiration will be indicated by HTTP Status Code 401 Unauthorized, then your application has to request new Access Token.    **Recommended sequence for creating a shipment with the Shipping Label API is as follows:**        1.  Use client_id and client_secret to authenticate and obtain an access token using /auth/v1/accesstoken (see details below). A client_id and client_secret can be obtained by registering on the DHL developer portal and then registering an app in the user dashboard.   2.  Prepare valid JSON request as per Shipping Label API POST request schema (see examples below). Use data above depending on your use-case.   3.  Send an API request the correct API endpoint for test/UAT or live/production:          test: https://api-uat.dhl.com/parceluk/shipping/v1/label              live: https://api.dhl.com/parceluk/shipping/v1/label          If the shipment request is valid and accepted then a new shipmentId and optionally labels will be returned in the response.  **Sample Pickup Accounts And Product codes:**    To test using the Shipping Label API, you may use the following accounts and additional settings.        UK Domestic Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F020579  | DHL eCommerce UK domestic labels   orderedProduct            | 220      | Signature At Address Only - Next Day    International Road Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F820579  | DHL eCommerce UK Parcel Connect labels   orderedProduct             | 206      | Parcel Connect               International Air Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F520579 | DHL eCommerce UK International Labels   orderedProduct             | 101     | Worldwide Air
 *
 * The version of the OpenAPI document: 1.3.8
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DHLUK\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use DHLUK\ApiException;
use DHLUK\Configuration;
use DHLUK\HeaderSelector;
use DHLUK\ObjectSerializer;

/**
 * ShippingLabelAPIV1Api Class Doc Comment
 *
 * @category Class
 * @package  DHLUK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ShippingLabelAPIV1Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation shippingV1AmendmentPost
     *
     * Request a shipment amendment and optionally generate labels
     *
     * @param  string $shipmentId shipmentId of the shipment  to be amended (required)
     * @param  \DHLUK\Model\AmendRequest $amendRequest Shipment details in defined JSON schema (required)
     * @param  bool $includeLabel Return an amended label? (optional, default to false)
     * @param  string $format Conditionally mandatory parameter if you want to include a label. Define label format required ZPL, PDF, PNG or JPG. (optional, default to 'ZPL')
     * @param  string $pageSize Page size for label returned. Either label6x4 for 6 by 4 inch label (default) or A4 for A6 label in corner of an A4 page. A4 is not available for format ZPL or any Product where labelType is NOT domestic-uk i.e. UK only. Return labels will also only be returned as 6 by 4 inch label. (optional, default to 'label6x4')
     * @param  string $labelOrientation Label orientation for label returned. Either portrait or landscape (optional, default to 'portrait')
     * @param  string $labelDPI DPI(Dots per Inch) for label returned. Either portrait or landscape. (optional, default to '203')
     *
     * @throws \DHLUK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DHLUK\Model\PostResponseFormat|object[]|object[]|object[]|object[]
     */
    public function shippingV1AmendmentPost($shipmentId, $amendRequest, $includeLabel = false, $format = 'ZPL', $pageSize = 'label6x4', $labelOrientation = 'portrait', $labelDPI = '203')
    {
        list($response) = $this->shippingV1AmendmentPostWithHttpInfo($shipmentId, $amendRequest, $includeLabel, $format, $pageSize, $labelOrientation, $labelDPI);
        return $response;
    }

    /**
     * Operation shippingV1AmendmentPostWithHttpInfo
     *
     * Request a shipment amendment and optionally generate labels
     *
     * @param  string $shipmentId shipmentId of the shipment  to be amended (required)
     * @param  \DHLUK\Model\AmendRequest $amendRequest Shipment details in defined JSON schema (required)
     * @param  bool $includeLabel Return an amended label? (optional, default to false)
     * @param  string $format Conditionally mandatory parameter if you want to include a label. Define label format required ZPL, PDF, PNG or JPG. (optional, default to 'ZPL')
     * @param  string $pageSize Page size for label returned. Either label6x4 for 6 by 4 inch label (default) or A4 for A6 label in corner of an A4 page. A4 is not available for format ZPL or any Product where labelType is NOT domestic-uk i.e. UK only. Return labels will also only be returned as 6 by 4 inch label. (optional, default to 'label6x4')
     * @param  string $labelOrientation Label orientation for label returned. Either portrait or landscape (optional, default to 'portrait')
     * @param  string $labelDPI DPI(Dots per Inch) for label returned. Either portrait or landscape. (optional, default to '203')
     *
     * @throws \DHLUK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DHLUK\Model\PostResponseFormat|object[]|object[]|object[]|object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function shippingV1AmendmentPostWithHttpInfo($shipmentId, $amendRequest, $includeLabel = false, $format = 'ZPL', $pageSize = 'label6x4', $labelOrientation = 'portrait', $labelDPI = '203')
    {
        $request = $this->shippingV1AmendmentPostRequest($shipmentId, $amendRequest, $includeLabel, $format, $pageSize, $labelOrientation, $labelDPI);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 202:
                    if ('\DHLUK\Model\PostResponseFormat' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DHLUK\Model\PostResponseFormat', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('object[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('object[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('object[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('object[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DHLUK\Model\PostResponseFormat';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DHLUK\Model\PostResponseFormat',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shippingV1AmendmentPostAsync
     *
     * Request a shipment amendment and optionally generate labels
     *
     * @param  string $shipmentId shipmentId of the shipment  to be amended (required)
     * @param  \DHLUK\Model\AmendRequest $amendRequest Shipment details in defined JSON schema (required)
     * @param  bool $includeLabel Return an amended label? (optional, default to false)
     * @param  string $format Conditionally mandatory parameter if you want to include a label. Define label format required ZPL, PDF, PNG or JPG. (optional, default to 'ZPL')
     * @param  string $pageSize Page size for label returned. Either label6x4 for 6 by 4 inch label (default) or A4 for A6 label in corner of an A4 page. A4 is not available for format ZPL or any Product where labelType is NOT domestic-uk i.e. UK only. Return labels will also only be returned as 6 by 4 inch label. (optional, default to 'label6x4')
     * @param  string $labelOrientation Label orientation for label returned. Either portrait or landscape (optional, default to 'portrait')
     * @param  string $labelDPI DPI(Dots per Inch) for label returned. Either portrait or landscape. (optional, default to '203')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shippingV1AmendmentPostAsync($shipmentId, $amendRequest, $includeLabel = false, $format = 'ZPL', $pageSize = 'label6x4', $labelOrientation = 'portrait', $labelDPI = '203')
    {
        return $this->shippingV1AmendmentPostAsyncWithHttpInfo($shipmentId, $amendRequest, $includeLabel, $format, $pageSize, $labelOrientation, $labelDPI)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shippingV1AmendmentPostAsyncWithHttpInfo
     *
     * Request a shipment amendment and optionally generate labels
     *
     * @param  string $shipmentId shipmentId of the shipment  to be amended (required)
     * @param  \DHLUK\Model\AmendRequest $amendRequest Shipment details in defined JSON schema (required)
     * @param  bool $includeLabel Return an amended label? (optional, default to false)
     * @param  string $format Conditionally mandatory parameter if you want to include a label. Define label format required ZPL, PDF, PNG or JPG. (optional, default to 'ZPL')
     * @param  string $pageSize Page size for label returned. Either label6x4 for 6 by 4 inch label (default) or A4 for A6 label in corner of an A4 page. A4 is not available for format ZPL or any Product where labelType is NOT domestic-uk i.e. UK only. Return labels will also only be returned as 6 by 4 inch label. (optional, default to 'label6x4')
     * @param  string $labelOrientation Label orientation for label returned. Either portrait or landscape (optional, default to 'portrait')
     * @param  string $labelDPI DPI(Dots per Inch) for label returned. Either portrait or landscape. (optional, default to '203')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shippingV1AmendmentPostAsyncWithHttpInfo($shipmentId, $amendRequest, $includeLabel = false, $format = 'ZPL', $pageSize = 'label6x4', $labelOrientation = 'portrait', $labelDPI = '203')
    {
        $returnType = '\DHLUK\Model\PostResponseFormat';
        $request = $this->shippingV1AmendmentPostRequest($shipmentId, $amendRequest, $includeLabel, $format, $pageSize, $labelOrientation, $labelDPI);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shippingV1AmendmentPost'
     *
     * @param  string $shipmentId shipmentId of the shipment  to be amended (required)
     * @param  \DHLUK\Model\AmendRequest $amendRequest Shipment details in defined JSON schema (required)
     * @param  bool $includeLabel Return an amended label? (optional, default to false)
     * @param  string $format Conditionally mandatory parameter if you want to include a label. Define label format required ZPL, PDF, PNG or JPG. (optional, default to 'ZPL')
     * @param  string $pageSize Page size for label returned. Either label6x4 for 6 by 4 inch label (default) or A4 for A6 label in corner of an A4 page. A4 is not available for format ZPL or any Product where labelType is NOT domestic-uk i.e. UK only. Return labels will also only be returned as 6 by 4 inch label. (optional, default to 'label6x4')
     * @param  string $labelOrientation Label orientation for label returned. Either portrait or landscape (optional, default to 'portrait')
     * @param  string $labelDPI DPI(Dots per Inch) for label returned. Either portrait or landscape. (optional, default to '203')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function shippingV1AmendmentPostRequest($shipmentId, $amendRequest, $includeLabel = false, $format = 'ZPL', $pageSize = 'label6x4', $labelOrientation = 'portrait', $labelDPI = '203')
    {
        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling shippingV1AmendmentPost'
            );
        }
        // verify the required parameter 'amendRequest' is set
        if ($amendRequest === null || (is_array($amendRequest) && count($amendRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $amendRequest when calling shippingV1AmendmentPost'
            );
        }

        $resourcePath = '/shipping/v1/amendment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($shipmentId !== null) {
            if('form' === 'form' && is_array($shipmentId)) {
                foreach($shipmentId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['shipmentId'] = $shipmentId;
            }
        }
        // query params
        if ($includeLabel !== null) {
            if('form' === 'form' && is_array($includeLabel)) {
                foreach($includeLabel as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['includeLabel'] = $includeLabel;
            }
        }
        // query params
        if ($format !== null) {
            if('form' === 'form' && is_array($format)) {
                foreach($format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['format'] = $format;
            }
        }
        // query params
        if ($pageSize !== null) {
            if('form' === 'form' && is_array($pageSize)) {
                foreach($pageSize as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $pageSize;
            }
        }
        // query params
        if ($labelOrientation !== null) {
            if('form' === 'form' && is_array($labelOrientation)) {
                foreach($labelOrientation as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['labelOrientation'] = $labelOrientation;
            }
        }
        // query params
        if ($labelDPI !== null) {
            if('form' === 'form' && is_array($labelDPI)) {
                foreach($labelDPI as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['labelDPI'] = $labelDPI;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($amendRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($amendRequest));
            } else {
                $httpBody = $amendRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shippingV1CancellationPost
     *
     * Request shipment cancellation
     *
     * @param  object[] $requestBody Cancellation request details in defined JSON schema (required)
     *
     * @throws \DHLUK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shippingV1CancellationPost($requestBody)
    {
        $this->shippingV1CancellationPostWithHttpInfo($requestBody);
    }

    /**
     * Operation shippingV1CancellationPostWithHttpInfo
     *
     * Request shipment cancellation
     *
     * @param  object[] $requestBody Cancellation request details in defined JSON schema (required)
     *
     * @throws \DHLUK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shippingV1CancellationPostWithHttpInfo($requestBody)
    {
        $request = $this->shippingV1CancellationPostRequest($requestBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shippingV1CancellationPostAsync
     *
     * Request shipment cancellation
     *
     * @param  object[] $requestBody Cancellation request details in defined JSON schema (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shippingV1CancellationPostAsync($requestBody)
    {
        return $this->shippingV1CancellationPostAsyncWithHttpInfo($requestBody)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shippingV1CancellationPostAsyncWithHttpInfo
     *
     * Request shipment cancellation
     *
     * @param  object[] $requestBody Cancellation request details in defined JSON schema (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shippingV1CancellationPostAsyncWithHttpInfo($requestBody)
    {
        $returnType = '';
        $request = $this->shippingV1CancellationPostRequest($requestBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shippingV1CancellationPost'
     *
     * @param  object[] $requestBody Cancellation request details in defined JSON schema (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function shippingV1CancellationPostRequest($requestBody)
    {
        // verify the required parameter 'requestBody' is set
        if ($requestBody === null || (is_array($requestBody) && count($requestBody) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $requestBody when calling shippingV1CancellationPost'
            );
        }

        $resourcePath = '/shipping/v1/cancellation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($requestBody)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($requestBody));
            } else {
                $httpBody = $requestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shippingV1LabelPost
     *
     * Create a shipment and optionally a label
     *
     * @param  \DHLUK\Model\PostRequestFormat $postRequestFormat Shipment details in defined JSON schema (required)
     * @param  string $includeLabel Allows: a) INCLUDE (default). Returns base64 encoded label data in chosen format in response message. b) DEFERRED (no label returned). Label will be created for later retrieval via  Label API. c) DROPOFF - return a shipment drop off barcode ready to be placed in an email for a servicepoint drop off. (optional, default to 'INCLUDE')
     * @param  string $format Conditionally mandatory parameter if you want to include a label. Define label format required ZPL, PDF, PNG, JPG, PNG_RAW or JPG_RAW. PNG or JPG will return a base 64 encoded zip file containing all the label images.PNG_RAW and JPG_RAW will return a base 64 encoded file(Un Zipped format) in array containing individual label image. (optional, default to 'ZPL')
     * @param  string $pageSize Page size for label returned. Either label6x4 for 6 by 4 inch label (default) or A4 for A6 label in corner of an A4 page. A4 is not available for format ZPL or any Product where labelType is NOT domestic-uk i.e. UK only. Return labels will also only be returned as 6 by 4 inch label. (optional, default to 'label6x4')
     * @param  string $labelOrientation Label orientation for label returned. Either portrait or landscape (optional, default to 'portrait')
     * @param  string $labelDPI DPI(Dots per Inch) for label returned. (optional, default to '203')
     *
     * @throws \DHLUK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DHLUK\Model\PostResponseFormat|object[]|object[]|object[]|object[]
     */
    public function shippingV1LabelPost($postRequestFormat, $includeLabel = 'INCLUDE', $format = 'ZPL', $pageSize = 'label6x4', $labelOrientation = 'portrait', $labelDPI = '203')
    {
        list($response) = $this->shippingV1LabelPostWithHttpInfo($postRequestFormat, $includeLabel, $format, $pageSize, $labelOrientation, $labelDPI);
        return $response;
    }

    /**
     * Operation shippingV1LabelPostWithHttpInfo
     *
     * Create a shipment and optionally a label
     *
     * @param  \DHLUK\Model\PostRequestFormat $postRequestFormat Shipment details in defined JSON schema (required)
     * @param  string $includeLabel Allows: a) INCLUDE (default). Returns base64 encoded label data in chosen format in response message. b) DEFERRED (no label returned). Label will be created for later retrieval via  Label API. c) DROPOFF - return a shipment drop off barcode ready to be placed in an email for a servicepoint drop off. (optional, default to 'INCLUDE')
     * @param  string $format Conditionally mandatory parameter if you want to include a label. Define label format required ZPL, PDF, PNG, JPG, PNG_RAW or JPG_RAW. PNG or JPG will return a base 64 encoded zip file containing all the label images.PNG_RAW and JPG_RAW will return a base 64 encoded file(Un Zipped format) in array containing individual label image. (optional, default to 'ZPL')
     * @param  string $pageSize Page size for label returned. Either label6x4 for 6 by 4 inch label (default) or A4 for A6 label in corner of an A4 page. A4 is not available for format ZPL or any Product where labelType is NOT domestic-uk i.e. UK only. Return labels will also only be returned as 6 by 4 inch label. (optional, default to 'label6x4')
     * @param  string $labelOrientation Label orientation for label returned. Either portrait or landscape (optional, default to 'portrait')
     * @param  string $labelDPI DPI(Dots per Inch) for label returned. (optional, default to '203')
     *
     * @throws \DHLUK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DHLUK\Model\PostResponseFormat|object[]|object[]|object[]|object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function shippingV1LabelPostWithHttpInfo($postRequestFormat, $includeLabel = 'INCLUDE', $format = 'ZPL', $pageSize = 'label6x4', $labelOrientation = 'portrait', $labelDPI = '203')
    {
        $request = $this->shippingV1LabelPostRequest($postRequestFormat, $includeLabel, $format, $pageSize, $labelOrientation, $labelDPI);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 202:
                    if ('\DHLUK\Model\PostResponseFormat' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DHLUK\Model\PostResponseFormat', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('object[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('object[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('object[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('object[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DHLUK\Model\PostResponseFormat';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DHLUK\Model\PostResponseFormat',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                case 401:
                case 422:
                case 429:
                    $e->setResponseObject($e->getResponseBody());
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shippingV1LabelPostAsync
     *
     * Create a shipment and optionally a label
     *
     * @param  \DHLUK\Model\PostRequestFormat $postRequestFormat Shipment details in defined JSON schema (required)
     * @param  string $includeLabel Allows: a) INCLUDE (default). Returns base64 encoded label data in chosen format in response message. b) DEFERRED (no label returned). Label will be created for later retrieval via  Label API. c) DROPOFF - return a shipment drop off barcode ready to be placed in an email for a servicepoint drop off. (optional, default to 'INCLUDE')
     * @param  string $format Conditionally mandatory parameter if you want to include a label. Define label format required ZPL, PDF, PNG, JPG, PNG_RAW or JPG_RAW. PNG or JPG will return a base 64 encoded zip file containing all the label images.PNG_RAW and JPG_RAW will return a base 64 encoded file(Un Zipped format) in array containing individual label image. (optional, default to 'ZPL')
     * @param  string $pageSize Page size for label returned. Either label6x4 for 6 by 4 inch label (default) or A4 for A6 label in corner of an A4 page. A4 is not available for format ZPL or any Product where labelType is NOT domestic-uk i.e. UK only. Return labels will also only be returned as 6 by 4 inch label. (optional, default to 'label6x4')
     * @param  string $labelOrientation Label orientation for label returned. Either portrait or landscape (optional, default to 'portrait')
     * @param  string $labelDPI DPI(Dots per Inch) for label returned. (optional, default to '203')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shippingV1LabelPostAsync($postRequestFormat, $includeLabel = 'INCLUDE', $format = 'ZPL', $pageSize = 'label6x4', $labelOrientation = 'portrait', $labelDPI = '203')
    {
        return $this->shippingV1LabelPostAsyncWithHttpInfo($postRequestFormat, $includeLabel, $format, $pageSize, $labelOrientation, $labelDPI)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shippingV1LabelPostAsyncWithHttpInfo
     *
     * Create a shipment and optionally a label
     *
     * @param  \DHLUK\Model\PostRequestFormat $postRequestFormat Shipment details in defined JSON schema (required)
     * @param  string $includeLabel Allows: a) INCLUDE (default). Returns base64 encoded label data in chosen format in response message. b) DEFERRED (no label returned). Label will be created for later retrieval via  Label API. c) DROPOFF - return a shipment drop off barcode ready to be placed in an email for a servicepoint drop off. (optional, default to 'INCLUDE')
     * @param  string $format Conditionally mandatory parameter if you want to include a label. Define label format required ZPL, PDF, PNG, JPG, PNG_RAW or JPG_RAW. PNG or JPG will return a base 64 encoded zip file containing all the label images.PNG_RAW and JPG_RAW will return a base 64 encoded file(Un Zipped format) in array containing individual label image. (optional, default to 'ZPL')
     * @param  string $pageSize Page size for label returned. Either label6x4 for 6 by 4 inch label (default) or A4 for A6 label in corner of an A4 page. A4 is not available for format ZPL or any Product where labelType is NOT domestic-uk i.e. UK only. Return labels will also only be returned as 6 by 4 inch label. (optional, default to 'label6x4')
     * @param  string $labelOrientation Label orientation for label returned. Either portrait or landscape (optional, default to 'portrait')
     * @param  string $labelDPI DPI(Dots per Inch) for label returned. (optional, default to '203')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shippingV1LabelPostAsyncWithHttpInfo($postRequestFormat, $includeLabel = 'INCLUDE', $format = 'ZPL', $pageSize = 'label6x4', $labelOrientation = 'portrait', $labelDPI = '203')
    {
        $returnType = '\DHLUK\Model\PostResponseFormat';
        $request = $this->shippingV1LabelPostRequest($postRequestFormat, $includeLabel, $format, $pageSize, $labelOrientation, $labelDPI);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shippingV1LabelPost'
     *
     * @param  \DHLUK\Model\PostRequestFormat $postRequestFormat Shipment details in defined JSON schema (required)
     * @param  string $includeLabel Allows: a) INCLUDE (default). Returns base64 encoded label data in chosen format in response message. b) DEFERRED (no label returned). Label will be created for later retrieval via  Label API. c) DROPOFF - return a shipment drop off barcode ready to be placed in an email for a servicepoint drop off. (optional, default to 'INCLUDE')
     * @param  string $format Conditionally mandatory parameter if you want to include a label. Define label format required ZPL, PDF, PNG, JPG, PNG_RAW or JPG_RAW. PNG or JPG will return a base 64 encoded zip file containing all the label images.PNG_RAW and JPG_RAW will return a base 64 encoded file(Un Zipped format) in array containing individual label image. (optional, default to 'ZPL')
     * @param  string $pageSize Page size for label returned. Either label6x4 for 6 by 4 inch label (default) or A4 for A6 label in corner of an A4 page. A4 is not available for format ZPL or any Product where labelType is NOT domestic-uk i.e. UK only. Return labels will also only be returned as 6 by 4 inch label. (optional, default to 'label6x4')
     * @param  string $labelOrientation Label orientation for label returned. Either portrait or landscape (optional, default to 'portrait')
     * @param  string $labelDPI DPI(Dots per Inch) for label returned. (optional, default to '203')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function shippingV1LabelPostRequest($postRequestFormat, $includeLabel = 'INCLUDE', $format = 'ZPL', $pageSize = 'label6x4', $labelOrientation = 'portrait', $labelDPI = '203')
    {
        // verify the required parameter 'postRequestFormat' is set
        if ($postRequestFormat === null || (is_array($postRequestFormat) && count($postRequestFormat) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $postRequestFormat when calling shippingV1LabelPost'
            );
        }

        $resourcePath = '/shipping/v1/label';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($includeLabel !== null) {
            if('form' === 'form' && is_array($includeLabel)) {
                foreach($includeLabel as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['includeLabel'] = $includeLabel;
            }
        }
        // query params
        if ($format !== null) {
            if('form' === 'form' && is_array($format)) {
                foreach($format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['format'] = $format;
            }
        }
        // query params
        if ($pageSize !== null) {
            if('form' === 'form' && is_array($pageSize)) {
                foreach($pageSize as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $pageSize;
            }
        }
        // query params
        if ($labelOrientation !== null) {
            if('form' === 'form' && is_array($labelOrientation)) {
                foreach($labelOrientation as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['labelOrientation'] = $labelOrientation;
            }
        }
        // query params
        if ($labelDPI !== null) {
            if('form' === 'form' && is_array($labelDPI)) {
                foreach($labelDPI as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['labelDPI'] = $labelDPI;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($postRequestFormat)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($postRequestFormat));
            } else {
                $httpBody = $postRequestFormat;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
