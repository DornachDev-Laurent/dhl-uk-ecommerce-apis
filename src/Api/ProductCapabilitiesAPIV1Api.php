<?php
/**
 * ProductCapabilitiesAPIV1Api
 * PHP version 7.2
 *
 * @category Class
 * @package  DHLUK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL eCommerce UK API
 *
 * The DHL eCommerce UK API allows customers and partners to:  - Get available products based on delivery address and parcel size.  - Find servicepoints in the UK or worldwide.  - Create new shipments and optionally return labels.  - Get shipment customs documents.  - Request shipment cancellation.  - Request shipment amendment.  - Regenerate labels ready for reprinting.  - Get details of customer trading locations.  - Request a driver pickup from a customer trading location.  - Get information about driver pickups already requested.  - Track shipments.  - Get DHL eCommerce UK reference data to help you provide valid shipment data from your applications.  - Add a What 3 Words to a domestic shipment.  - Find a DHL Parcels Depot.   **`API Authentications:`** All API operations require an access token to be passed in the Authorization Header for each request. The token type is an OAuth 2.0 Bearer token. To get the token you have to call the Authentication operation of this API and provide **client_id** and **client_secret**. The Access Token is valid for defined amount of time so it is not necessary to request the token for each request. Developers should implement the client application in a way that the token will be requested again only after it expires.  **`Access Token Lifecycle:`** When you receive an Access Token, it is valid for 60 minutes. During this time, you don't have to request new token per each request, but you can simply reuse the same token to access API resources, until the token expires. The invalid token or token expiration will be indicated by HTTP Status Code 401 Unauthorized, then your application has to request new Access Token.    **Recommended sequence for creating a shipment with the Shipping Label API is as follows:**        1.  Use client_id and client_secret to authenticate and obtain an access token using /auth/v1/accesstoken (see details below). A client_id and client_secret can be obtained by registering on the DHL developer portal and then registering an app in the user dashboard.   2.  Prepare valid JSON request as per Shipping Label API POST request schema (see examples below). Use data above depending on your use-case.   3.  Send an API request the correct API endpoint for test/UAT or live/production:          test: https://api-uat.dhl.com/parceluk/shipping/v1/label              live: https://api.dhl.com/parceluk/shipping/v1/label          If the shipment request is valid and accepted then a new shipmentId and optionally labels will be returned in the response.  **Sample Pickup Accounts And Product codes:**    To test using the Shipping Label API, you may use the following accounts and additional settings.        UK Domestic Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F020579  | DHL eCommerce UK domestic labels   orderedProduct            | 220      | Signature At Address Only - Next Day    International Road Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F820579  | DHL eCommerce UK Parcel Connect labels   orderedProduct             | 206      | Parcel Connect               International Air Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F520579 | DHL eCommerce UK International Labels   orderedProduct             | 101     | Worldwide Air
 *
 * The version of the OpenAPI document: 1.3.8
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DHLUK\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use DHLUK\ApiException;
use DHLUK\Configuration;
use DHLUK\HeaderSelector;
use DHLUK\ObjectSerializer;

/**
 * ProductCapabilitiesAPIV1Api Class Doc Comment
 *
 * @category Class
 * @package  DHLUK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProductCapabilitiesAPIV1Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation productcapabilitiesGetproducts
     *
     * Get available products
     *
     * @param  string $originCountryCode ISO 2 character country code of origin address (Currently only GB supported) (required)
     * @param  string $originPostalCode Postal code of origin address (Currently only GB postal codes supported) (required)
     * @param  string $destinationCountryCode ISO 2 character country code of destination address (required)
     * @param  string $destinationPostalCode Postal code of destination address (required)
     * @param  string $destinationRecipientType Recipient type, either business or residential. (required)
     * @param  float $parcels Number of parcels being sent in this shipment (required)
     * @param  float $weight Gross weight of the shipment including packaging (required)
     * @param  string $destinationAddressType Optional type of address required for delivery. For example if servicePoint then only service point products will be returned if available. (optional, default to 'doorstep')
     * @param  float $length Total length of the shipment including packaging (optional)
     * @param  float $width Total width of the shipment including packaging (optional)
     * @param  float $height Total height of the shipment including packaging (optional)
     * @param  float $diameter Total diameter of the shipment including packaging (optional)
     * @param  string $internationalProductFilter Optional filter for international export products, either best or full. best &#x3D; best available Air and Road products returned. Maximum of one air and one road product will be returned. full &#x3D; full list of available products will be returned. (optional, default to 'full')
     * @param  string[] $accountTypes Optionally supply one or more accountTypes to filter products by (optional)
     * @param  string[] $doorstepDeliveryTypes Optionally supply one or more doorstepDeliveryTypes to filter products by. doorstepOnly will only return products where neighbourDelivery and secureLocationDelivery are not enabled. neighbourDelivery will only return products where neighbourDelivery is available. secureLocationDelivery will only return products where secureLocationDelivery is available. Using doorstepOnly in combination with neighbourDelivery or secureLocationDelivery is not recommended as no products will be returned (optional)
     * @param  string $currency ISO currency code for shipment total value. Required for countries where IOSS VAT rules apply (European Union). (optional)
     * @param  float $totalValue Total value of shipment in currency specified. Required for countries where IOSS VAT rules apply (European Union). (optional)
     * @param  string $pickupAccount Optional specific pickup account number (optional)
     * @param  bool $exchangeOnDelivery Is an exchange on delivery required? (optional)
     *
     * @throws \DHLUK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DHLUK\Model\Products|object[]
     */
    public function productcapabilitiesGetproducts($originCountryCode, $originPostalCode, $destinationCountryCode, $destinationPostalCode, $destinationRecipientType, $parcels, $weight, $destinationAddressType = 'doorstep', $length = null, $width = null, $height = null, $diameter = null, $internationalProductFilter = 'full', $accountTypes = null, $doorstepDeliveryTypes = null, $currency = null, $totalValue = null, $pickupAccount = null, $exchangeOnDelivery = null)
    {
        list($response) = $this->productcapabilitiesGetproductsWithHttpInfo($originCountryCode, $originPostalCode, $destinationCountryCode, $destinationPostalCode, $destinationRecipientType, $parcels, $weight, $destinationAddressType, $length, $width, $height, $diameter, $internationalProductFilter, $accountTypes, $doorstepDeliveryTypes, $currency, $totalValue, $pickupAccount, $exchangeOnDelivery);
        return $response;
    }

    /**
     * Operation productcapabilitiesGetproductsWithHttpInfo
     *
     * Get available products
     *
     * @param  string $originCountryCode ISO 2 character country code of origin address (Currently only GB supported) (required)
     * @param  string $originPostalCode Postal code of origin address (Currently only GB postal codes supported) (required)
     * @param  string $destinationCountryCode ISO 2 character country code of destination address (required)
     * @param  string $destinationPostalCode Postal code of destination address (required)
     * @param  string $destinationRecipientType Recipient type, either business or residential. (required)
     * @param  float $parcels Number of parcels being sent in this shipment (required)
     * @param  float $weight Gross weight of the shipment including packaging (required)
     * @param  string $destinationAddressType Optional type of address required for delivery. For example if servicePoint then only service point products will be returned if available. (optional, default to 'doorstep')
     * @param  float $length Total length of the shipment including packaging (optional)
     * @param  float $width Total width of the shipment including packaging (optional)
     * @param  float $height Total height of the shipment including packaging (optional)
     * @param  float $diameter Total diameter of the shipment including packaging (optional)
     * @param  string $internationalProductFilter Optional filter for international export products, either best or full. best &#x3D; best available Air and Road products returned. Maximum of one air and one road product will be returned. full &#x3D; full list of available products will be returned. (optional, default to 'full')
     * @param  string[] $accountTypes Optionally supply one or more accountTypes to filter products by (optional)
     * @param  string[] $doorstepDeliveryTypes Optionally supply one or more doorstepDeliveryTypes to filter products by. doorstepOnly will only return products where neighbourDelivery and secureLocationDelivery are not enabled. neighbourDelivery will only return products where neighbourDelivery is available. secureLocationDelivery will only return products where secureLocationDelivery is available. Using doorstepOnly in combination with neighbourDelivery or secureLocationDelivery is not recommended as no products will be returned (optional)
     * @param  string $currency ISO currency code for shipment total value. Required for countries where IOSS VAT rules apply (European Union). (optional)
     * @param  float $totalValue Total value of shipment in currency specified. Required for countries where IOSS VAT rules apply (European Union). (optional)
     * @param  string $pickupAccount Optional specific pickup account number (optional)
     * @param  bool $exchangeOnDelivery Is an exchange on delivery required? (optional)
     *
     * @throws \DHLUK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DHLUK\Model\Products|object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function productcapabilitiesGetproductsWithHttpInfo($originCountryCode, $originPostalCode, $destinationCountryCode, $destinationPostalCode, $destinationRecipientType, $parcels, $weight, $destinationAddressType = 'doorstep', $length = null, $width = null, $height = null, $diameter = null, $internationalProductFilter = 'full', $accountTypes = null, $doorstepDeliveryTypes = null, $currency = null, $totalValue = null, $pickupAccount = null, $exchangeOnDelivery = null)
    {
        $request = $this->productcapabilitiesGetproductsRequest($originCountryCode, $originPostalCode, $destinationCountryCode, $destinationPostalCode, $destinationRecipientType, $parcels, $weight, $destinationAddressType, $length, $width, $height, $diameter, $internationalProductFilter, $accountTypes, $doorstepDeliveryTypes, $currency, $totalValue, $pickupAccount, $exchangeOnDelivery);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\DHLUK\Model\Products' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DHLUK\Model\Products', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('object[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DHLUK\Model\Products';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DHLUK\Model\Products',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productcapabilitiesGetproductsAsync
     *
     * Get available products
     *
     * @param  string $originCountryCode ISO 2 character country code of origin address (Currently only GB supported) (required)
     * @param  string $originPostalCode Postal code of origin address (Currently only GB postal codes supported) (required)
     * @param  string $destinationCountryCode ISO 2 character country code of destination address (required)
     * @param  string $destinationPostalCode Postal code of destination address (required)
     * @param  string $destinationRecipientType Recipient type, either business or residential. (required)
     * @param  float $parcels Number of parcels being sent in this shipment (required)
     * @param  float $weight Gross weight of the shipment including packaging (required)
     * @param  string $destinationAddressType Optional type of address required for delivery. For example if servicePoint then only service point products will be returned if available. (optional, default to 'doorstep')
     * @param  float $length Total length of the shipment including packaging (optional)
     * @param  float $width Total width of the shipment including packaging (optional)
     * @param  float $height Total height of the shipment including packaging (optional)
     * @param  float $diameter Total diameter of the shipment including packaging (optional)
     * @param  string $internationalProductFilter Optional filter for international export products, either best or full. best &#x3D; best available Air and Road products returned. Maximum of one air and one road product will be returned. full &#x3D; full list of available products will be returned. (optional, default to 'full')
     * @param  string[] $accountTypes Optionally supply one or more accountTypes to filter products by (optional)
     * @param  string[] $doorstepDeliveryTypes Optionally supply one or more doorstepDeliveryTypes to filter products by. doorstepOnly will only return products where neighbourDelivery and secureLocationDelivery are not enabled. neighbourDelivery will only return products where neighbourDelivery is available. secureLocationDelivery will only return products where secureLocationDelivery is available. Using doorstepOnly in combination with neighbourDelivery or secureLocationDelivery is not recommended as no products will be returned (optional)
     * @param  string $currency ISO currency code for shipment total value. Required for countries where IOSS VAT rules apply (European Union). (optional)
     * @param  float $totalValue Total value of shipment in currency specified. Required for countries where IOSS VAT rules apply (European Union). (optional)
     * @param  string $pickupAccount Optional specific pickup account number (optional)
     * @param  bool $exchangeOnDelivery Is an exchange on delivery required? (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productcapabilitiesGetproductsAsync($originCountryCode, $originPostalCode, $destinationCountryCode, $destinationPostalCode, $destinationRecipientType, $parcels, $weight, $destinationAddressType = 'doorstep', $length = null, $width = null, $height = null, $diameter = null, $internationalProductFilter = 'full', $accountTypes = null, $doorstepDeliveryTypes = null, $currency = null, $totalValue = null, $pickupAccount = null, $exchangeOnDelivery = null)
    {
        return $this->productcapabilitiesGetproductsAsyncWithHttpInfo($originCountryCode, $originPostalCode, $destinationCountryCode, $destinationPostalCode, $destinationRecipientType, $parcels, $weight, $destinationAddressType, $length, $width, $height, $diameter, $internationalProductFilter, $accountTypes, $doorstepDeliveryTypes, $currency, $totalValue, $pickupAccount, $exchangeOnDelivery)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productcapabilitiesGetproductsAsyncWithHttpInfo
     *
     * Get available products
     *
     * @param  string $originCountryCode ISO 2 character country code of origin address (Currently only GB supported) (required)
     * @param  string $originPostalCode Postal code of origin address (Currently only GB postal codes supported) (required)
     * @param  string $destinationCountryCode ISO 2 character country code of destination address (required)
     * @param  string $destinationPostalCode Postal code of destination address (required)
     * @param  string $destinationRecipientType Recipient type, either business or residential. (required)
     * @param  float $parcels Number of parcels being sent in this shipment (required)
     * @param  float $weight Gross weight of the shipment including packaging (required)
     * @param  string $destinationAddressType Optional type of address required for delivery. For example if servicePoint then only service point products will be returned if available. (optional, default to 'doorstep')
     * @param  float $length Total length of the shipment including packaging (optional)
     * @param  float $width Total width of the shipment including packaging (optional)
     * @param  float $height Total height of the shipment including packaging (optional)
     * @param  float $diameter Total diameter of the shipment including packaging (optional)
     * @param  string $internationalProductFilter Optional filter for international export products, either best or full. best &#x3D; best available Air and Road products returned. Maximum of one air and one road product will be returned. full &#x3D; full list of available products will be returned. (optional, default to 'full')
     * @param  string[] $accountTypes Optionally supply one or more accountTypes to filter products by (optional)
     * @param  string[] $doorstepDeliveryTypes Optionally supply one or more doorstepDeliveryTypes to filter products by. doorstepOnly will only return products where neighbourDelivery and secureLocationDelivery are not enabled. neighbourDelivery will only return products where neighbourDelivery is available. secureLocationDelivery will only return products where secureLocationDelivery is available. Using doorstepOnly in combination with neighbourDelivery or secureLocationDelivery is not recommended as no products will be returned (optional)
     * @param  string $currency ISO currency code for shipment total value. Required for countries where IOSS VAT rules apply (European Union). (optional)
     * @param  float $totalValue Total value of shipment in currency specified. Required for countries where IOSS VAT rules apply (European Union). (optional)
     * @param  string $pickupAccount Optional specific pickup account number (optional)
     * @param  bool $exchangeOnDelivery Is an exchange on delivery required? (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productcapabilitiesGetproductsAsyncWithHttpInfo($originCountryCode, $originPostalCode, $destinationCountryCode, $destinationPostalCode, $destinationRecipientType, $parcels, $weight, $destinationAddressType = 'doorstep', $length = null, $width = null, $height = null, $diameter = null, $internationalProductFilter = 'full', $accountTypes = null, $doorstepDeliveryTypes = null, $currency = null, $totalValue = null, $pickupAccount = null, $exchangeOnDelivery = null)
    {
        $returnType = '\DHLUK\Model\Products';
        $request = $this->productcapabilitiesGetproductsRequest($originCountryCode, $originPostalCode, $destinationCountryCode, $destinationPostalCode, $destinationRecipientType, $parcels, $weight, $destinationAddressType, $length, $width, $height, $diameter, $internationalProductFilter, $accountTypes, $doorstepDeliveryTypes, $currency, $totalValue, $pickupAccount, $exchangeOnDelivery);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productcapabilitiesGetproducts'
     *
     * @param  string $originCountryCode ISO 2 character country code of origin address (Currently only GB supported) (required)
     * @param  string $originPostalCode Postal code of origin address (Currently only GB postal codes supported) (required)
     * @param  string $destinationCountryCode ISO 2 character country code of destination address (required)
     * @param  string $destinationPostalCode Postal code of destination address (required)
     * @param  string $destinationRecipientType Recipient type, either business or residential. (required)
     * @param  float $parcels Number of parcels being sent in this shipment (required)
     * @param  float $weight Gross weight of the shipment including packaging (required)
     * @param  string $destinationAddressType Optional type of address required for delivery. For example if servicePoint then only service point products will be returned if available. (optional, default to 'doorstep')
     * @param  float $length Total length of the shipment including packaging (optional)
     * @param  float $width Total width of the shipment including packaging (optional)
     * @param  float $height Total height of the shipment including packaging (optional)
     * @param  float $diameter Total diameter of the shipment including packaging (optional)
     * @param  string $internationalProductFilter Optional filter for international export products, either best or full. best &#x3D; best available Air and Road products returned. Maximum of one air and one road product will be returned. full &#x3D; full list of available products will be returned. (optional, default to 'full')
     * @param  string[] $accountTypes Optionally supply one or more accountTypes to filter products by (optional)
     * @param  string[] $doorstepDeliveryTypes Optionally supply one or more doorstepDeliveryTypes to filter products by. doorstepOnly will only return products where neighbourDelivery and secureLocationDelivery are not enabled. neighbourDelivery will only return products where neighbourDelivery is available. secureLocationDelivery will only return products where secureLocationDelivery is available. Using doorstepOnly in combination with neighbourDelivery or secureLocationDelivery is not recommended as no products will be returned (optional)
     * @param  string $currency ISO currency code for shipment total value. Required for countries where IOSS VAT rules apply (European Union). (optional)
     * @param  float $totalValue Total value of shipment in currency specified. Required for countries where IOSS VAT rules apply (European Union). (optional)
     * @param  string $pickupAccount Optional specific pickup account number (optional)
     * @param  bool $exchangeOnDelivery Is an exchange on delivery required? (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productcapabilitiesGetproductsRequest($originCountryCode, $originPostalCode, $destinationCountryCode, $destinationPostalCode, $destinationRecipientType, $parcels, $weight, $destinationAddressType = 'doorstep', $length = null, $width = null, $height = null, $diameter = null, $internationalProductFilter = 'full', $accountTypes = null, $doorstepDeliveryTypes = null, $currency = null, $totalValue = null, $pickupAccount = null, $exchangeOnDelivery = null)
    {
        // verify the required parameter 'originCountryCode' is set
        if ($originCountryCode === null || (is_array($originCountryCode) && count($originCountryCode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $originCountryCode when calling productcapabilitiesGetproducts'
            );
        }
        // verify the required parameter 'originPostalCode' is set
        if ($originPostalCode === null || (is_array($originPostalCode) && count($originPostalCode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $originPostalCode when calling productcapabilitiesGetproducts'
            );
        }
        // verify the required parameter 'destinationCountryCode' is set
        if ($destinationCountryCode === null || (is_array($destinationCountryCode) && count($destinationCountryCode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $destinationCountryCode when calling productcapabilitiesGetproducts'
            );
        }
        // verify the required parameter 'destinationPostalCode' is set
        if ($destinationPostalCode === null || (is_array($destinationPostalCode) && count($destinationPostalCode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $destinationPostalCode when calling productcapabilitiesGetproducts'
            );
        }
        // verify the required parameter 'destinationRecipientType' is set
        if ($destinationRecipientType === null || (is_array($destinationRecipientType) && count($destinationRecipientType) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $destinationRecipientType when calling productcapabilitiesGetproducts'
            );
        }
        // verify the required parameter 'parcels' is set
        if ($parcels === null || (is_array($parcels) && count($parcels) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parcels when calling productcapabilitiesGetproducts'
            );
        }
        // verify the required parameter 'weight' is set
        if ($weight === null || (is_array($weight) && count($weight) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $weight when calling productcapabilitiesGetproducts'
            );
        }

        $resourcePath = '/referencedata/v1/productcapabilities';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($originCountryCode !== null) {
            if('form' === 'form' && is_array($originCountryCode)) {
                foreach($originCountryCode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['originCountryCode'] = $originCountryCode;
            }
        }
        // query params
        if ($originPostalCode !== null) {
            if('form' === 'form' && is_array($originPostalCode)) {
                foreach($originPostalCode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['originPostalCode'] = $originPostalCode;
            }
        }
        // query params
        if ($destinationCountryCode !== null) {
            if('form' === 'form' && is_array($destinationCountryCode)) {
                foreach($destinationCountryCode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['destinationCountryCode'] = $destinationCountryCode;
            }
        }
        // query params
        if ($destinationPostalCode !== null) {
            if('form' === 'form' && is_array($destinationPostalCode)) {
                foreach($destinationPostalCode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['destinationPostalCode'] = $destinationPostalCode;
            }
        }
        // query params
        if ($destinationRecipientType !== null) {
            if('form' === 'form' && is_array($destinationRecipientType)) {
                foreach($destinationRecipientType as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['destinationRecipientType'] = $destinationRecipientType;
            }
        }
        // query params
        if ($destinationAddressType !== null) {
            if('form' === 'form' && is_array($destinationAddressType)) {
                foreach($destinationAddressType as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['destinationAddressType'] = $destinationAddressType;
            }
        }
        // query params
        if ($parcels !== null) {
            if('form' === 'form' && is_array($parcels)) {
                foreach($parcels as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['parcels'] = $parcels;
            }
        }
        // query params
        if ($weight !== null) {
            if('form' === 'form' && is_array($weight)) {
                foreach($weight as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['weight'] = $weight;
            }
        }
        // query params
        if ($length !== null) {
            if('form' === 'form' && is_array($length)) {
                foreach($length as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['length'] = $length;
            }
        }
        // query params
        if ($width !== null) {
            if('form' === 'form' && is_array($width)) {
                foreach($width as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['width'] = $width;
            }
        }
        // query params
        if ($height !== null) {
            if('form' === 'form' && is_array($height)) {
                foreach($height as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['height'] = $height;
            }
        }
        // query params
        if ($diameter !== null) {
            if('form' === 'form' && is_array($diameter)) {
                foreach($diameter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['diameter'] = $diameter;
            }
        }
        // query params
        if ($internationalProductFilter !== null) {
            if('form' === 'form' && is_array($internationalProductFilter)) {
                foreach($internationalProductFilter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['internationalProductFilter'] = $internationalProductFilter;
            }
        }
        // query params
        if (is_array($accountTypes)) {
            $accountTypes = ObjectSerializer::serializeCollection($accountTypes, 'form', true);
        }
        if ($accountTypes !== null) {
            $queryParams['accountTypes'] = $accountTypes;
        }
        // query params
        if (is_array($doorstepDeliveryTypes)) {
            $doorstepDeliveryTypes = ObjectSerializer::serializeCollection($doorstepDeliveryTypes, 'form', true);
        }
        if ($doorstepDeliveryTypes !== null) {
            $queryParams['doorstepDeliveryTypes'] = $doorstepDeliveryTypes;
        }
        // query params
        if ($currency !== null) {
            if('form' === 'form' && is_array($currency)) {
                foreach($currency as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['currency'] = $currency;
            }
        }
        // query params
        if ($totalValue !== null) {
            if('form' === 'form' && is_array($totalValue)) {
                foreach($totalValue as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['totalValue'] = $totalValue;
            }
        }
        // query params
        if ($pickupAccount !== null) {
            if('form' === 'form' && is_array($pickupAccount)) {
                foreach($pickupAccount as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pickupAccount'] = $pickupAccount;
            }
        }
        // query params
        if ($exchangeOnDelivery !== null) {
            if('form' === 'form' && is_array($exchangeOnDelivery)) {
                foreach($exchangeOnDelivery as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['exchangeOnDelivery'] = $exchangeOnDelivery;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
