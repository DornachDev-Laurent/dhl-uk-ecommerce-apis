<?php
/**
 * ServicepointsApi
 * PHP version 7.2
 *
 * @category Class
 * @package  DHLUK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL eCommerce UK API
 *
 * The DHL eCommerce UK API allows customers and partners to:  - Get available products based on delivery address and parcel size.  - Find servicepoints in the UK or worldwide.  - Create new shipments and optionally return labels.  - Get shipment customs documents.  - Request shipment cancellation.  - Request shipment amendment.  - Regenerate labels ready for reprinting.  - Get details of customer trading locations.  - Request a driver pickup from a customer trading location.  - Get information about driver pickups already requested.  - Track shipments.  - Get DHL eCommerce UK reference data to help you provide valid shipment data from your applications.  - Add a What 3 Words to a domestic shipment.  - Find a DHL Parcels Depot.   **`API Authentications:`** All API operations require an access token to be passed in the Authorization Header for each request. The token type is an OAuth 2.0 Bearer token. To get the token you have to call the Authentication operation of this API and provide **client_id** and **client_secret**. The Access Token is valid for defined amount of time so it is not necessary to request the token for each request. Developers should implement the client application in a way that the token will be requested again only after it expires.  **`Access Token Lifecycle:`** When you receive an Access Token, it is valid for 60 minutes. During this time, you don't have to request new token per each request, but you can simply reuse the same token to access API resources, until the token expires. The invalid token or token expiration will be indicated by HTTP Status Code 401 Unauthorized, then your application has to request new Access Token.    **Recommended sequence for creating a shipment with the Shipping Label API is as follows:**        1.  Use client_id and client_secret to authenticate and obtain an access token using /auth/v1/accesstoken (see details below). A client_id and client_secret can be obtained by registering on the DHL developer portal and then registering an app in the user dashboard.   2.  Prepare valid JSON request as per Shipping Label API POST request schema (see examples below). Use data above depending on your use-case.   3.  Send an API request the correct API endpoint for test/UAT or live/production:          test: https://api-uat.dhl.com/parceluk/shipping/v1/label              live: https://api.dhl.com/parceluk/shipping/v1/label          If the shipment request is valid and accepted then a new shipmentId and optionally labels will be returned in the response.  **Sample Pickup Accounts And Product codes:**    To test using the Shipping Label API, you may use the following accounts and additional settings.        UK Domestic Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F020579  | DHL eCommerce UK domestic labels   orderedProduct            | 220      | Signature At Address Only - Next Day    International Road Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F820579  | DHL eCommerce UK Parcel Connect labels   orderedProduct             | 206      | Parcel Connect               International Air Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F520579 | DHL eCommerce UK International Labels   orderedProduct             | 101     | Worldwide Air
 *
 * The version of the OpenAPI document: 1.3.8
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DHLUK\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use DHLUK\ApiException;
use DHLUK\Configuration;
use DHLUK\HeaderSelector;
use DHLUK\ObjectSerializer;

/**
 * ServicepointsApi Class Doc Comment
 *
 * @category Class
 * @package  DHLUK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ServicepointsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation servicepointV1FindByAddressGet
     *
     * Find nearest DHL Service Point locations to an address
     *
     * @param  string $country Two character ISO country code of address. (required)
     * @param  string $postalCode Postal code of address. Either postalCode, address1 or city must be supplied. (optional)
     * @param  string $address1 Address line 1 of address. Either postalCode, address1 or city must be supplied. (optional)
     * @param  string $city Name of town or city of address. Either postalCode, address1 or city must be supplied. (optional)
     * @param  string[] $locationTypes A list of requested Servicepoint location types for the parcel size, weight and country. This will have previously been returned by the Product Capabilities API as deliveryCapabilities -&gt; servicePointLocationTypes. (optional)
     * @param  string $serviceType Each location can offer more than one service. This parameter can be added multiple times in each API request. The response will include only locations with at least all of the serviceTypes requested. (optional)
     * @param  float $radius Specifies the radius in metres around the provided location, to search within. Maximum radius: 25 000 metres. Default radius: 500 metres. (optional, default to 500)
     * @param  float $limit Number specifying the maximum amount of locations included in the results. Maximum limit: 50 locations. Default limit: 15 locations. (optional, default to 15)
     *
     * @throws \DHLUK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DHLUK\Model\ServicePoint[]|object[]
     */
    public function servicepointV1FindByAddressGet($country, $postalCode = null, $address1 = null, $city = null, $locationTypes = null, $serviceType = null, $radius = 500, $limit = 15)
    {
        list($response) = $this->servicepointV1FindByAddressGetWithHttpInfo($country, $postalCode, $address1, $city, $locationTypes, $serviceType, $radius, $limit);
        return $response;
    }

    /**
     * Operation servicepointV1FindByAddressGetWithHttpInfo
     *
     * Find nearest DHL Service Point locations to an address
     *
     * @param  string $country Two character ISO country code of address. (required)
     * @param  string $postalCode Postal code of address. Either postalCode, address1 or city must be supplied. (optional)
     * @param  string $address1 Address line 1 of address. Either postalCode, address1 or city must be supplied. (optional)
     * @param  string $city Name of town or city of address. Either postalCode, address1 or city must be supplied. (optional)
     * @param  string[] $locationTypes A list of requested Servicepoint location types for the parcel size, weight and country. This will have previously been returned by the Product Capabilities API as deliveryCapabilities -&gt; servicePointLocationTypes. (optional)
     * @param  string $serviceType Each location can offer more than one service. This parameter can be added multiple times in each API request. The response will include only locations with at least all of the serviceTypes requested. (optional)
     * @param  float $radius Specifies the radius in metres around the provided location, to search within. Maximum radius: 25 000 metres. Default radius: 500 metres. (optional, default to 500)
     * @param  float $limit Number specifying the maximum amount of locations included in the results. Maximum limit: 50 locations. Default limit: 15 locations. (optional, default to 15)
     *
     * @throws \DHLUK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DHLUK\Model\ServicePoint[]|object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function servicepointV1FindByAddressGetWithHttpInfo($country, $postalCode = null, $address1 = null, $city = null, $locationTypes = null, $serviceType = null, $radius = 500, $limit = 15)
    {
        $request = $this->servicepointV1FindByAddressGetRequest($country, $postalCode, $address1, $city, $locationTypes, $serviceType, $radius, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\DHLUK\Model\ServicePoint[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DHLUK\Model\ServicePoint[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('object[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DHLUK\Model\ServicePoint[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DHLUK\Model\ServicePoint[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation servicepointV1FindByAddressGetAsync
     *
     * Find nearest DHL Service Point locations to an address
     *
     * @param  string $country Two character ISO country code of address. (required)
     * @param  string $postalCode Postal code of address. Either postalCode, address1 or city must be supplied. (optional)
     * @param  string $address1 Address line 1 of address. Either postalCode, address1 or city must be supplied. (optional)
     * @param  string $city Name of town or city of address. Either postalCode, address1 or city must be supplied. (optional)
     * @param  string[] $locationTypes A list of requested Servicepoint location types for the parcel size, weight and country. This will have previously been returned by the Product Capabilities API as deliveryCapabilities -&gt; servicePointLocationTypes. (optional)
     * @param  string $serviceType Each location can offer more than one service. This parameter can be added multiple times in each API request. The response will include only locations with at least all of the serviceTypes requested. (optional)
     * @param  float $radius Specifies the radius in metres around the provided location, to search within. Maximum radius: 25 000 metres. Default radius: 500 metres. (optional, default to 500)
     * @param  float $limit Number specifying the maximum amount of locations included in the results. Maximum limit: 50 locations. Default limit: 15 locations. (optional, default to 15)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function servicepointV1FindByAddressGetAsync($country, $postalCode = null, $address1 = null, $city = null, $locationTypes = null, $serviceType = null, $radius = 500, $limit = 15)
    {
        return $this->servicepointV1FindByAddressGetAsyncWithHttpInfo($country, $postalCode, $address1, $city, $locationTypes, $serviceType, $radius, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation servicepointV1FindByAddressGetAsyncWithHttpInfo
     *
     * Find nearest DHL Service Point locations to an address
     *
     * @param  string $country Two character ISO country code of address. (required)
     * @param  string $postalCode Postal code of address. Either postalCode, address1 or city must be supplied. (optional)
     * @param  string $address1 Address line 1 of address. Either postalCode, address1 or city must be supplied. (optional)
     * @param  string $city Name of town or city of address. Either postalCode, address1 or city must be supplied. (optional)
     * @param  string[] $locationTypes A list of requested Servicepoint location types for the parcel size, weight and country. This will have previously been returned by the Product Capabilities API as deliveryCapabilities -&gt; servicePointLocationTypes. (optional)
     * @param  string $serviceType Each location can offer more than one service. This parameter can be added multiple times in each API request. The response will include only locations with at least all of the serviceTypes requested. (optional)
     * @param  float $radius Specifies the radius in metres around the provided location, to search within. Maximum radius: 25 000 metres. Default radius: 500 metres. (optional, default to 500)
     * @param  float $limit Number specifying the maximum amount of locations included in the results. Maximum limit: 50 locations. Default limit: 15 locations. (optional, default to 15)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function servicepointV1FindByAddressGetAsyncWithHttpInfo($country, $postalCode = null, $address1 = null, $city = null, $locationTypes = null, $serviceType = null, $radius = 500, $limit = 15)
    {
        $returnType = '\DHLUK\Model\ServicePoint[]';
        $request = $this->servicepointV1FindByAddressGetRequest($country, $postalCode, $address1, $city, $locationTypes, $serviceType, $radius, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'servicepointV1FindByAddressGet'
     *
     * @param  string $country Two character ISO country code of address. (required)
     * @param  string $postalCode Postal code of address. Either postalCode, address1 or city must be supplied. (optional)
     * @param  string $address1 Address line 1 of address. Either postalCode, address1 or city must be supplied. (optional)
     * @param  string $city Name of town or city of address. Either postalCode, address1 or city must be supplied. (optional)
     * @param  string[] $locationTypes A list of requested Servicepoint location types for the parcel size, weight and country. This will have previously been returned by the Product Capabilities API as deliveryCapabilities -&gt; servicePointLocationTypes. (optional)
     * @param  string $serviceType Each location can offer more than one service. This parameter can be added multiple times in each API request. The response will include only locations with at least all of the serviceTypes requested. (optional)
     * @param  float $radius Specifies the radius in metres around the provided location, to search within. Maximum radius: 25 000 metres. Default radius: 500 metres. (optional, default to 500)
     * @param  float $limit Number specifying the maximum amount of locations included in the results. Maximum limit: 50 locations. Default limit: 15 locations. (optional, default to 15)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function servicepointV1FindByAddressGetRequest($country, $postalCode = null, $address1 = null, $city = null, $locationTypes = null, $serviceType = null, $radius = 500, $limit = 15)
    {
        // verify the required parameter 'country' is set
        if ($country === null || (is_array($country) && count($country) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $country when calling servicepointV1FindByAddressGet'
            );
        }
        if (!preg_match("/^[a-zA-Z]{2}$/", $country)) {
            throw new \InvalidArgumentException("invalid value for \"country\" when calling ServicepointsApi.servicepointV1FindByAddressGet, must conform to the pattern /^[a-zA-Z]{2}$/.");
        }

        if ($postalCode !== null && strlen($postalCode) > 15) {
            throw new \InvalidArgumentException('invalid length for "$postalCode" when calling ServicepointsApi.servicepointV1FindByAddressGet, must be smaller than or equal to 15.');
        }

        if ($address1 !== null && strlen($address1) > 35) {
            throw new \InvalidArgumentException('invalid length for "$address1" when calling ServicepointsApi.servicepointV1FindByAddressGet, must be smaller than or equal to 35.');
        }

        if ($city !== null && strlen($city) > 35) {
            throw new \InvalidArgumentException('invalid length for "$city" when calling ServicepointsApi.servicepointV1FindByAddressGet, must be smaller than or equal to 35.');
        }

        if ($locationTypes !== null && count($locationTypes) < 1) {
            throw new \InvalidArgumentException('invalid value for "$locationTypes" when calling ServicepointsApi.servicepointV1FindByAddressGet, number of items must be greater than or equal to 1.');
        }

        if ($radius !== null && $radius > 25000) {
            throw new \InvalidArgumentException('invalid value for "$radius" when calling ServicepointsApi.servicepointV1FindByAddressGet, must be smaller than or equal to 25000.');
        }

        if ($limit !== null && $limit > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ServicepointsApi.servicepointV1FindByAddressGet, must be smaller than or equal to 50.');
        }


        $resourcePath = '/servicepoint/v1/find-by-address';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($country !== null) {
            if('form' === 'form' && is_array($country)) {
                foreach($country as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['country'] = $country;
            }
        }
        // query params
        if ($postalCode !== null) {
            if('form' === 'form' && is_array($postalCode)) {
                foreach($postalCode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['postalCode'] = $postalCode;
            }
        }
        // query params
        if ($address1 !== null) {
            if('form' === 'form' && is_array($address1)) {
                foreach($address1 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['address1'] = $address1;
            }
        }
        // query params
        if ($city !== null) {
            if('form' === 'form' && is_array($city)) {
                foreach($city as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['city'] = $city;
            }
        }
        // query params
        if (is_array($locationTypes)) {
            $locationTypes = ObjectSerializer::serializeCollection($locationTypes, 'form', true);
        }
        if ($locationTypes !== null) {
            $queryParams['locationTypes'] = $locationTypes;
        }
        // query params
        if ($serviceType !== null) {
            if('form' === 'form' && is_array($serviceType)) {
                foreach($serviceType as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['serviceType'] = $serviceType;
            }
        }
        // query params
        if ($radius !== null) {
            if('form' === 'form' && is_array($radius)) {
                foreach($radius as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['radius'] = $radius;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation servicepointV1FindByGeoGet
     *
     * Search for DHL Service Point locations by geo coordinates
     *
     * @param  float $latitude Latitude (only accepts values between -90 to 90 ) (required)
     * @param  float $longitude Longitude (only accepts values between -180 to 180) (required)
     * @param  string[] $locationTypes A list of requested Servicepoint location types for the parcel size, weight and country. This will have previously been returned by the Product Capabilities API as deliveryCapabilities -&gt; servicePointLocationTypes. (optional)
     * @param  string $serviceType Each location can offer more than one service. This parameter can be added multiple times in each API request. The response will include only locations with at least all of the serviceTypes requested. (optional)
     * @param  float $radius Specifies the radius in metres around the provided location, to search within. Maximum radius: 25 000 metres. Default radius: 500 metres. (optional, default to 25000)
     * @param  float $limit Number specifying the maximum amount of locations included in the results. Maximum limit: 50 locations. Default limit: 15 locations. (optional, default to 15)
     *
     * @throws \DHLUK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DHLUK\Model\ServicePoint[]|object[]
     */
    public function servicepointV1FindByGeoGet($latitude, $longitude, $locationTypes = null, $serviceType = null, $radius = 25000, $limit = 15)
    {
        list($response) = $this->servicepointV1FindByGeoGetWithHttpInfo($latitude, $longitude, $locationTypes, $serviceType, $radius, $limit);
        return $response;
    }

    /**
     * Operation servicepointV1FindByGeoGetWithHttpInfo
     *
     * Search for DHL Service Point locations by geo coordinates
     *
     * @param  float $latitude Latitude (only accepts values between -90 to 90 ) (required)
     * @param  float $longitude Longitude (only accepts values between -180 to 180) (required)
     * @param  string[] $locationTypes A list of requested Servicepoint location types for the parcel size, weight and country. This will have previously been returned by the Product Capabilities API as deliveryCapabilities -&gt; servicePointLocationTypes. (optional)
     * @param  string $serviceType Each location can offer more than one service. This parameter can be added multiple times in each API request. The response will include only locations with at least all of the serviceTypes requested. (optional)
     * @param  float $radius Specifies the radius in metres around the provided location, to search within. Maximum radius: 25 000 metres. Default radius: 500 metres. (optional, default to 25000)
     * @param  float $limit Number specifying the maximum amount of locations included in the results. Maximum limit: 50 locations. Default limit: 15 locations. (optional, default to 15)
     *
     * @throws \DHLUK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DHLUK\Model\ServicePoint[]|object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function servicepointV1FindByGeoGetWithHttpInfo($latitude, $longitude, $locationTypes = null, $serviceType = null, $radius = 25000, $limit = 15)
    {
        $request = $this->servicepointV1FindByGeoGetRequest($latitude, $longitude, $locationTypes, $serviceType, $radius, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\DHLUK\Model\ServicePoint[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DHLUK\Model\ServicePoint[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('object[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DHLUK\Model\ServicePoint[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DHLUK\Model\ServicePoint[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation servicepointV1FindByGeoGetAsync
     *
     * Search for DHL Service Point locations by geo coordinates
     *
     * @param  float $latitude Latitude (only accepts values between -90 to 90 ) (required)
     * @param  float $longitude Longitude (only accepts values between -180 to 180) (required)
     * @param  string[] $locationTypes A list of requested Servicepoint location types for the parcel size, weight and country. This will have previously been returned by the Product Capabilities API as deliveryCapabilities -&gt; servicePointLocationTypes. (optional)
     * @param  string $serviceType Each location can offer more than one service. This parameter can be added multiple times in each API request. The response will include only locations with at least all of the serviceTypes requested. (optional)
     * @param  float $radius Specifies the radius in metres around the provided location, to search within. Maximum radius: 25 000 metres. Default radius: 500 metres. (optional, default to 25000)
     * @param  float $limit Number specifying the maximum amount of locations included in the results. Maximum limit: 50 locations. Default limit: 15 locations. (optional, default to 15)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function servicepointV1FindByGeoGetAsync($latitude, $longitude, $locationTypes = null, $serviceType = null, $radius = 25000, $limit = 15)
    {
        return $this->servicepointV1FindByGeoGetAsyncWithHttpInfo($latitude, $longitude, $locationTypes, $serviceType, $radius, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation servicepointV1FindByGeoGetAsyncWithHttpInfo
     *
     * Search for DHL Service Point locations by geo coordinates
     *
     * @param  float $latitude Latitude (only accepts values between -90 to 90 ) (required)
     * @param  float $longitude Longitude (only accepts values between -180 to 180) (required)
     * @param  string[] $locationTypes A list of requested Servicepoint location types for the parcel size, weight and country. This will have previously been returned by the Product Capabilities API as deliveryCapabilities -&gt; servicePointLocationTypes. (optional)
     * @param  string $serviceType Each location can offer more than one service. This parameter can be added multiple times in each API request. The response will include only locations with at least all of the serviceTypes requested. (optional)
     * @param  float $radius Specifies the radius in metres around the provided location, to search within. Maximum radius: 25 000 metres. Default radius: 500 metres. (optional, default to 25000)
     * @param  float $limit Number specifying the maximum amount of locations included in the results. Maximum limit: 50 locations. Default limit: 15 locations. (optional, default to 15)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function servicepointV1FindByGeoGetAsyncWithHttpInfo($latitude, $longitude, $locationTypes = null, $serviceType = null, $radius = 25000, $limit = 15)
    {
        $returnType = '\DHLUK\Model\ServicePoint[]';
        $request = $this->servicepointV1FindByGeoGetRequest($latitude, $longitude, $locationTypes, $serviceType, $radius, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'servicepointV1FindByGeoGet'
     *
     * @param  float $latitude Latitude (only accepts values between -90 to 90 ) (required)
     * @param  float $longitude Longitude (only accepts values between -180 to 180) (required)
     * @param  string[] $locationTypes A list of requested Servicepoint location types for the parcel size, weight and country. This will have previously been returned by the Product Capabilities API as deliveryCapabilities -&gt; servicePointLocationTypes. (optional)
     * @param  string $serviceType Each location can offer more than one service. This parameter can be added multiple times in each API request. The response will include only locations with at least all of the serviceTypes requested. (optional)
     * @param  float $radius Specifies the radius in metres around the provided location, to search within. Maximum radius: 25 000 metres. Default radius: 500 metres. (optional, default to 25000)
     * @param  float $limit Number specifying the maximum amount of locations included in the results. Maximum limit: 50 locations. Default limit: 15 locations. (optional, default to 15)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function servicepointV1FindByGeoGetRequest($latitude, $longitude, $locationTypes = null, $serviceType = null, $radius = 25000, $limit = 15)
    {
        // verify the required parameter 'latitude' is set
        if ($latitude === null || (is_array($latitude) && count($latitude) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $latitude when calling servicepointV1FindByGeoGet'
            );
        }
        if ($latitude > 90) {
            throw new \InvalidArgumentException('invalid value for "$latitude" when calling ServicepointsApi.servicepointV1FindByGeoGet, must be smaller than or equal to 90.');
        }
        if ($latitude < -90) {
            throw new \InvalidArgumentException('invalid value for "$latitude" when calling ServicepointsApi.servicepointV1FindByGeoGet, must be bigger than or equal to -90.');
        }

        // verify the required parameter 'longitude' is set
        if ($longitude === null || (is_array($longitude) && count($longitude) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $longitude when calling servicepointV1FindByGeoGet'
            );
        }
        if ($longitude > 180) {
            throw new \InvalidArgumentException('invalid value for "$longitude" when calling ServicepointsApi.servicepointV1FindByGeoGet, must be smaller than or equal to 180.');
        }
        if ($longitude < -180) {
            throw new \InvalidArgumentException('invalid value for "$longitude" when calling ServicepointsApi.servicepointV1FindByGeoGet, must be bigger than or equal to -180.');
        }

        if ($locationTypes !== null && count($locationTypes) < 1) {
            throw new \InvalidArgumentException('invalid value for "$locationTypes" when calling ServicepointsApi.servicepointV1FindByGeoGet, number of items must be greater than or equal to 1.');
        }

        if ($radius !== null && $radius > 25000) {
            throw new \InvalidArgumentException('invalid value for "$radius" when calling ServicepointsApi.servicepointV1FindByGeoGet, must be smaller than or equal to 25000.');
        }

        if ($limit !== null && $limit > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ServicepointsApi.servicepointV1FindByGeoGet, must be smaller than or equal to 50.');
        }


        $resourcePath = '/servicepoint/v1/find-by-geo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($latitude !== null) {
            if('form' === 'form' && is_array($latitude)) {
                foreach($latitude as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['latitude'] = $latitude;
            }
        }
        // query params
        if ($longitude !== null) {
            if('form' === 'form' && is_array($longitude)) {
                foreach($longitude as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['longitude'] = $longitude;
            }
        }
        // query params
        if (is_array($locationTypes)) {
            $locationTypes = ObjectSerializer::serializeCollection($locationTypes, 'form', true);
        }
        if ($locationTypes !== null) {
            $queryParams['locationTypes'] = $locationTypes;
        }
        // query params
        if ($serviceType !== null) {
            if('form' === 'form' && is_array($serviceType)) {
                foreach($serviceType as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['serviceType'] = $serviceType;
            }
        }
        // query params
        if ($radius !== null) {
            if('form' === 'form' && is_array($radius)) {
                foreach($radius as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['radius'] = $radius;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation servicepointV1ServicepointsIdGet
     *
     * Retrieve one DHL Service Point location by its ID
     *
     * @param  string $id ID of the DHL Service Point location. (required)
     *
     * @throws \DHLUK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DHLUK\Model\ServicePoint|object[]
     */
    public function servicepointV1ServicepointsIdGet($id)
    {
        list($response) = $this->servicepointV1ServicepointsIdGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation servicepointV1ServicepointsIdGetWithHttpInfo
     *
     * Retrieve one DHL Service Point location by its ID
     *
     * @param  string $id ID of the DHL Service Point location. (required)
     *
     * @throws \DHLUK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DHLUK\Model\ServicePoint|object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function servicepointV1ServicepointsIdGetWithHttpInfo($id)
    {
        $request = $this->servicepointV1ServicepointsIdGetRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\DHLUK\Model\ServicePoint' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DHLUK\Model\ServicePoint', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('object[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DHLUK\Model\ServicePoint';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DHLUK\Model\ServicePoint',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation servicepointV1ServicepointsIdGetAsync
     *
     * Retrieve one DHL Service Point location by its ID
     *
     * @param  string $id ID of the DHL Service Point location. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function servicepointV1ServicepointsIdGetAsync($id)
    {
        return $this->servicepointV1ServicepointsIdGetAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation servicepointV1ServicepointsIdGetAsyncWithHttpInfo
     *
     * Retrieve one DHL Service Point location by its ID
     *
     * @param  string $id ID of the DHL Service Point location. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function servicepointV1ServicepointsIdGetAsyncWithHttpInfo($id)
    {
        $returnType = '\DHLUK\Model\ServicePoint';
        $request = $this->servicepointV1ServicepointsIdGetRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'servicepointV1ServicepointsIdGet'
     *
     * @param  string $id ID of the DHL Service Point location. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function servicepointV1ServicepointsIdGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling servicepointV1ServicepointsIdGet'
            );
        }

        $resourcePath = '/servicepoint/v1/servicepoints/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
