<?php
/**
 * TrackingAPIV1Api
 * PHP version 7.2
 *
 * @category Class
 * @package  DHLUK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL eCommerce UK API
 *
 * The DHL eCommerce UK API allows customers and partners to:  - Get available products based on delivery address and parcel size.  - Find servicepoints in the UK or worldwide.  - Create new shipments and optionally return labels.  - Get shipment customs documents.  - Request shipment cancellation.  - Request shipment amendment.  - Regenerate labels ready for reprinting.  - Get details of customer trading locations.  - Request a driver pickup from a customer trading location.  - Get information about driver pickups already requested.  - Track shipments.  - Get DHL eCommerce UK reference data to help you provide valid shipment data from your applications.  - Add a What 3 Words to a domestic shipment.  - Find a DHL Parcels Depot.   **`API Authentications:`** All API operations require an access token to be passed in the Authorization Header for each request. The token type is an OAuth 2.0 Bearer token. To get the token you have to call the Authentication operation of this API and provide **client_id** and **client_secret**. The Access Token is valid for defined amount of time so it is not necessary to request the token for each request. Developers should implement the client application in a way that the token will be requested again only after it expires.  **`Access Token Lifecycle:`** When you receive an Access Token, it is valid for 60 minutes. During this time, you don't have to request new token per each request, but you can simply reuse the same token to access API resources, until the token expires. The invalid token or token expiration will be indicated by HTTP Status Code 401 Unauthorized, then your application has to request new Access Token.    **Recommended sequence for creating a shipment with the Shipping Label API is as follows:**        1.  Use client_id and client_secret to authenticate and obtain an access token using /auth/v1/accesstoken (see details below). A client_id and client_secret can be obtained by registering on the DHL developer portal and then registering an app in the user dashboard.   2.  Prepare valid JSON request as per Shipping Label API POST request schema (see examples below). Use data above depending on your use-case.   3.  Send an API request the correct API endpoint for test/UAT or live/production:          test: https://api-uat.dhl.com/parceluk/shipping/v1/label              live: https://api.dhl.com/parceluk/shipping/v1/label          If the shipment request is valid and accepted then a new shipmentId and optionally labels will be returned in the response.  **Sample Pickup Accounts And Product codes:**    To test using the Shipping Label API, you may use the following accounts and additional settings.        UK Domestic Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F020579  | DHL eCommerce UK domestic labels   orderedProduct            | 220      | Signature At Address Only - Next Day    International Road Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F820579  | DHL eCommerce UK Parcel Connect labels   orderedProduct             | 206      | Parcel Connect               International Air Shipping | Codes  | Comments   ---|---|---   pickupAccount      | F520579 | DHL eCommerce UK International Labels   orderedProduct             | 101     | Worldwide Air
 *
 * The version of the OpenAPI document: 1.3.8
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DHLUK\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use DHLUK\ApiException;
use DHLUK\Configuration;
use DHLUK\HeaderSelector;
use DHLUK\ObjectSerializer;

/**
 * TrackingAPIV1Api Class Doc Comment
 *
 * @category Class
 * @package  DHLUK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TrackingAPIV1Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getImage
     *
     * Retrieve a specific digital asset (signature scan, photo or other image)
     *
     * @param  string $imageId Image identifier as provided in the Tracking API V1 Track as Shipment, in Proof of Delivery section (required)
     *
     * @throws \DHLUK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getImage($imageId)
    {
        list($response) = $this->getImageWithHttpInfo($imageId);
        return $response;
    }

    /**
     * Operation getImageWithHttpInfo
     *
     * Retrieve a specific digital asset (signature scan, photo or other image)
     *
     * @param  string $imageId Image identifier as provided in the Tracking API V1 Track as Shipment, in Proof of Delivery section (required)
     *
     * @throws \DHLUK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getImageWithHttpInfo($imageId)
    {
        $request = $this->getImageRequest($imageId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getImageAsync
     *
     * Retrieve a specific digital asset (signature scan, photo or other image)
     *
     * @param  string $imageId Image identifier as provided in the Tracking API V1 Track as Shipment, in Proof of Delivery section (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getImageAsync($imageId)
    {
        return $this->getImageAsyncWithHttpInfo($imageId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getImageAsyncWithHttpInfo
     *
     * Retrieve a specific digital asset (signature scan, photo or other image)
     *
     * @param  string $imageId Image identifier as provided in the Tracking API V1 Track as Shipment, in Proof of Delivery section (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getImageAsyncWithHttpInfo($imageId)
    {
        $returnType = 'object';
        $request = $this->getImageRequest($imageId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getImage'
     *
     * @param  string $imageId Image identifier as provided in the Tracking API V1 Track as Shipment, in Proof of Delivery section (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getImageRequest($imageId)
    {
        // verify the required parameter 'imageId' is set
        if ($imageId === null || (is_array($imageId) && count($imageId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $imageId when calling getImage'
            );
        }

        $resourcePath = '/tracking/v1/images/{imageId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($imageId !== null) {
            $resourcePath = str_replace(
                '{' . 'imageId' . '}',
                ObjectSerializer::toPathValue($imageId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['image/jpeg', 'image/gif', 'image/png', 'image/tiff']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['image/jpeg', 'image/gif', 'image/png', 'image/tiff'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getShipmentsPiece
     *
     * Track a piece in a shipment
     *
     * @param  string $trackingNumber The tracking number of the shipment for which to return the information. (required)
     * @param  string $pieceNumber The piece number of the parcel within a shipment for which to return the information. (required)
     * @param  string $service Hint which service (provider) should be used to resolve the tracking number. (optional)
     * @param  string $requesterCountryCode Optional [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code represents country of the consumer of the API response. It optimizes the return of the API response. (optional)
     * @param  string $originCountryCode Optional [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the shipment origin to further qualify the shipment tracking number (&#x60;trackingNumber&#x60;) parameter of the request. This parameter is necessary to search for the shipment in dsc service. (optional)
     * @param  string $recipientPostalCode Postal code of the destination address to * further qualify the shipment piece number (pieceNumber) parameter of the request or * parcel-nl and parcel-de services to display full set of data in the response. (optional)
     * @param  string $language ISO 639-1 2-character language code for the response. This parameter serves as an indication of the client preferences ONLY. Language availability depends on the service used. The actual response language is indicated by the Content-Language header. (optional, default to 'en')
     *
     * @throws \DHLUK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DHLUK\Model\LocalmodelPieceEvents
     */
    public function getShipmentsPiece($trackingNumber, $pieceNumber, $service = null, $requesterCountryCode = null, $originCountryCode = null, $recipientPostalCode = null, $language = 'en')
    {
        list($response) = $this->getShipmentsPieceWithHttpInfo($trackingNumber, $pieceNumber, $service, $requesterCountryCode, $originCountryCode, $recipientPostalCode, $language);
        return $response;
    }

    /**
     * Operation getShipmentsPieceWithHttpInfo
     *
     * Track a piece in a shipment
     *
     * @param  string $trackingNumber The tracking number of the shipment for which to return the information. (required)
     * @param  string $pieceNumber The piece number of the parcel within a shipment for which to return the information. (required)
     * @param  string $service Hint which service (provider) should be used to resolve the tracking number. (optional)
     * @param  string $requesterCountryCode Optional [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code represents country of the consumer of the API response. It optimizes the return of the API response. (optional)
     * @param  string $originCountryCode Optional [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the shipment origin to further qualify the shipment tracking number (&#x60;trackingNumber&#x60;) parameter of the request. This parameter is necessary to search for the shipment in dsc service. (optional)
     * @param  string $recipientPostalCode Postal code of the destination address to * further qualify the shipment piece number (pieceNumber) parameter of the request or * parcel-nl and parcel-de services to display full set of data in the response. (optional)
     * @param  string $language ISO 639-1 2-character language code for the response. This parameter serves as an indication of the client preferences ONLY. Language availability depends on the service used. The actual response language is indicated by the Content-Language header. (optional, default to 'en')
     *
     * @throws \DHLUK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DHLUK\Model\LocalmodelPieceEvents, HTTP status code, HTTP response headers (array of strings)
     */
    public function getShipmentsPieceWithHttpInfo($trackingNumber, $pieceNumber, $service = null, $requesterCountryCode = null, $originCountryCode = null, $recipientPostalCode = null, $language = 'en')
    {
        $request = $this->getShipmentsPieceRequest($trackingNumber, $pieceNumber, $service, $requesterCountryCode, $originCountryCode, $recipientPostalCode, $language);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\DHLUK\Model\LocalmodelPieceEvents' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DHLUK\Model\LocalmodelPieceEvents', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DHLUK\Model\LocalmodelPieceEvents';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DHLUK\Model\LocalmodelPieceEvents',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getShipmentsPieceAsync
     *
     * Track a piece in a shipment
     *
     * @param  string $trackingNumber The tracking number of the shipment for which to return the information. (required)
     * @param  string $pieceNumber The piece number of the parcel within a shipment for which to return the information. (required)
     * @param  string $service Hint which service (provider) should be used to resolve the tracking number. (optional)
     * @param  string $requesterCountryCode Optional [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code represents country of the consumer of the API response. It optimizes the return of the API response. (optional)
     * @param  string $originCountryCode Optional [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the shipment origin to further qualify the shipment tracking number (&#x60;trackingNumber&#x60;) parameter of the request. This parameter is necessary to search for the shipment in dsc service. (optional)
     * @param  string $recipientPostalCode Postal code of the destination address to * further qualify the shipment piece number (pieceNumber) parameter of the request or * parcel-nl and parcel-de services to display full set of data in the response. (optional)
     * @param  string $language ISO 639-1 2-character language code for the response. This parameter serves as an indication of the client preferences ONLY. Language availability depends on the service used. The actual response language is indicated by the Content-Language header. (optional, default to 'en')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShipmentsPieceAsync($trackingNumber, $pieceNumber, $service = null, $requesterCountryCode = null, $originCountryCode = null, $recipientPostalCode = null, $language = 'en')
    {
        return $this->getShipmentsPieceAsyncWithHttpInfo($trackingNumber, $pieceNumber, $service, $requesterCountryCode, $originCountryCode, $recipientPostalCode, $language)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getShipmentsPieceAsyncWithHttpInfo
     *
     * Track a piece in a shipment
     *
     * @param  string $trackingNumber The tracking number of the shipment for which to return the information. (required)
     * @param  string $pieceNumber The piece number of the parcel within a shipment for which to return the information. (required)
     * @param  string $service Hint which service (provider) should be used to resolve the tracking number. (optional)
     * @param  string $requesterCountryCode Optional [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code represents country of the consumer of the API response. It optimizes the return of the API response. (optional)
     * @param  string $originCountryCode Optional [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the shipment origin to further qualify the shipment tracking number (&#x60;trackingNumber&#x60;) parameter of the request. This parameter is necessary to search for the shipment in dsc service. (optional)
     * @param  string $recipientPostalCode Postal code of the destination address to * further qualify the shipment piece number (pieceNumber) parameter of the request or * parcel-nl and parcel-de services to display full set of data in the response. (optional)
     * @param  string $language ISO 639-1 2-character language code for the response. This parameter serves as an indication of the client preferences ONLY. Language availability depends on the service used. The actual response language is indicated by the Content-Language header. (optional, default to 'en')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShipmentsPieceAsyncWithHttpInfo($trackingNumber, $pieceNumber, $service = null, $requesterCountryCode = null, $originCountryCode = null, $recipientPostalCode = null, $language = 'en')
    {
        $returnType = '\DHLUK\Model\LocalmodelPieceEvents';
        $request = $this->getShipmentsPieceRequest($trackingNumber, $pieceNumber, $service, $requesterCountryCode, $originCountryCode, $recipientPostalCode, $language);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getShipmentsPiece'
     *
     * @param  string $trackingNumber The tracking number of the shipment for which to return the information. (required)
     * @param  string $pieceNumber The piece number of the parcel within a shipment for which to return the information. (required)
     * @param  string $service Hint which service (provider) should be used to resolve the tracking number. (optional)
     * @param  string $requesterCountryCode Optional [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code represents country of the consumer of the API response. It optimizes the return of the API response. (optional)
     * @param  string $originCountryCode Optional [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the shipment origin to further qualify the shipment tracking number (&#x60;trackingNumber&#x60;) parameter of the request. This parameter is necessary to search for the shipment in dsc service. (optional)
     * @param  string $recipientPostalCode Postal code of the destination address to * further qualify the shipment piece number (pieceNumber) parameter of the request or * parcel-nl and parcel-de services to display full set of data in the response. (optional)
     * @param  string $language ISO 639-1 2-character language code for the response. This parameter serves as an indication of the client preferences ONLY. Language availability depends on the service used. The actual response language is indicated by the Content-Language header. (optional, default to 'en')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getShipmentsPieceRequest($trackingNumber, $pieceNumber, $service = null, $requesterCountryCode = null, $originCountryCode = null, $recipientPostalCode = null, $language = 'en')
    {
        // verify the required parameter 'trackingNumber' is set
        if ($trackingNumber === null || (is_array($trackingNumber) && count($trackingNumber) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trackingNumber when calling getShipmentsPiece'
            );
        }
        // verify the required parameter 'pieceNumber' is set
        if ($pieceNumber === null || (is_array($pieceNumber) && count($pieceNumber) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pieceNumber when calling getShipmentsPiece'
            );
        }

        $resourcePath = '/tracking/v1/pieces';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($trackingNumber !== null) {
            if('form' === 'form' && is_array($trackingNumber)) {
                foreach($trackingNumber as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['trackingNumber'] = $trackingNumber;
            }
        }
        // query params
        if ($pieceNumber !== null) {
            if('form' === 'form' && is_array($pieceNumber)) {
                foreach($pieceNumber as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pieceNumber'] = $pieceNumber;
            }
        }
        // query params
        if ($service !== null) {
            if('form' === 'form' && is_array($service)) {
                foreach($service as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['service'] = $service;
            }
        }
        // query params
        if ($requesterCountryCode !== null) {
            if('form' === 'form' && is_array($requesterCountryCode)) {
                foreach($requesterCountryCode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['requesterCountryCode'] = $requesterCountryCode;
            }
        }
        // query params
        if ($originCountryCode !== null) {
            if('form' === 'form' && is_array($originCountryCode)) {
                foreach($originCountryCode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['originCountryCode'] = $originCountryCode;
            }
        }
        // query params
        if ($recipientPostalCode !== null) {
            if('form' === 'form' && is_array($recipientPostalCode)) {
                foreach($recipientPostalCode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['recipientPostalCode'] = $recipientPostalCode;
            }
        }
        // query params
        if ($language !== null) {
            if('form' === 'form' && is_array($language)) {
                foreach($language as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['language'] = $language;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getShipmentsTrackingnumberTrackingnumber
     *
     * Track a shipment
     *
     * @param  string $trackingNumber The tracking number of the shipment for which to return the information. (required)
     * @param  string $service Hint which service (provider) should be used to resolve the tracking number. (optional)
     * @param  string $requesterCountryCode Optional [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code represents country of the consumer of the API response. It optimizes the return of the API response. (optional)
     * @param  string $originCountryCode Optional [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the shipment origin to further qualify the shipment tracking number (&#x60;trackingNumber&#x60;) parameter of the request. This parameter is necessary to search for the shipment in dsc service. (optional)
     * @param  string $recipientPostalCode Postal code of the destination address to * further qualify the shipment tracking number (trackingNumber) parameter of the request or * parcel-nl and parcel-de services to display full set of data in the response. (optional)
     * @param  string $language ISO 639-1 2-character language code for the response. This parameter serves as an indication of the client preferences ONLY. Language availability depends on the service used. The actual response language is indicated by the Content-Language header. (optional, default to 'en')
     * @param  float $offset Pagination parameter. Offset from the start of the result set at which to retrieve the remainder of the results (if any). (optional, default to 0)
     * @param  float $limit Pagination parameter. Maximal number of results to retireve. (optional, default to 5)
     *
     * @throws \DHLUK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DHLUK\Model\SupermodelIoLogisticsTrackingShipments
     */
    public function getShipmentsTrackingnumberTrackingnumber($trackingNumber, $service = null, $requesterCountryCode = null, $originCountryCode = null, $recipientPostalCode = null, $language = 'en', $offset = 0, $limit = 5)
    {
        list($response) = $this->getShipmentsTrackingnumberTrackingnumberWithHttpInfo($trackingNumber, $service, $requesterCountryCode, $originCountryCode, $recipientPostalCode, $language, $offset, $limit);
        return $response;
    }

    /**
     * Operation getShipmentsTrackingnumberTrackingnumberWithHttpInfo
     *
     * Track a shipment
     *
     * @param  string $trackingNumber The tracking number of the shipment for which to return the information. (required)
     * @param  string $service Hint which service (provider) should be used to resolve the tracking number. (optional)
     * @param  string $requesterCountryCode Optional [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code represents country of the consumer of the API response. It optimizes the return of the API response. (optional)
     * @param  string $originCountryCode Optional [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the shipment origin to further qualify the shipment tracking number (&#x60;trackingNumber&#x60;) parameter of the request. This parameter is necessary to search for the shipment in dsc service. (optional)
     * @param  string $recipientPostalCode Postal code of the destination address to * further qualify the shipment tracking number (trackingNumber) parameter of the request or * parcel-nl and parcel-de services to display full set of data in the response. (optional)
     * @param  string $language ISO 639-1 2-character language code for the response. This parameter serves as an indication of the client preferences ONLY. Language availability depends on the service used. The actual response language is indicated by the Content-Language header. (optional, default to 'en')
     * @param  float $offset Pagination parameter. Offset from the start of the result set at which to retrieve the remainder of the results (if any). (optional, default to 0)
     * @param  float $limit Pagination parameter. Maximal number of results to retireve. (optional, default to 5)
     *
     * @throws \DHLUK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DHLUK\Model\SupermodelIoLogisticsTrackingShipments, HTTP status code, HTTP response headers (array of strings)
     */
    public function getShipmentsTrackingnumberTrackingnumberWithHttpInfo($trackingNumber, $service = null, $requesterCountryCode = null, $originCountryCode = null, $recipientPostalCode = null, $language = 'en', $offset = 0, $limit = 5)
    {
        $request = $this->getShipmentsTrackingnumberTrackingnumberRequest($trackingNumber, $service, $requesterCountryCode, $originCountryCode, $recipientPostalCode, $language, $offset, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\DHLUK\Model\SupermodelIoLogisticsTrackingShipments' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DHLUK\Model\SupermodelIoLogisticsTrackingShipments', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DHLUK\Model\SupermodelIoLogisticsTrackingShipments';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DHLUK\Model\SupermodelIoLogisticsTrackingShipments',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getShipmentsTrackingnumberTrackingnumberAsync
     *
     * Track a shipment
     *
     * @param  string $trackingNumber The tracking number of the shipment for which to return the information. (required)
     * @param  string $service Hint which service (provider) should be used to resolve the tracking number. (optional)
     * @param  string $requesterCountryCode Optional [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code represents country of the consumer of the API response. It optimizes the return of the API response. (optional)
     * @param  string $originCountryCode Optional [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the shipment origin to further qualify the shipment tracking number (&#x60;trackingNumber&#x60;) parameter of the request. This parameter is necessary to search for the shipment in dsc service. (optional)
     * @param  string $recipientPostalCode Postal code of the destination address to * further qualify the shipment tracking number (trackingNumber) parameter of the request or * parcel-nl and parcel-de services to display full set of data in the response. (optional)
     * @param  string $language ISO 639-1 2-character language code for the response. This parameter serves as an indication of the client preferences ONLY. Language availability depends on the service used. The actual response language is indicated by the Content-Language header. (optional, default to 'en')
     * @param  float $offset Pagination parameter. Offset from the start of the result set at which to retrieve the remainder of the results (if any). (optional, default to 0)
     * @param  float $limit Pagination parameter. Maximal number of results to retireve. (optional, default to 5)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShipmentsTrackingnumberTrackingnumberAsync($trackingNumber, $service = null, $requesterCountryCode = null, $originCountryCode = null, $recipientPostalCode = null, $language = 'en', $offset = 0, $limit = 5)
    {
        return $this->getShipmentsTrackingnumberTrackingnumberAsyncWithHttpInfo($trackingNumber, $service, $requesterCountryCode, $originCountryCode, $recipientPostalCode, $language, $offset, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getShipmentsTrackingnumberTrackingnumberAsyncWithHttpInfo
     *
     * Track a shipment
     *
     * @param  string $trackingNumber The tracking number of the shipment for which to return the information. (required)
     * @param  string $service Hint which service (provider) should be used to resolve the tracking number. (optional)
     * @param  string $requesterCountryCode Optional [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code represents country of the consumer of the API response. It optimizes the return of the API response. (optional)
     * @param  string $originCountryCode Optional [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the shipment origin to further qualify the shipment tracking number (&#x60;trackingNumber&#x60;) parameter of the request. This parameter is necessary to search for the shipment in dsc service. (optional)
     * @param  string $recipientPostalCode Postal code of the destination address to * further qualify the shipment tracking number (trackingNumber) parameter of the request or * parcel-nl and parcel-de services to display full set of data in the response. (optional)
     * @param  string $language ISO 639-1 2-character language code for the response. This parameter serves as an indication of the client preferences ONLY. Language availability depends on the service used. The actual response language is indicated by the Content-Language header. (optional, default to 'en')
     * @param  float $offset Pagination parameter. Offset from the start of the result set at which to retrieve the remainder of the results (if any). (optional, default to 0)
     * @param  float $limit Pagination parameter. Maximal number of results to retireve. (optional, default to 5)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShipmentsTrackingnumberTrackingnumberAsyncWithHttpInfo($trackingNumber, $service = null, $requesterCountryCode = null, $originCountryCode = null, $recipientPostalCode = null, $language = 'en', $offset = 0, $limit = 5)
    {
        $returnType = '\DHLUK\Model\SupermodelIoLogisticsTrackingShipments';
        $request = $this->getShipmentsTrackingnumberTrackingnumberRequest($trackingNumber, $service, $requesterCountryCode, $originCountryCode, $recipientPostalCode, $language, $offset, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getShipmentsTrackingnumberTrackingnumber'
     *
     * @param  string $trackingNumber The tracking number of the shipment for which to return the information. (required)
     * @param  string $service Hint which service (provider) should be used to resolve the tracking number. (optional)
     * @param  string $requesterCountryCode Optional [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code represents country of the consumer of the API response. It optimizes the return of the API response. (optional)
     * @param  string $originCountryCode Optional [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the shipment origin to further qualify the shipment tracking number (&#x60;trackingNumber&#x60;) parameter of the request. This parameter is necessary to search for the shipment in dsc service. (optional)
     * @param  string $recipientPostalCode Postal code of the destination address to * further qualify the shipment tracking number (trackingNumber) parameter of the request or * parcel-nl and parcel-de services to display full set of data in the response. (optional)
     * @param  string $language ISO 639-1 2-character language code for the response. This parameter serves as an indication of the client preferences ONLY. Language availability depends on the service used. The actual response language is indicated by the Content-Language header. (optional, default to 'en')
     * @param  float $offset Pagination parameter. Offset from the start of the result set at which to retrieve the remainder of the results (if any). (optional, default to 0)
     * @param  float $limit Pagination parameter. Maximal number of results to retireve. (optional, default to 5)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getShipmentsTrackingnumberTrackingnumberRequest($trackingNumber, $service = null, $requesterCountryCode = null, $originCountryCode = null, $recipientPostalCode = null, $language = 'en', $offset = 0, $limit = 5)
    {
        // verify the required parameter 'trackingNumber' is set
        if ($trackingNumber === null || (is_array($trackingNumber) && count($trackingNumber) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trackingNumber when calling getShipmentsTrackingnumberTrackingnumber'
            );
        }

        $resourcePath = '/tracking/v1/shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($trackingNumber !== null) {
            if('form' === 'form' && is_array($trackingNumber)) {
                foreach($trackingNumber as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['trackingNumber'] = $trackingNumber;
            }
        }
        // query params
        if ($service !== null) {
            if('form' === 'form' && is_array($service)) {
                foreach($service as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['service'] = $service;
            }
        }
        // query params
        if ($requesterCountryCode !== null) {
            if('form' === 'form' && is_array($requesterCountryCode)) {
                foreach($requesterCountryCode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['requesterCountryCode'] = $requesterCountryCode;
            }
        }
        // query params
        if ($originCountryCode !== null) {
            if('form' === 'form' && is_array($originCountryCode)) {
                foreach($originCountryCode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['originCountryCode'] = $originCountryCode;
            }
        }
        // query params
        if ($recipientPostalCode !== null) {
            if('form' === 'form' && is_array($recipientPostalCode)) {
                foreach($recipientPostalCode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['recipientPostalCode'] = $recipientPostalCode;
            }
        }
        // query params
        if ($language !== null) {
            if('form' === 'form' && is_array($language)) {
                foreach($language as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['language'] = $language;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
